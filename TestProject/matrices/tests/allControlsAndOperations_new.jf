// ////////////////////////////////////////////////////////////////////////////////
// // Copyright (c) 2009-2017, Exactpro Systems
// // Quality Assurance & Related Software Development for Innovative Trading Systems.
// // London Stock Exchange Group.
// // All rights reserved.
// // This is unpublished, licensed software, confidential and proprietary
// // information which is the property of Exactpro Systems or its licensors.
// ////////////////////////////////////////////////////////////////////////////////
#TestCase;#Kind;#Depends;#For
Prepare;;;
    #Id;#Action;$File
    TBL1;TableLoadFromFile;'testdata/allControlsAndOperations_new.csv'

    #Id;#Action;$Content
    TXT1;TextCreate;''

    // see help.txt
    #Id;#Global;#Let
    operationParameter;1;'$p'

    // see help.txt
    #Id;#Global;#Let
    where;1;'$w'

    // see help.txt
    #Id;#Global;#Let
    template;1;'$t'

    // see help.txt
    #Id;#Global;#Let
    needName;1;'$n'

    // see help.txt
    #Id;#Global;#Let
    notAllowed;1;'-'

    // see help.txt
    #Id;#Global;#Let
    adapterLetter;1;'N'

    // see help.txt
    #Id;#Global;#Let
    mask;1;'mask'

    // see help.txt
    #Id;#Global;#Let
    controlName;1;'Name'

    // see help.txt
    #Id;#Global;#Let
    offName;1;'Off'

    // see help.txt
    #Id;#Global;#Let
    notWrite;1;'N'

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    headerText;1;'\t#Action\u003b#Dialog\u003b#AppConnection\u003b#'

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    headerTextAssert;1;'\t#Action\u003b#Dialog\u003b#Assert\u003b#AppConnection\u003b#'

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    table;1;TBL1.Out

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    matrixText;1;TXT1.Out

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    adapter;1;'WEB'

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    delay;1;'.delay(500)'

    // adapter may be SWING or WEB ( in future will need add adapter for WinApp)
    #Id;#Global;#Let
    pattern;1;def(pattern, str) {Matcher matcher = Pattern.compile(pattern).matcher(str)\u003bif (matcher.find()) {return matcher.group(1)\u003b}return ''\u003b}

    #Id;#Global;#Let
    operationPattern;1;def (x) { return pattern("\\$p=#(.+?)#", x)}

    #Id;#Global;#Let
    templatePattern;1;def (x) { return pattern("\\$t=#(.+?)#", x)}

    #Id;#Global;#Let
    wherePattern;1;def (x) { return pattern("\\$w=#(\\w)#", x)}

    #Id;#Global;#Let
    prepareOperationPattern;1;def (x) {return pattern("\\$b=#(.+?)#", x)}

    #Id;#Global;#Let
    reasonPattern;1;def (x) { return pattern("\\$f=#(.+?)#", x)}

    #Id;#Global;#Let
    isNotNeedName;1;def(x) {return x.contains(needName)}

    #Id;#Global;#Let
    avaliableAdapter;1;def(x) { if (x.indexOf('$') != -1) {return x.substring(0,x.indexOf('$'))\u003b}return x\u003b}


#TestCase;#Kind;#Depends;#For
Add start adapter action;;;
    #Action;$Line;$Text
    TextAddLine;'#TestCase\nstart application';matrixText

    #Id;#Global;#Let
    projectDirectory;1;new File(".").getAbsolutePath()

    #Switch
    adapter
        #Case
        'SWING'
            #Action;$Line;$Text
            TextAddLine;'\t#Id\u003b#Action\u003b#AppId\u003b#Jar\u003b#Args\u003b#MainClass\n\tAPPSTR1\u003bApplicationStart\u003b\''+mockSwingApp+'\'\u003b\''+mockSwingJar+'\'\u003b\u003b\''+mockSwingClass+\'';matrixText

            #Action;$Line;$Text
            TextAddLine;'\t#Global\u003b#Action\u003b#appConnection\n\t1\u003bVars\u003bAPPSTR1.Out';matrixText

            #Id;#Global;#Let
            adapterLetter;1;'S'


        #Case
        'WEB'
            #Action;$Line;$Text
            TextAddLine;String.format('\t#Id\u003b#Action\u003b#AppId\u003b#Browser\u003b#URL\n\tAPPSTR1\u003bApplicationStart\u003b\''+mockWebApp+'\'\u003b\''+mockWebBrowser+'\'\u003b\''+mockWebURL+\'',projectDirectory);matrixText

            #Action;$Line;$Text
            TextAddLine;'\t#Global\u003b#Action\u003b#appConnection\n\t1\u003bVars\u003bAPPSTR1.Out';matrixText

            #Id;#Global;#Let
            adapterLetter;1;'W'


    #EndSwitch


#TestCase;#Kind;#Depends;#For
Generate;;;
    #Id;#Let
    maskMap;table.get(0)

    #Id;#Let
    maskOff;maskMap.remove(offName)

    #Id;#Let
    maskName;maskMap.remove(controlName)

    #For;#From;#To;#Step
    i;1;table.size()-1;1
        #Id;#Let
        currentLine;table.get(i)

        #Id;#Let
        name;currentLine.remove(controlName)

        #Id;#Let
        needOff;currentLine.remove(offName)

        #Id;#Let
        entrySet;currentLine.entrySet()

        // if off not empty, we will skip this line
        #If
        needOff != null && !needOff.trim().isEmpty()
            #Continue

        #EndIf

        #Id;#Let
        operationsArray;new ArrayList(currentLine.keySet())

        #Id;#Let
        valueArray;new ArrayList(currentLine.values())

        #Action;$Line;$Text
        TextAddLine;'#TestCase\ncontrol ' + name;matrixText

        #For;#From;#To;#Step
        j;2;operationsArray.size() - 1;1
            #Id;#Global;#Let
            currentValue;1;valueArray.get(j)

            #Id;#Global;#Let
            currentOperation;1;operationsArray.get(j)

            #Id;#Let
            currentMask;maskMap.get(currentOperation)

            #If
            currentValue != null && currentValue.equals(notWrite)
                #Continue

            #EndIf

            #Id;#Global;#Let
            checkedValue;1;templatePattern(currentMask)

            #Id;#Global;#Let
            whereCheck;1;wherePattern(currentMask)

            #Id;#Global;#Let
            parameterValue;1;operationPattern(currentMask)

            // replace default value
            #If
            checkedValue.isEmpty()
                #Id;#Global;#Let
                checkedValue;1;templatePattern(currentValue)

            #EndIf

            // replace default operation value
            #If
            !operationPattern(currentValue).isEmpty()
                #Id;#Global;#Let
                currentOperation;1;currentOperation.replace(operationParameter, operationPattern(currentValue))

            #Else
                #If
                !parameterValue.isEmpty()
                    // set default operation value
                    #Id;#Global;#Let
                    currentOperation;1;currentOperation.replace(operationParameter, parameterValue)

                #EndIf


            #EndIf

            // add control name to checked value
            #If
            !isNotNeedName(currentMask)
                #Id;#Global;#Let
                checkedValue;1;name+'_'+checkedValue

            #EndIf

            #If
            !avaliableAdapter(currentValue).contains(adapterLetter)
                #Id;#Global;#Let
                reason;1;reasonPattern(currentValue)

                #Id;#Let
                conditionSW;(currentValue == 'S' && adapterLetter == 'W') || (currentValue == 'W' && adapterLetter == 'S')

                #If
                conditionSW
                    #Action;$Line;$Text
                    TextAddLine;headerTextAssert + name+'\n\tDialogFill\u003b\'Main\'\u003bThis.Result==Result.Passed\u003bappConnection\u003b'+currentOperation+'\n';matrixText

                #EndIf

                #If
                !conditionSW
                    #If
                    reason.isEmpty()
                        #Id;#Global;#Let
                        reason;1;'is not allowed'

                    #EndIf

                    #Action;$Line;$Text
                    TextAddLine;headerTextAssert + name+'\n\tDialogFill\u003b\'Main\'\u003bThis.Result==Result.Failed && This.Reason.contains(\''+reason+'\')\u003bappConnection\u003b'+currentOperation+'\n';matrixText

                #EndIf

            #Else
                #Id;#Let
                prepareOperation;prepareOperationPattern(currentValue)

                #If
                !prepareOperation.isEmpty()
                    #Action;$Line;$Text
                    TextAddLine;headerText+name+'\n\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+prepareOperation+'\n';matrixText

                #EndIf

                #Id;#Global;#Let
                currentOperation;1;currentOperation+delay

                #Id;#Global;#Let
                checkLabel;1;''

                #Switch
                whereCheck
                    #Case
                    's'
                        #Action;$Line;$Text
                        TextAddLine;headerTextAssert+name+'\n\tDialogFill\u003b\'Main\'\u003bThis.Out.'+name+'.equals(\''+checkedValue+'\')\u003bappConnection\u003b'+currentOperation+'\n';matrixText


                    #Case
                    'm'
                        #Action;$Line;$Text
                        TextAddLine;headerText+name+'\n\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+currentOperation;matrixText

                        #Id;#Global;#Let
                        checkLabel;1;'moveLabel'


                    #Case
                    'c'
                        #Action;$Line;$Text
                        TextAddLine;headerText+name+'\n\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+currentOperation;matrixText

                        #Id;#Global;#Let
                        checkLabel;1;'centralLabel'


                    #Default
                        #Action;$Line;$Text
                        TextAddLine;headerText+name+'\n\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+currentOperation+'\n';matrixText


                #EndSwitch

                #If
                !checkLabel.isEmpty()
                    #Action;$Line;$Text
                    TextAddLine;headerText+checkLabel+'\u003b#Assert\n\tDialogFill\u003b\'Main\'\u003bappConnection\u003bDo.get()\u003bThis.Out.'+checkLabel+'.equals(\''+checkedValue+'\')\n';matrixText

                #EndIf


            #EndIf

        #EndFor

    #EndFor


#TestCase;#Kind;#Depends;#For
Add close adapter action;;;
    #Action;$Line;$Text
    TextAddLine;'#TestCase\nstop application';matrixText

    #Action;$Line;$Text
    TextAddLine;'\t#Action\u003b#AppConnection\n\tApplicationStop\u003bappConnection';matrixText


#TestCase;#Kind;#Depends;#For
Save to matrix;;;
    #Action;$Title;$Text
    TextReport;'matrix';matrixText

    #Action;$Text;$File
    TextSaveToFile;matrixText;'testdata/result_new.jf'


#Off;#TestCase;#Kind;#Depends;#For
1;Execute;;;
    #Id;#Action;$Text
    MXRN1;MatrixRunFromText;matrixText

    #Id;#Action;#Assert;$Matrix;$Time
    MXWT1;MatrixWait;MXRN1.Out.failed() == 0;MXRN1.Out;100000

    #Id;#Action;matrix;passed;failed;report
    resTab;TableCreate;;;;

    #Action;$Table;matrix;passed;failed;report
    TableAddValue;resTab.Out;MXRN1.Out.getMatrixName();'<font color="LawnGreen">'+MXRN1.Out.passed()+'</font>';'<font color="Red">'+MXRN1.Out.failed()+'</font>';'<a href="../'+MXRN1.Out.getReportName()+'">'+MXRN1.Out.getMatrixName()+'</a>'

    #Action;$Table;$Title
    TableReport;resTab.Out;''



