#Id;#TestCase;#Kind;#Depends;#For
TABLE_ADD_COLUMNS;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Add a column in empty table';;;
        #Id;#Action
        TBL1;TableCreate

        #Action;#Table;#Columns
        TableAddColumns;TBL1.Out;'one'

        #Assert;#Message
        TBL1.Out.getHeader(0).equals('one');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column in empty table by index 0';;;
        #Id;#Action
        TBL1;TableCreate

        #Action;#Table;#Columns;#Index
        TableAddColumns;TBL1.Out;'one';0

        #Assert;#Message
        TBL1.Out.getHeader(0).equals('one');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column in table which one already has 2 columns';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Table;#Columns
        TableAddColumns;TBL1.Out;'surname'

        #Assert;#Message
        TBL1.Out.getHeader(2).equals('surname');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add array of columns in table which one already has 2 columns';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Table;#Columns
        TableAddColumns;TBL1.Out;new String[]{'adress','postindex'}

        #Assert;#Message
        TBL1.Out.getHeader(2).equals('adress') && TBL1.Out.getHeader(3).equals('postindex');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column by index 1 to table which one already has 2 columns';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Table;#Columns;#Index
        TableAddColumns;TBL1.Out;'age';1

        #Assert;#Message
        TBL1.Out.getHeader(1).equals('age');'column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column by empty index to table which one already has 2 columns';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Table;#Columns;#Index
        TableAddColumns;TBL1.Out;'town';

        #Assert;#Message
        TBL1.Out.getHeader(TBL1.Out.getHeaderSize() - 1).equals('town');'column was not added at the end'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add array of columns by index to table which one already has 2 columns';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Table;#Columns;#Index
        TableAddColumns;TBL1.Out;new String[]{'adress','postindex'};1

        #Assert;#Message
        TBL1.Out.getHeader(1).equals('adress') && TBL1.Out.getHeader(2).equals('postindex');'column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has not fill';;;
        // 
        #Action;#Assert;#Table;#Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;'name'

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column field has not fill';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        // 
        #Action;#Assert;#Table;#Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;TBL1.Out;

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column field has empty string value';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Assert;#Table;#Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;TBL1.Out;''

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column field has array of strings which has an empty string';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Assert;#Table;#Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;TBL1.Out;new String[]{'adress','','postindex'}

    #EndStep

    #Step;#Kind;#For;#Depends
    'The index field has out of bound values';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Assert;#Table;#Columns;#Index
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1.Out;'minusOne';-1

        #Action;#Assert;#Table;#Columns;#Index
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1.Out;'nineNineNine';999

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has a value, but it is not a table value';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Assert;#Table;#Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1;'someColumn'

    #EndStep

    #Step;#Kind;#For;#Depends
    'The columns field has a value, but it is not a string or array of strings value';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Assert;#Table;#Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1.Out;5

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_SORT;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Sorting by default (ask) for sorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#ColumnName;#Table
        TableSort;'numbers';actual

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by default (ask) for unsorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;#ColumnName;#Table
        TableSort;'numbers';actual

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = true for sorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#ColumnName;#Table;#Ascending
        TableSort;'numbers';actual;true

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = true for unsorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;#ColumnName;#Table;#Ascending
        TableSort;'numbers';actual;true

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = false for sorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;#ColumnName;#Table;#Ascending
        TableSort;'numbers';actual;false

        #Id;#RawTable
        expected;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = false for unsorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;#ColumnName;#Table;#Ascending
        TableSort;'numbers';actual;false

        #Id;#RawTable
        expected;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'If one column has sorted, then other columns also has sorted';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#ColumnName;#Table
        TableSort;'numbers';actual

        #Id;#RawTable
        expected;Table
        @;names;numbers;NewColumn
        0;three;1;11
        1;two;2;22
        2;one;3;33
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has not fill';;;
        #Action;#Assert;#ColumnName;#Table;#Ascending
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'numbers';;true

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has a value, but it is not a table value';;;
        #Id;#Action;#id;#name
        TBL1;TableCreate;;

        #Action;#Assert;#ColumnName;#Table;#Ascending
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'numbers';TBL1;true

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column with value from columnName does not exist in a table';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#Assert;#ColumnName;#Table
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'age';actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'The columnName field has not fill';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#Assert;#ColumnName;#Table
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'The Ascending field has not fill';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#Assert;#ColumnName;#Table;#Ascending
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'numbers';actual;

    #EndStep

    #Step;#Kind;#For;#Depends
    'The Ascending field has a wrong parameter';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;1;11
        1;two;2;22
        2;three;3;33
        #EndRawTable

        #Action;#ColumnName;#Table;#Ascending
        TableSort;'numbers';actual;'someValue'

        #Id;#RawTable
        expected;Table
        @;names;numbers;NewColumn
        0;three;3;33
        1;two;2;22
        2;one;1;11
        #EndRawTable

        #Action;#Expected;#Actual
        TableCompareTwo;expected;actual

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_COMPARE_TWO;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_LEFT_JOIN;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_ADD_VALUE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_COLUMN_RENAME;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_LOAD_FROM_FILE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REMOVE_COLUMNS;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_CONSIDER_COLUMNS_AS;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_GET_ROW_INDEXES;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REPLACE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_LOAD_FROM_DIR;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_SAVE_TO_FILE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_CREATE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_SET_VALUE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_EDIT;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_SELECT;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_UNION;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REPORT;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REMOVE_ROW;Test case;Never;;

