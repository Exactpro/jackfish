#Id;#TestCase;#Kind;#Depends;#For
TABLE_ADD_COLUMNS;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Add a column in empty table';;;
        #Id;#Action
        TBL1;TableCreate

        #Action;$Table;$Columns
        TableAddColumns;TBL1.Out;'one'

        #Assert;#Message
        TBL1.Out.getHeader(0).equals('one');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column in empty table by index 0';;;
        #Id;#Action
        TBL1;TableCreate

        #Action;$Table;$Columns;$Index
        TableAddColumns;TBL1.Out;'one';0

        #Assert;#Message
        TBL1.Out.getHeader(0).equals('one');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column in table which one already has 2 columns';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;$Table;$Columns
        TableAddColumns;TBL1.Out;'surname'

        #Assert;#Message
        TBL1.Out.getHeader(2).equals('surname');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add array of columns in table which one already has 2 columns';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;$Table;$Columns
        TableAddColumns;TBL1.Out;new String[]{'adress','postindex'}

        #Assert;#Message
        TBL1.Out.getHeader(2).equals('adress') && TBL1.Out.getHeader(3).equals('postindex');'the column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column by index 1 to table which one already has 2 columns';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;$Table;$Columns;$Index
        TableAddColumns;TBL1.Out;'age';1

        #Assert;#Message
        TBL1.Out.getHeader(1).equals('age');'column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add a column by empty index to table which one already has 2 columns';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;$Table;$Columns;$Index
        TableAddColumns;TBL1.Out;'town';

        #Assert;#Message
        TBL1.Out.getHeader(TBL1.Out.getHeaderSize() - 1).equals('town');'column was not added at the end'

    #EndStep

    #Step;#Kind;#For;#Depends
    'Add array of columns by index to table which one already has 2 columns';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;$Table;$Columns;$Index
        TableAddColumns;TBL1.Out;new String[]{'adress','postindex'};1

        #Assert;#Message
        TBL1.Out.getHeader(1).equals('adress') && TBL1.Out.getHeader(2).equals('postindex');'column was not added'

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has not fill';;;
        // 
        #Action;#Assert;$Table;$Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;'name'

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column field has not fill';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        // 
        #Action;#Assert;$Table;$Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;TBL1.Out;

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column field has empty string value';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;#Assert;$Table;$Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;TBL1.Out;''

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column field has array of strings which has an empty string';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;#Assert;$Table;$Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;TBL1.Out;new String[]{'adress','','postindex'}

    #EndStep

    #Step;#Kind;#For;#Depends
    'The index field has out of bound values';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;#Assert;$Table;$Columns;$Index
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1.Out;'minusOne';-1

        #Action;#Assert;$Table;$Columns;$Index
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1.Out;'nineNineNine';999

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has a value, but it is not a table value';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;#Assert;$Table;$Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1;'someColumn'

    #EndStep

    #Step;#Kind;#For;#Depends
    'The columns field has a value, but it is not a string or array of strings value';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;#Assert;$Table;$Columns
        TableAddColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;TBL1.Out;5

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_SORT;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Sorting by default (ask) for sorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$ColumnName;$Table
        TableSort;'numbers';actual

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by default (ask) for unsorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;$ColumnName;$Table
        TableSort;'numbers';actual

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = true for sorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$ColumnName;$Table;$Ascending
        TableSort;'numbers';actual;true

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = true for unsorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;$ColumnName;$Table;$Ascending
        TableSort;'numbers';actual;true

        #Id;#RawTable
        expected;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = false for sorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;$ColumnName;$Table;$Ascending
        TableSort;'numbers';actual;false

        #Id;#RawTable
        expected;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'Sorting by ascending = false for unsorted column';;;
        #Id;#RawTable
        actual;Table
        @;numbers
        0;1
        1;2
        2;3
        #EndRawTable

        #Action;$ColumnName;$Table;$Ascending
        TableSort;'numbers';actual;false

        #Id;#RawTable
        expected;Table
        @;numbers
        0;3
        1;2
        2;1
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'If one column has sorted, then other columns also has sorted';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;$ColumnName;$Table
        TableSort;'numbers';actual

        #Id;#RawTable
        expected;Table
        @;names;numbers;NewColumn
        0;three;1;11
        1;two;2;22
        2;one;3;33
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has not fill';;;
        #Action;#Assert;$ColumnName;$Table;$Ascending
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'numbers';;true

    #EndStep

    #Step;#Kind;#For;#Depends
    'The table field has a value, but it is not a table value';;;
        #Id;#Action;id;name
        TBL1;TableCreate;;

        #Action;#Assert;$ColumnName;$Table;$Ascending
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'numbers';TBL1;true

    #EndStep

    #Step;#Kind;#For;#Depends
    'The column with value from columnName does not exist in a table';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#Assert;$ColumnName;$Table
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'age';actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'The columnName field has not fill';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#Assert;$ColumnName;$Table
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;actual

    #EndStep

    #Step;#Kind;#For;#Depends
    'The Ascending field has not fill';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;3;33
        1;two;2;22
        2;three;1;11
        #EndRawTable

        #Action;#Assert;$ColumnName;$Table;$Ascending
        TableSort;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'numbers';actual;

    #EndStep

    #Step;#Kind;#For;#Depends
    'The Ascending field has a wrong parameter';;;
        #Id;#RawTable
        actual;Table
        @;names;numbers;NewColumn
        0;one;1;11
        1;two;2;22
        2;three;3;33
        #EndRawTable

        #Action;$ColumnName;$Table;$Ascending
        TableSort;'numbers';actual;'someValue'

        #Id;#RawTable
        expected;Table
        @;names;numbers;NewColumn
        0;three;3;33
        1;two;2;22
        2;one;1;11
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;actual

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_COMPARE_TWO;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Positive testing';;;
        #Step;#Kind;#For;#Depends
        'Plain testing';;;
            #Id;#RawTable
            actual;Table
            @;newH
            0;1
            1;2
            2;3
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH
            0;1
            1;2
            2;3
            #EndRawTable

            #Id;#Action;$Expected;$Actual
            TBLCMP2;TableCompareTwo;expected;actual

        #EndStep

        #Step;#Kind;#For;#Depends
        'Comparing with excluded columns';;;
            #Id;#RawTable
            actual;Table
            @;newH;NewColumn
            0;1;4
            1;2;5
            2;3;6
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH;NewColumn
            0;1;44
            1;2;55
            2;3;66
            #EndRawTable

            #Id;#RawTable
            expected2;Table
            @;newH;NewColumn;NewColumn2
            0;1;;
            1;2;;
            2;3;;
            #EndRawTable

            #Id;#Action;$ExcludeColumns;$Expected;$Actual
            TBLCMP2;TableCompareTwo;'NewColumn';expected;actual

            #Id;#Action;$ExcludeColumns;$Expected;$Actual
            TBLCMP10;TableCompareTwo;'NewColumn';actual;expected

            #Id;#Action;$ExcludeColumns;$Expected;$Actual
            TBLCMP10;TableCompareTwo;{'NewColumn','NewColumn2'};actual;expected

        #EndStep

        #Step;#Kind;#For;#Depends
        'Comparing with ignored rows order';;;
            #Id;#RawTable
            actual;Table
            @;newH;NewColumn
            0;1;4
            1;2;5
            2;3;6
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH;NewColumn
            0;2;5
            1;1;4
            2;3;6
            #EndRawTable

            #Id;#Action;$IgnoreRowsOrder;$Expected;$Actual
            TBLCMP2;TableCompareTwo;true;expected;actual

        #EndStep

    #EndStep

    #Step;#Kind;#For;#Depends
    'Negative testing';;;
        #Step;#Kind;#For;#Depends
        'Plain testing';;;
            #Id;#RawTable
            actual;Table
            @;newH
            0;1
            1;2
            2;3
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH
            0;3
            1;2
            2;1
            #EndRawTable

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP1;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;expected;actual

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP3;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP4;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;actual

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP5;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;expected;

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP7;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date();new Date()

        #EndStep

        #Step;#Kind;#For;#Depends
        'Comparing with excluded columns';;;
            #Id;#RawTable
            actual;Table
            @;newH;NewColumn
            0;1;4
            1;2;5
            2;3;6
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH;NewColumn
            0;1;4
            1;2;5
            2;3;6
            #EndRawTable

            #Id;#Action;#Assert;$ExcludeColumns;$Expected;$Actual
            TBLCMP2;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;expected;actual

            #Id;#Action;#Assert;$ExcludeColumns;$Expected;$Actual
            TBLCMP6;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date();expected;actual

        #EndStep

        #Step;#Kind;#For;#Depends
        'Comparing with ignored rows order';;;
            #Id;#RawTable
            actual;Table
            @;newH;NewColumn
            0;1;4
            1;2;5
            2;3;6
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH;NewColumn
            0;2;5
            1;1;4
            2;3;6
            #EndRawTable

            #Id;#Action;#Assert;$IgnoreRowsOrder;$Expected;$Actual
            TBLCMP2;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;false;expected;actual

            #Id;#Action;#Assert;$IgnoreRowsOrder;$Expected;$Actual
            TBLCMP8;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date();expected;actual

            #Id;#Action;#Assert;$IgnoreRowsOrder;$Expected;$Actual
            TBLCMP9;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;expected;actual

        #EndStep

        #Step;#Kind;#For;#Depends
        'Different size of columns';;;
            #Id;#RawTable
            actual;Table
            @;newH;NewColumn
            0;1;2
            1;2;3
            2;3;3
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH
            0;1
            1;2
            2;3
            #EndRawTable

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP10;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;expected

            #Id;#Action;$ExcludeColumns;$Expected;$Actual
            TBLCMP10;TableCompareTwo;'NewColumn';actual;expected

        #EndStep

        #Step;#Kind;#For;#Depends
        'Different size of columns and rows';;;
            #Id;#RawTable
            actual;Table
            @;newH;NewColumn;NewColumn1
            0;newR;;
            1;;;
            2;;;
            #EndRawTable

            #Id;#RawTable
            expected;Table
            @;newH;NewColumn;NewColumn2;NewColumn3
            0;newR;;;
            1;;;;
            2;;;;
            3;;;;
            #EndRawTable

            #Id;#Action;#Assert;$Expected;$Actual
            TBLCMP11;TableCompareTwo;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;expected;actual

        #EndStep

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_LEFT_JOIN;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Join without additional parameters (only left Table)';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;'person.CityId == city.id';Person;'person';City;'city'

        #Id;#RawTable
        expected;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Kate;3
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;TBLJN1.Out

    #EndStep

    #Step;#Kind;#For;#Depends
    'Join with additional parameters (both tables)';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias;CityName;Language
        TBLJN1;TableLeftJoin;'person.CityId == city.id';Person;'person';City;'city';'city.Name';'city.Language'

        #Id;#RawTable
        expected;Table
        @;Name;CityId;CityName;Language
        0;Andrey;1;London;us
        1;Victor;2;Moscow;ru
        2;Aleksander;1;London;us
        3;Kate;3;France;fr
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;TBLJN1.Out

    #EndStep

    #Step;#Kind;#For;#Depends
    'Join with additional parameters (Empty Title)';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias;
        TBLJN1;TableLeftJoin;'person.CityId == city.id';Person;'person';City;'city';'city.Name'

        #Id;#RawTable
        expected;Table
        @;Name;CityId;
        0;Andrey;1;London
        1;Victor;2;Moscow
        2;Aleksander;1;London
        3;Kate;3;France
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;TBLJN1.Out

    #EndStep

    #Step;#Kind;#For;#Depends
    'Join with additional parameters (Empty Value)';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias;CityName
        TBLJN1;TableLeftJoin;'person.CityId == city.id';Person;'person';City;'city';

        #Id;#RawTable
        expected;Table
        @;Name;CityId;CityName
        0;Andrey;1;
        1;Victor;2;
        2;Aleksander;1;
        3;Kate;3;
        #EndRawTable

        #Action;$Expected;$Actual
        TableCompareTwo;expected;TBLJN1.Out

    #EndStep

    #Step;#Kind;#For;#Depends
    'wrong condition';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;'person.CityId == de';Person;'person';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'variable of left alias already exists';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Let
        person;'1'

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'person.CityId == city.Id';Person;'person';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'variable of right alias already exists';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Let
        city;'1'

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'person.CityId == city.Id';Person;'person';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'empty left alias parameter';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'person.CityId == city.Id';Person;;City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'empty right alias parameter';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'person.CityId == city.Id';Person;'person';City;

    #EndStep

    #Step;#Kind;#For;#Depends
    'left alias is empty string';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'person.CityId == city.Id';Person;'';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'right alias is empty string';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'person.CityId == city.Id';Person;'person';City;''

    #EndStep

    #Step;#Kind;#For;#Depends
    'empty condition';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;Person;'person';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'condition is empty string';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'';Person;'person';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'empty Left Table parameter';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'person.CityId == city.id';;'person';City;'city'

    #EndStep

    #Step;#Kind;#For;#Depends
    'empty Right Table parameter';;;
        #Id;#RawTable
        City;Table
        @;id;Name;Language
        0;1;London;us
        1;2;Moscow;ru
        2;3;France;fr
        #EndRawTable

        #Id;#RawTable
        Person;Table
        @;Name;CityId
        0;Andrey;1
        1;Victor;2
        2;Aleksander;1
        3;Valery;4
        4;Kate;3
        #EndRawTable

        #Id;#Action;#Assert;$Condition;$LeftTable;$LeftAlias;$RightTable;$RightAlias
        TBLJN1;TableLeftJoin;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;'person.CityId == city.id';Person;'person';;'city'

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_ADD_VALUE;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Positive testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH
        0;newR
        #EndRawTable

        #Action;#Assert;$Table
        TableAddValue;This.Result == Result.Passed && myTable.size() == 2 && myTable[1].get('newH') == null;myTable

        #Action;#Assert;$Table;newH
        TableAddValue;This.Result == Result.Passed && myTable[2].get('newH') == 'new value';myTable;'new value'

        #Action;#Assert;$Index;$Table;newH
        TableAddValue;This.Result == Result.Passed && myTable[0].get('newH') == 'value for 0 row';0;myTable;'value for 0 row'

        #Action;#Assert;$Index;$Table;newH
        TableAddValue;This.Result == Result.Passed && myTable[myTable.size()-1].get('newH') == 'last row';Integer.MIN_VALUE;myTable;'last row'

        #Action;#Assert;$Table;newH
        TableAddValue;This.Result == Result.Passed && myTable[myTable.size()-1].get('newH') == null;myTable;

    #EndStep

    #Step;#Kind;#For;#Depends
    'Negative testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH
        0;newR
        #EndRawTable

        #Action;#Assert;$Table;ColumnThatDoesNotExist
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;myTable;'my value'

        #Action;#Assert;$Table
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

        #Action;#Assert;$Index;$Table
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;myTable

        #Action;#Assert;$Table
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date()

        #Action;#Assert;$Index;$Table
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date();new Date()

        #Action;#Assert;$Index;$Table
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;new Date();

        #Action;#Assert;$Index;$Table
        TableAddValue;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;Integer.MAX_VALUE;myTable

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_COLUMN_RENAME;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Positive testing';;;
        #Id;#Let
        column;'newName1'

        #Id;#Let
        column2;'newName2'

        #Id;#Let
        column3;'newName3'

        #Id;#RawTable
        myTable;Table
        @;newH;NewColumn
        0;newR;newR2
        #EndRawTable

        #Action;#Assert;$Table;newH
        TableColumnRename;This.Result == Result.Passed && myTable[0].get(column) == 'newR';myTable;column

        #Action;#Assert;$Table;newName1;NewColumn
        TableColumnRename;This.Result == Result.Passed && myTable[0].get('newName2') == 'newR' && myTable[0].get('newName3') == 'newR2';myTable;column2;column3

    #EndStep

    #Step;#Kind;#For;#Depends
    'Negative testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH
        0;newR
        #EndRawTable

        #Action;#Assert;$Table
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

        #Action;#Assert;$Table;
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;myTable;

        #Action;#Assert;$Table;
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;

        #Action;#Assert;$Table;newH
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;myTable;

        #Action;#Assert;$Table;
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;myTable;'newName'

        #Action;#Assert;$Table
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date()

        #Action;#Assert;$Table;columnThatDoesntExist
        TableColumnRename;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;myTable;'newName'

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_SAVE_TO_FILE;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Positive testing';;;
        #Step;#Kind;#For;#Depends
        'Delimiters';;;
            #Id;#RawTable
            tableForSaving;Table
            @;newH;NewColumn
            0;1;2
            1;3;4
            #EndRawTable

            #Action;$Table;$File
            TableSaveToFile;tableForSaving;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Id;#Action;$File
            TBL2;TableLoadFromFile;'testdata/ForTableTests.csv'

            #Id;#Action;$Expected;$Actual
            TBLCMP14;TableCompareTwo;tableForSaving;TBL2.Out

            #Action;$Delimiter;$Table;$File
            TableSaveToFile;',';tableForSaving;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Id;#Action;$Delimiter;$File
            TBL3;TableLoadFromFile;',';'testdata/ForTableTests.csv'

            #Id;#Action;$Expected;$Actual
            TBLCMP15;TableCompareTwo;tableForSaving;TBL2.Out

        #EndStep

        #Step;#Kind;#For;#Depends
        'SaveValues';;;
            #Id;#Let
            var1;100

            #Id;#RawTable
            myTable;Table
            @;newH
            0;var1/var1
            #EndRawTable

            #Action;$Expression;$Table
            TableConsiderColumnsAs;'newH';myTable

            #Action;$SaveValues;$Table;$File
            TableSaveToFile;true;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Id;#Action;#Assert;$File
            TBL3;TableLoadFromFile;This.Out[0].get('newH') == 1;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Action;$SaveValues;$Table;$File
            TableSaveToFile;false;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Id;#Action;#Assert;$File
            TBL3;TableLoadFromFile;This.Out[0].get('newH') == 'var1/var1';new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #EndStep

        #Step;#Kind;#For;#Depends
        'Complex';;;
            #Id;#Let
            var1;100

            #Id;#RawTable
            myTable;Table
            @;newH
            0;var1/var1
            #EndRawTable

            #Action;$Expression;$Table
            TableConsiderColumnsAs;'newH';myTable

            #Action;$Delimiter;$SaveValues;$Table;$File
            TableSaveToFile;',';true;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Id;#Action;#Assert;$Delimiter;$File
            TBL3;TableLoadFromFile;This.Out[0].get('newH') == 1;',';new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #EndStep

    #EndStep

    #Step;#Kind;#For;#Depends
    'Negative testing';;;
        #Step;#Kind;#For;#Depends
        'Empty parameters';;;
            #Id;#RawTable
            myTable;Table
            @;newH
            0;newR
            #EndRawTable

            #Action;#Assert;$Delimiter;$SaveValues;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;;;

            #Action;#Assert;$SaveValues;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;;

            #Action;#Assert;$Delimiter;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;;

            #Action;#Assert;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;myTable;

            #Action;#Assert;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Action;#Assert;$Delimiter;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Action;#Assert;$SaveValues;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Action;#Assert;$Delimiter;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;myTable;

        #EndStep

        #Step;#Kind;#For;#Depends
        'Wrong parameters';;;
            #Id;#RawTable
            myTable;Table
            @;newH;NewColumn
            0;1;2
            1;3;4
            #EndRawTable

            #Action;#Assert;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date();new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

            #Action;#Assert;$SaveValues;$Table;$File
            TableSaveToFile;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;new Date();myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #EndStep

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_LOAD_FROM_FILE;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Positive testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH;NewColumn
        0;1;2
        1;3;4
        #EndRawTable

        #Action;$Table;$File
        TableSaveToFile;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #Id;#Action;$File
        loadedTable;TableLoadFromFile;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #Id;#Action;$Expected;$Actual
        TBLCMP12;TableCompareTwo;myTable;loadedTable.Out

        #Action;$Delimiter;$Table;$File
        TableSaveToFile;',';myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #Id;#Action;$Delimiter;$File
        TBL5;TableLoadFromFile;',';new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #Id;#Action;$Expected;$Actual
        TBLCMP13;TableCompareTwo;myTable;TBL5.Out

    #EndStep

    #Step;#Kind;#For;#Depends
    'Negative testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH;NewColumn
        0;1;2
        1;3;4
        #EndRawTable

        #Action;$Table;$File
        TableSaveToFile;myTable;new File('').getAbsolutePath().replace(File.separator, '/') + '/testdata/ForTableTests.csv'

        #Id;#Action;#Assert;$File
        TBL4;TableLoadFromFile;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

        #Id;#Action;#Assert;$File
        TBL4;TableLoadFromFile;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;'sdf'

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_REMOVE_COLUMNS;Test case;Never;;
    #Step;#Kind;#For;#Depends
    'Positive testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH;NewColumn
        0;1;2
        1;3;4
        #EndRawTable

        #Id;#RawTable
        myTable1;Table
        @;newH;NewColumn
        0;1;2
        1;3;4
        #EndRawTable

        #Id;#RawTable
        myTable2;Table
        @;newH;NewColumn
        0;1;2
        1;3;4
        #EndRawTable

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;myTable.getHeaderSize() == 1;myTable;'NewColumn'

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;myTable1.getHeaderSize() == 0;myTable1;{'NewColumn','newH'}

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;myTable2.getHeaderSize() == 1;myTable2;{'NewColumn','DoesNotExist'}

    #EndStep

    #Step;#Kind;#For;#Depends
    'Negative testing';;;
        #Id;#RawTable
        myTable;Table
        @;newH
        0;newR
        #EndRawTable

        #Id;#Action;#Assert;$Table;$Columns
        tt;TableRemoveColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS && myTable.getHeaderSize() == 1;myTable;new Date()

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER && myTable.getHeaderSize() == 1;myTable;

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER && myTable.getHeaderSize() == 1;;'newH'

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER && myTable.getHeaderSize() == 1;;

        #Action;#Assert;$Table;$Columns
        TableRemoveColumns;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS && myTable.getHeaderSize() == 1;new Date();'newH'

    #EndStep


#Id;#TestCase;#Kind;#Depends;#For
TABLE_CONSIDER_COLUMNS_AS;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_GET_ROW_INDEXES;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REPLACE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_LOAD_FROM_DIR;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_CREATE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_SET_VALUE;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_EDIT;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_SELECT;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_UNION;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REPORT;Test case;Never;;

#Id;#TestCase;#Kind;#Depends;#For
TABLE_REMOVE_ROW;Test case;Never;;

