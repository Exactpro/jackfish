// //==============================================
// //  Copyright (c) 2009-2015, Exactpro Systems, LLC
// //  Quality Assurance & Related Development for Innovative Trading Systems.
// //  All rights reserved.
// //  This is unpublished, licensed software, confidential and proprietary
// //  information which is the property of Exactpro Systems, LLC or its licensors.
// //==============================================
#TestCase
Prepare
	#Id;#Action;#File
	TBL1;TableLoadFromFile;'./testdata/resources/allControlsAndOperations.csv'

	#Id;#Action;#Content
	TXT1;TextCreate;''

	// adapter may be SWING or WEB
	#Global;#Action;#table;#matrixText;#adapter;#variable;#templateVariable;#delay
	1;Vars;TBL1.Out;TXT1.Out;'SWING';'$x';'$t';'.delay(500)'

	#Off;#Global;#Action;#delay
	1;1;Vars;''

	#Global;#Action;#templatePattern;#valuePattern;#assertPattern
	1;Vars;def(x) {Matcher matcher = Pattern.compile('\\$t=(\'?\\w+\'?)').matcher(x)\u003bif (matcher.find()) {return matcher.group(1)\u003b}return ''\u003b};def(x) {Matcher matcher = Pattern.compile('\\$x=(\'?[\\w,\\.]+\'?)').matcher(x)\u003bif (matcher.find()) {return matcher.group(1)\u003b}return ''\u003b};def(x) {Matcher matcher = Pattern.compile('F=\'(.+)\'').matcher(x)\u003bif (matcher.find()) return matcher.group(1)\u003b}


#TestCase
Add start adapter action123
	#Action;#Line;#Text
	TextAddLine;'#TestCase\nstart application';matrixText

	#Global;#Action;#projectDirectory
	1;Vars;new File(".").getAbsolutePath()

	#Switch
	adapter
		#Case
		'SWING'
			#Action;#Line;#Text
			TextAddLine;'\t#Id\u003b#Action\u003b#AppId\u003b#Jar\u003b#Args\u003b#MainClass\n\tAPPSTR1\u003bApplicationStart\u003b\'MOCK_SWING\'\u003b\'mockapp.jar\'\u003b\u003b\'com.exactprosystems.jf.MockApp\'';matrixText

			#Action;#Line;#Text
			TextAddLine;'\t#Global\u003b#Action\u003b#appConnection\n\t1\u003bVars\u003bAPPSTR1.Out';matrixText


		#Case
		'WEB'
			#Action;#Line;#Text
			TextAddLine;String.format('\t#Id\u003b#Action\u003b#AppId\u003b#Browser\u003b#URL\n\tAPPSTR1\u003bApplicationStart\u003b\'MOCK_WEB\'\u003b\'Firefox\'\u003b\'file://%s/testdata/resources/mock/mock.html\'',projectDirectory);matrixText

			#Action;#Line;#Text
			TextAddLine;'\t#Global\u003b#Action\u003b#appConnection\n\t1\u003bVars\u003bAPPSTR1.Out';matrixText


	#EndSwitch


#TestCase
Generate
	#Off;#ReportOff

	#For;#From;#To;#Step
	i;2;table.size()-1;1
		#Action;#oneLine
		Vars;table.get(i)

		#Action;#name;#entrySet
		Vars;oneLine.remove('Name');oneLine.entrySet()

		// keyArray - operations
		// valueArray - value
		#Action;#keyArray;#valueArray
		Vars;new ArrayList(oneLine.keySet());new ArrayList(oneLine.values())

		#Action;#off
		Vars;valueArray.get(0)

		#If
		off != null && off.length() > 0
			#Continue

		#EndIf

		#Action;#Line;#Text
		TextAddLine;'#Off\u003b#TestCase\u003b\n'+off+'\u003bcontrol ' + name;matrixText

		#For;#From;#To;#Step
		j;1;keyArray.size() - 1;1
			#Global;#Action;#current;#currentOperation
			1;Vars;valueArray.get(j);keyArray.get(j)

			#Global;#Action;#template
			1;Vars;table.get(0).get(keyArray.get(j))

			#If
			currentOperation.contains(variable) || template.contains(variable)
				#Action;#variableValue
				Vars;valuePattern(current)

				#Global;#Action;#currentOperation
				1;Vars;currentOperation.replace(variable,variableValue)

			#EndIf

			#If
			template.contains(variable)
				#Global;#Action;#template
				1;Vars;template.substring(0,template.indexOf(variable))

			#EndIf

			#If
			current != null && !current.isEmpty() && !current.equals('-') && current.contains(String.valueOf(adapter.charAt(0)).toUpperCase())
				#Global;#Action;#key;#prepare
				1;Vars;keyArray.get(j);table.get(1).get(keyArray.get(j))

				#If
				prepare != null && !prepare.isEmpty() && current.startsWith('!')
					#Action;#Line;#Text
					TextAddLine;'\t#Action\u003b#Dialog\u003b#AppConnection\u003b#'+name;matrixText

					#Action;#Line;#Text
					TextAddLine;'\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+prepare+'\n';matrixText

				#EndIf

				#If
				current.contains(variable)
					#Action;#variableValue
					Vars;valuePattern(current)

					#Global;#Action;#key
					1;Vars;keyArray.get(j).replace(variable,variableValue)

				#EndIf

				#If
				template!=null && template.contains(templateVariable)
					#Action;#templateVar
					Vars;templatePattern(current)

					#If
					!templateVar.isEmpty()
						#Action;#Line;#Text
						TextAddLine;'\t#Action\u003b#Dialog\u003b#Assert\u003b#AppConnection\u003b#'+name;matrixText

						#Action;#Line;#Text
						TextAddLine;'\tDialogFill\u003b\'Main\'\u003bThis.Out.'+name+'.equals('+templateVar+')\u003bappConnection\u003b'+key+delay;matrixText

					#Else
						#Action;#Line;#Text
						TextAddLine;'\t#Action\u003b#Dialog\u003b#AppConnection\u003b#'+name;matrixText

						#Action;#Line;#Text
						TextAddLine;'\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+key+delay;matrixText


					#EndIf

				#Else
					#Action;#Line;#Text
					TextAddLine;'\t#Action\u003b#Dialog\u003b#AppConnection\u003b#'+name;matrixText

					#Action;#Line;#Text
					TextAddLine;'\tDialogFill\u003b\'Main\'\u003bappConnection\u003b'+key+delay;matrixText

					#If
					template != null && !template.isEmpty()
						#Global;#Action;#checkField
						1;Vars;name+'_'+template

						#If
						template.startsWith('!')
							#Global;#Action;#checkField
							1;Vars;template.substring(1)

						#EndIf

						#Action;#label
						Vars;template.contains('@') ? 'moveLabel' : 'centralLabel'

						#Global;#Action;#checkField
						1;Vars;checkField.replace('@','')

						#Action;#Line;#Text
						TextAddLine;'\t#Action\u003b#Dialog\u003b#AppConnection\u003b#'+label+'\u003b#Assert';matrixText

						#Action;#Line;#Text
						TextAddLine;'\tDialogFill\u003b\'Main\'\u003bappConnection\u003bDo.get()\u003bThis.Out.'+label+'.equals(\''+checkField+'\')\n';matrixText

					#EndIf


				#EndIf

			#Else
				#If
				current != null && !current.contains('N')
					#Action;#Line;#Text
					TextAddLine;'\t#Action\u003b#Dialog\u003b#Assert\u003b#AppConnection\u003b#'+name;matrixText

					#Global;#Action;#message
					1;Vars;'is not allowed'

					#If
					current.contains('$F')
						#Global;#Action;#message
						1;Vars;assertPattern(current)

					#EndIf

					#Action;#Line;#Text
					TextAddLine;'\tDialogFill\u003b\'Main\'\u003bThis.Result==Result.Failed && This.Reason.contains(\''+message+'\')\u003bappConnection\u003b'+currentOperation+'\n';matrixText

				#EndIf


			#EndIf

		#EndFor

	#EndFor

	#ReportOn


#TestCase
Add close adapter action
	#Action;#Line;#Text
	TextAddLine;'#TestCase\nstop application';matrixText

	#Action;#Line;#Text
	TextAddLine;'\t#Action\u003b#AppConnection\n\tApplicationStop\u003bappConnection';matrixText


#TestCase
Save to matrix
	#Action;#Title;#Text
	TextReport;'matrix';matrixText

	#Action;#Text;#File
	TextSaveToFile;matrixText;'./testdata/resources/result.jf'


#Off;#TestCase
1;Execute
	#Id;#Action;#Text
	MXRN1;MatrixRunFromText;matrixText

	#Id;#Action;#Assert;#Matrix;#Time
	MXWT1;MatrixWait;MXRN1.Out.failed() == 0;MXRN1.Out;100000


