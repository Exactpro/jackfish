#Id;#TestCase;#Kind;#Depends;#For
CHECK;Check;Never;;
    #Id;#Let
    actual;{'one' : 'oneValue', 'two' : 100 }

    #Action;$Actual;one
    Check;actual;'oneValue'

    #Action;$Actual;one;two
    Check;actual;'oneValue';100

    #Action;$Actual;$DoNotFail;one;two
    Check;actual;true;'oneValue';100

    #Action;$Actual;$DoNotFail;one;two
    Check;actual;false;'oneValue';100

    #Action;$Actual;$DoNotFail;one;two;tree
    Check;actual;true;'oneValue';100;'anyValue'

    // =====================================================================
    // Negative tests
    #Action;#Assert;$Actual
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

    #Action;#Assert;$Actual
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;111

    #Action;#Assert;$Actual;one;two
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;'oneValue';200

    #Action;#Assert;$Actual;one;two;tree
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;'oneValue';100;'anyValue'

    #Action;#Assert;$Actual;$DoNotFail;one;two;tree
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;false;'oneValue';100;'anyValue'


#Id;#TestCase;#Kind;#Depends;#For
COMPARE;Compare;Never;;
    #Id;#Let
    expected;{'one' : 'oneValue', 'two' : 100 }

    #Id;#Let
    actual1;{'one' : 'oneValue', 'two' : 100 }

    #Id;#Let
    actual2;{'one' : 'oneValue', 'two' : 200 }

    #Id;#Let
    actual3;{'one' : 'oneValue', 'two' : 100, 'tree' : 'anyValue' }

    // =====================================================================
    // Negative tests
    #Id;#Action;#Assert;$Expected;$Actual
    CMP1;Compare;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;

    // Negative testing
    #Id;#Action;#Assert;$Expected;$Actual
    CMP2;Compare;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;expected;

    // Negative testing
    #Id;#Action;#Assert;$Expected;$Actual
    CMP3;Compare;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;actual1


#Id;#TestCase;#Kind;#Depends;#For
EXEC;Execute;Never;;
    #Id;#Action;$Command;$Wait
    EXEC1;Execute;'java -version';true

    #Assert;#Message
    EXEC1.Out.Text.contains('Runtime Environment') && EXEC1.Out.Text.contains('1.8');'Wrong text'

    #Id;#Action;$Command;$Wait
    EXEC2;Execute;'java -version';false

    #Action;$Time
    Wait;500

    #Assert;#Message
    EXEC2.Out.Text.isEmpty();'Wrong text'

    #Id;#Action;$Command;$Wait;$WorkDir
    EXEC3;Execute;'java -version';true;'.'

    #Assert;#Message
    EXEC3.Out.Text.contains('Runtime Environment') && EXEC3.Out.Text.contains('1.8');'Wrong text'

    // =====================================================================
    // Negative tests
    #Id;#Action;#Assert;$Command
    EXEC4;Execute;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

    #Id;#Action;#Assert;$Command
    EXEC5;Execute;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;'wrong command'

    #Id;#Action;#Assert;$Command;$Wait
    EXEC6;Execute;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'';100

    #Id;#Action;#Assert;$Command;$Wait;$WorkDir
    EXEC7;Execute;This.Result == Result.Failed && This.Kind == ErrorKind.EXCEPTION;'java -version';true;100


#Id;#TestCase;#Kind;#Depends;#For
INPUT;Input;Never;;
    #Id;#Action;$DefaultValue;$HelpKind;$Title
    INP6;Input;100;HelpKind.ChooseFolder;'dont change it'

    #Assert;#Message
    INP6.Out == 100;'Value is wrong'

    // =====================================================================
    // Negative tests
    #Id;#Action;#Assert;$DefaultValue;$HelpKind;$Title
    INP1;Input;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;;

    #Id;#Action;#Assert;$DefaultValue;$HelpKind;$Title
    INP2;Input;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;HelpKind.ChooseSaveFile;

    #Id;#Action;#Assert;$DefaultValue;$HelpKind;$Title
    INP3;Input;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;HelpKind.ChooseSaveFile;''

    #Id;#Action;#Assert;$DefaultValue;$HelpKind;$Title
    INP4;Input;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;;100;''

    #Id;#Action;#Assert;$DefaultValue;$HelpKind;$Title
    INP5;Input;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;HelpKind.ChooseOpenFile;new Date()


#Id;#TestCase;#Kind;#Depends;#For
PRINT;Print;Never;;
    #Action
    Print

    #Action;$Str
    Print;'print test'

    #Action;a;b;c;
    Print;100;'it is b';true;'without title'


#Id;#TestCase;#Kind;#Depends;#For
RESTORE;Restore;Never;;
    #Id;#Action;$Name
    RST;Restore;''

    #Assert;#Message
    RST.Out == null;'Should be null'

    #Id;#Action;$Name
    RST1;Restore;'nonExistingName'

    #Assert;#Message
    RST1.Out == null;'Should be null'

    #Action;$Value;$Name
    Store;100;'existingName'

    #Id;#Action;$Name
    RST2;Restore;'existingName'

    #Assert;#Message
    RST2.Out == 100;'Should be 100'

    #Id;#Let
    var1;1

    #Id;#Action;$Name;$AsVar
    RST3;Restore;'existingName';'var1'

    #Assert;#Message
    var1 == 100;'Shoulnt be 100'

    #Assert;#Message
    !(isdef var2);'var2 shouldnt be defined yet'

    #Step;#Kind;#For;#Depends
    ;;;
        #Action;$Name;$AsVar
        Restore;'existingName';'var2'

    #EndStep

    #Assert;#Message
    !(isdef var2);'var2 shouldnt be defined yet'

    #Step;#Kind;#For;#Depends
    ;;;
        #Global;#Action;$Name;$AsVar
        1;Restore;'existingName';'var2'

    #EndStep

    #Assert;#Message
    isdef var2;'var2 should be defined'

    #Id;#RawText;#Kind
    TEXT1;Text;Matrix
    ~;"#TestCase;#Kind;#Depends;#For"
    ~;"Test case;Never;;"
    ~;"    #Action;$Value;$Name"
    ~;"    Store;200;'existingName2'"
    ~;""
    ~;"    #Action;$Name;$AsVar"
    ~;"    Restore;'existingName2';'extVar1'"
    ~;""
    ~;"    #Global;#Action;$Name;$AsVar"
    ~;"    1;Restore;'existingName2';'extVar2'"
    ~;""
    ~;""
    #EndRawText

    #Id;#Action;$Text
    MXRN1;MatrixRunFromText;TEXT1

    #Id;#Action;$Matrix
    MXWT1;MatrixWait;MXRN1.Out

    #Assert;#Message
    !(isdef extVar1);'Shouldnt be defined'

    #Assert;#Message
    !(isdef extVar2);'Shouldnt be defined'

    #Id;#Action;$Name;$AsVar
    RST4;Restore;'existingName2';'var3'

    #Assert;#Message
    var3 == 200;'Should be 200'

    // =====================================================================
    // Negative tests
    #Id;#Action;#Assert;$Name
    RST5;Restore;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;


#Id;#TestCase;#Kind;#Depends;#For
RESULT;ResultTable;Never;;
    #Id;#Let
    expectedColumns;[ 'Matrix', 'TestCaseId', 'TestCase', 'StepIdentity', 'Step', 'Time', 'Result', 'Error', 'Screenshot' ]

    #Id;#Action;$Decoraded
    RESTBL1;ResultTable;true

    #Assert;#Message
    RESTBL1.Out.getClass() == Table;'Type is not Table'

    #Assert;#Message
    RESTBL1.Out.size() > 0;'Table is empty'

    #Assert;#Message
    RESTBL1.Out[0].keySet().containsAll(expectedColumns);'Wrong column set'

    #Id;#Action;$Decoraded
    RESTBL2;ResultTable;false

    #Assert;#Message
    RESTBL2.Out.getClass() == Table;'Type is not Table'

    #Assert;#Message
    RESTBL2.Out[0].keySet().containsAll(expectedColumns);'Wrong column set'

    #Id;#Action;$Decoraded
    RESTBL3;ResultTable;true

    #Step;#Kind;#For;#Depends
    ;;;
    #EndStep

    #Id;#Action;$Decoraded
    RESTBL4;ResultTable;true

    #Assert;#Message
    RESTBL4.Out.size() == RESTBL3.Out.size() + 1;

    #Id;#RawText;#Kind
    TEXT1;Text;Matrix
    ~;"#Id;#TestCase;#Kind;#Depends;#For"
    ~;"TC1;Testcase1;;;"
    ~;"    #Id;#Step;#Kind;#For;#Depends"
    ~;"    SID1;'ST1';;;"
    ~;"    #EndStep"
    ~;""
    ~;"    #Id;#Step;#Kind;#For;#Depends"
    ~;"    SID2;'ST2';;;"
    ~;"        #Fail"
    ~;"        'User error'"
    ~;""
    ~;"    #EndStep"
    ~;""
    ~;""
    #EndRawText

    #Id;#Action;$Text
    MXRN1;MatrixRunFromText;TEXT1

    #Id;#Action;$Matrix
    MXWT1;MatrixWait;MXRN1.Out

    #Id;#Action;$Decoraded;$Matrix
    RESTBL5;ResultTable;false;MXRN1.Out

    #Id;#RawTable
    expectedTable;Table
    @;Matrix;TestCaseId;TestCase;StepIdentity;Step;Time;Result;Error;Screenshot
    0;new;TC1;Testcase1;;;9;Failed;User error;
    1;new;TC1;Testcase1;SID1;ST1;3;Passed;;
    2;new;TC1;Testcase1;SID2;ST2;1;Failed;User error;
    #EndRawTable

    #Id;#Action;$Expected;$Actual;$ExcludeColumns
    TBLCMP1;TableCompareTwo;expectedTable;RESTBL5.Out;'Time'

    // =====================================================================
    // Negative tests
    #Id;#Action;#Assert;$Decoraded
    RESTBL6;ResultTable;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

    // 
    #Id;#Action;#Assert;$Decoraded;$Matrix
    RESTBL7;ResultTable;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;true;100


#Id;#TestCase;#Kind;#Depends;#For
RT_USERVAL;ResultTableUserValue;Never;;
    #Action;UserValue
    ResultTableUserValue;'value'

    #Step;#Kind;#For;#Depends
    ;;;
    #EndStep

    #Id;#Action;$Decoraded
    RESTBL1;ResultTable;false

    #Assert;#Message
    RESTBL1.Out[RESTBL1.Out.size - 1].Result == Result.Passed;'The last result should be passed'

    #Id;#Let
    firstTableSize;RESTBL1.Out.size

    #Assert;#Message
    RESTBL1.Out[RESTBL1.Out.size - 2].UserValue == 'value';'Wrong value'

    #Assert;#Message
    RESTBL1.Out[RESTBL1.Out.size - 1].UserValue == null;'Wrong value'

    #Action;OtherValue
    ResultTableUserValue;100

    #Step;#Kind;#For;#Depends
    ;;;
        #Action;UserValue;OtherValue
        ResultTableUserValue;'value1';200

    #EndStep

    #Id;#Action;$Decoraded
    RESTBL2;ResultTable;false

    #Action;$Table;$Title
    TableReport;RESTBL2.Out;''

    #Assert;#Message
    RESTBL2.Out.size > firstTableSize;'Non-constant table'

    #Assert;#Message
    RESTBL2.Out[RESTBL2.Out.size - 2].OtherValue == 100;'Wrong value'

    #Assert;#Message
    RESTBL2.Out[RESTBL2.Out.size - 1].UserValue == 'value1';'Wrong value'

    #Assert;#Message
    RESTBL2.Out[RESTBL2.Out.size - 1].OtherValue == 200;'Wrong value'

    #Id;#RawText;#Kind
    TEXT1;Text;Matrix
    ~;"#Id;#TestCase;#Kind;#Depends;#For"
    ~;"TC1;Test case 1;Never;;"
    ~;"    #Action;UserValue1;UserValue2"
    ~;"    ResultTableUserValue;100;200"
    ~;""
    ~;""
    ~;"#Id;#TestCase;#Kind;#Depends;#For"
    ~;"TC2;Test case 2;;;"
    ~;"    #Action;UserValue2;UserValue3"
    ~;"    ResultTableUserValue;101;201"
    ~;""
    ~;""
    #EndRawText

    #Id;#Action;$Text
    MXRN1;MatrixRunFromText;TEXT1

    #Id;#Action;$Matrix
    MXWT1;MatrixWait;MXRN1.Out

    #Id;#Action;$Decoraded;$Matrix
    RESTBL3;ResultTable;false;MXRN1.Out

    #Action;$Table;$Title
    TableReport;RESTBL3.Out;''

    #Id;#RawTable
    DATA1;Table
    @;UserValue1;UserValue2;UserValue3
    0;100;200;
    1;null;101;201
    #EndRawTable

    #Action;$Table;$Expression
    TableConsiderColumnsAs;DATA1;{ 'UserValue1', 'UserValue2', 'UserValue3'}

    #Id;#Action;$Expected;$Actual;$ExcludeColumns
    TBLCMP1;TableCompareTwo;DATA1;RESTBL3.Out;{'Matrix', 'TestCaseId', 'TestCase', 'StepIdentity', 'Step', 'Time', 'Result', 'Error', 'Screenshot'}

    // =====================================================================
    // Negative tests
    #Action;#Assert;$Matrix
    ResultTableUserValue;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;1000

    #Action;#Assert;Time
    ResultTableUserValue;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;DateTime.current()


#Id;#TestCase;#Kind;#Depends;#For
SHOW;Show;Never;;
    #Action;$Text;$Notifier
    Show;'error';Notifier.Error

    #Action;$Text;$Notifier
    Show;'info';Notifier.Info

    #Action;$Text;$Notifier
    Show;'success';Notifier.Success

    // =====================================================================
    // Negative tests
    #Action;#Assert;$Text;$Notifier
    Show;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;

    #Action;#Assert;$Text;$Notifier
    Show;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;'text';100


#Id;#TestCase;#Kind;#Depends;#For
STORE;Store;Never;;
    #Action;$Value;$Name
    Store;100;100

    #Id;#Action;$Name
    RST1;Restore;100

    #Assert;#Message
    RST1.Out == 100;

    #Id;#Action;$Name
    RST2;Restore;'100'

    #Assert;#Message
    RST2.Out == 100;

    #Id;#RawText;#Kind
    TEXT1;Text;Matrix
    ~;"#TestCase;#Kind;#Depends;#For"
    ~;"Test case;Never;;"
    ~;"    #Action;$Value;$Name"
    ~;"    Store;300;'300'"
    ~;""
    ~;""
    #EndRawText

    #Id;#Action;$Text
    MXRN1;MatrixRunFromText;TEXT1

    #Id;#Action;$Matrix
    MXWT1;MatrixWait;MXRN1.Out

    #Id;#Action;$Name
    RST3;Restore;300

    #Assert;#Message
    RST3.Out == 300;'Should be 200'

    // =====================================================================
    // Negative tests
    #Action;#Assert;$Value;$Name
    Store;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;

    #Action;#Assert;$Value;$Name
    Store;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;1000;


#Id;#TestCase;#Kind;#Depends;#For
WAIT;Wait;Never;;
    #Id;#Let
    start;System.currentTimeMillis()

    #Action;$Time
    Wait;100

    #Id;#Let
    finish;System.currentTimeMillis()

    #Id;#Let
    delay;finish - start

    #Assert;#Message
    delay >= 100 && delay < 110;'Proper delay'

    #Id;#Let
    start;System.currentTimeMillis()

    #Action;$ByTime
    Wait;DateTime.addTime(0, 0, 1)

    #Id;#Let
    finish;System.currentTimeMillis()

    #Id;#Let
    delay;finish - start

    #Assert;#Message
    delay >= 1000 && delay < 1100;'Proper delay'

    #Id;#Let
    start;System.currentTimeMillis()

    #Action;$ByTime
    Wait;DateTime.addTime(0, 0, -1)

    #Id;#Let
    finish;System.currentTimeMillis()

    #Id;#Let
    delay;finish - start

    #Assert;#Message
    delay < 10;'Proper delay'

    #Id;#Let
    start;System.currentTimeMillis()

    #Action;$Time
    Wait;-10

    #Id;#Let
    finish;System.currentTimeMillis()

    #Id;#Let
    delay;finish - start

    #Assert;#Message
    delay < 10;'Proper delay'

    // =====================================================================
    // Negative tests
    #Action;#Assert
    Wait;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS


