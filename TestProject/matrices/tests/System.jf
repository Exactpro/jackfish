#Id;#TestCase;#Kind;#Depends;#For
CHECK;Check;Never;;
    #Id;#Let
    actual;{'one' : 'oneValue', 'two' : 100 }

    #Action;#Actual;#one
    Check;actual;'oneValue'

    #Action;#Actual;#one;#two
    Check;actual;'oneValue';100

    #Action;#Actual;#DoNotFail;#one;#two
    Check;actual;true;'oneValue';100

    #Action;#Actual;#DoNotFail;#one;#two
    Check;actual;false;'oneValue';100

    #Action;#Actual;#DoNotFail;#one;#two;#tree
    Check;actual;true;'oneValue';100;'anyValue'

    // Negative testing
    #Action;#Assert;#Actual
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

    #Action;#Assert;#Actual
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;111

    #Action;#Assert;#Actual;#one;#two
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;'oneValue';200

    #Action;#Assert;#Actual;#one;#two;#tree
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;'oneValue';100;'anyValue'

    #Action;#Assert;#Actual;#DoNotFail;#one;#two;#tree
    Check;This.Result == Result.Failed && This.Kind == ErrorKind.NOT_EQUAL;actual;false;'oneValue';100;'anyValue'


#Id;#TestCase;#Kind;#Depends;#For
COMPARE;Compare;Never;;
    #Id;#Let
    expected;{'one' : 'oneValue', 'two' : 100 }

    #Id;#Let
    actual1;{'one' : 'oneValue', 'two' : 100 }

    #Id;#Let
    actual2;{'one' : 'oneValue', 'two' : 200 }

    #Id;#Let
    actual3;{'one' : 'oneValue', 'two' : 100, 'tree' : 'anyValue' }

    #Id;#Off;#Action;#Expected;#Actual
    CMP1;1;Compare;;

    // Negative testing
    #Id;#Action;#Assert;#Expected;#Actual
    CMP1;Compare;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;

    // Negative testing
    #Id;#Action;#Assert;#Expected;#Actual
    CMP2;Compare;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;expected;

    // Negative testing
    #Id;#Action;#Assert;#Expected;#Actual
    CMP3;Compare;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;;actual1


#Id;#Off;#TestCase;#Kind;#Depends;#For
EXEC;1;Execute;Never;;

#Id;#Off;#TestCase;#Kind;#Depends;#For
INPUT;1;Input;Never;;

#Id;#Off;#TestCase;#Kind;#Depends;#For
PRINT;1;Print;Never;;

#Id;#Off;#TestCase;#Kind;#Depends;#For
RESTORE;1;Restore;Never;;

#Id;#TestCase;#Kind;#Depends;#For
RESULT;ResultTable;Never;;
    #Id;#Let
    expectedColumns;[ 'Matrix', 'TestCaseId', 'TestCase', 'StepIdentity', 'Step', 'Time', 'Result', 'Error', 'Screenshot' ]

    #Id;#Action;#Decoraded
    RESTBL1;ResultTable;true

    #Assert;#Message
    RESTBL1.Out.getClass() == Table;'Type is not Table'

    #Assert;#Message
    RESTBL1.Out.size() > 0;'Table is empty'

    #Assert;#Message
    RESTBL1.Out[0].keySet().containsAll(expectedColumns);'Wrong column set'

    #Id;#Action;#Decoraded
    RESTBL2;ResultTable;false

    #Assert;#Message
    RESTBL2.Out.getClass() == Table;'Type is not Table'

    #Assert;#Message
    RESTBL2.Out[0].keySet().containsAll(expectedColumns);'Wrong column set'

    #Id;#Action;#Decoraded
    RESTBL3;ResultTable;true

    #Step;#Kind;#For
    ;;
    #EndStep

    #Id;#Action;#Decoraded
    RESTBL4;ResultTable;true

    #Assert;#Message
    RESTBL4.Out.size() == RESTBL3.Out.size() + 1;

    #Id;#RawText
    TEXT1;Text
    ~;"#Id;#TestCase;#Kind;#Depends;#For"
    ~;"TC1;Testcase1;;;"
    ~;"    #Step;#Kind;#For"
    ~;"    'ST1';;"
    ~;"    #EndStep"
    ~;""
    ~;"    #Step;#Kind;#For"
    ~;"    'ST2';;"
    ~;"        #Fail"
    ~;"        'User error'"
    ~;""
    ~;"    #EndStep"
    #EndRawText

    #Id;#Action;#Text
    MXRN1;MatrixRunFromText;TEXT1

    #Id;#Action;#Matrix
    MXWT1;MatrixWait;MXRN1.Out

    #Id;#Action;#Decoraded;#Matrix
    RESTBL5;ResultTable;true;MXRN1.Out

    #Id;#RawTable
    expectedTable;Table
    @;Matrix;TestCaseId;TestCase;StepIdentity;Step;Time;Result;Error;Screenshot
    0;new;TC1;TestCase Testcase1;;;9;Failed;User error;
    1;new;TC1;TestCase Testcase1;ST1;Step 'ST1';3;Passed;;
    2;new;TC1;TestCase Testcase1;ST2;Step 'ST2';1;Failed;User error;
    #EndRawTable

    #Id;#Action;#Expected;#Actual;#ExcludeColumns
    TBLCMP1;TableCompareTwo;expectedTable;RESTBL5.Out;'Time'

    // =====================================================================
    // Negative tests
    #Id;#Action;#Assert;#Decoraded
    RESTBL6;ResultTable;This.Result == Result.Failed && This.Kind == ErrorKind.EMPTY_PARAMETER;

    // 
    #Id;#Action;#Assert;#Decoraded;#Matrix
    RESTBL7;ResultTable;This.Result == Result.Failed && This.Kind == ErrorKind.WRONG_PARAMETERS;true;100


#Id;#Off;#TestCase;#Kind;#Depends;#For
RT_USERVAL;1;ResultTableUserValue;Never;;

#Id;#Off;#TestCase;#Kind;#Depends;#For
SHOW;1;Show;Never;;

#Id;#Off;#TestCase;#Kind;#Depends;#For
STORE;1;Store;Never;;

#Id;#Off;#TestCase;#Kind;#Depends;#For
WAIT;1;Wait;Never;;

