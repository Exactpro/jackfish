//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.TableData
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class TableData { }
#else

    public class TableData : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public TableData()
        {
            try
            {
                Uri resourceUri = new Uri("/SilverLightMock;component/SampleData/TableData/TableData.xaml", UriKind.RelativeOrAbsolute);
                System.Windows.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private ItemCollection _Collection = new ItemCollection();

        public ItemCollection Collection
        {
            get
            {
                return this._Collection;
            }
        }
    }

    public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
    { 
    }

    public class Item : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _String = string.Empty;

        public string String
        {
            get
            {
                return this._String;
            }

            set
            {
                if (this._String != value)
                {
                    this._String = value;
                    this.OnPropertyChanged("String");
                }
            }
        }

        private bool _Boolean = false;

        public bool Boolean
        {
            get
            {
                return this._Boolean;
            }

            set
            {
                if (this._Boolean != value)
                {
                    this._Boolean = value;
                    this.OnPropertyChanged("Boolean");
                }
            }
        }

        private double _Number = 0;

        public double Number
        {
            get
            {
                return this._Number;
            }

            set
            {
                if (this._Number != value)
                {
                    this._Number = value;
                    this.OnPropertyChanged("Number");
                }
            }
        }

        private double _Image = 0;

        public double Image
        {
            get
            {
                return this._Image;
            }

            set
            {
                if (this._Image != value)
                {
                    this._Image = value;
                    this.OnPropertyChanged("Image");
                }
            }
        }

        private string _EMPTY_HEADER = string.Empty;

        public string EMPTY_HEADER
        {
            get
            {
                return this._EMPTY_HEADER;
            }

            set
            {
                if (this._EMPTY_HEADER != value)
                {
                    this._EMPTY_HEADER = value;
                    this.OnPropertyChanged("EMPTY_HEADER");
                }
            }
        }
    }
#endif
}
