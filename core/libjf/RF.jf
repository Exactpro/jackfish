// //==============================================
// //  Copyright (c) 2009-2015, Exactpro Systems, LLC
// //  Quality Assurance & Related Development for Innovative Trading Systems.
// //  All rights reserved.
// //  This is unpublished, licensed software, confidential and proprietary
// //  information which is the property of Exactpro Systems, LLC or its licensors.
// //==============================================
// // Regression Framework v 1.0
// //==============================================
#Id;#NameSpace
RF;RegressionFramework
    // //==============================================
    // // Runs all matrixes which names are enumerated in the column  Name
    // // of the table and puts results into database
    // //==============================================
    #Id;#SubCase;#table
    RunAll;Run all matrixes from table;
        #Assert;#Message
        table != null && table instanceof Table;'The parameter table should be Table'

        #Assert;#Message
        table.columnIsPresent('Off');'Table shoud contain the column Off'

        #Assert;#Message
        table.columnIsPresent('Scenario');'Table shoud contain the column Scenario'

        #Assert;#Message
        table.columnIsPresent('TestSet');'Table shoud contain the column TestSet'

        #Assert;#Message
        table.columnIsPresent('Start');'Table shoud contain the column Start'

        #Assert;#Message
        table.columnIsPresent('Finish');'Table shoud contain the column Finish'

        #Assert;#Message
        table.columnIsPresent('Performer');'Table shoud contain the column Performer'

        #Assert;#Message
        table.columnIsPresent('Priority');'Table shoud contain the column Priority'

        #Id;#Call
        SQL;Connect

        #Id;#Let
        curD;DateTime.current()

        #Id;#Let
        needD;DateTime.date(curD.years(),curD.months(),curD.days(),curD.hours(),curD.minutes(),curD.seconds())

        #Id;#Action;#Connection;#Query;#CreateTime;#ToolVersion;#AppVersion
        selectRunId;SQLinsert;SQL;'INSERT INTO runs (create_time, duration, tool_version, app_version) VALUES (?, -1, ?, ?)\u003b';needD;VersionInfo.getVersion();config_version

        #Id;#Let
        runId;selectRunId.Out[0]

        #Id;#Let
        totalCount;0

        #Id;#Let
        successCount;0

        #Id;#Let
        failedCount;0

        #Id;#Let
        begin;System.currentTimeMillis()

        #Id;#Action;#Decoraded
        standartResult;ResultTable;false

        // // Main loop
        #ForEach;#In
        row;table
            #If
            !Str.IsNullOrEmpty(row.Off)
                #Continue

            #EndIf

            #Id;#Let
            start;Str.IsNullOrEmpty(row.Start) ? 0 : Integer.parseInt(row.Start)

            #Id;#Let
            finish;Str.IsNullOrEmpty(row.Finish) ? 0 : Integer.parseInt(row.Finish)

            #For;#From;#To;#Step
            counter;start;finish;1
                #Id;#Let
                manual;!(new File(row.Scenario + '.jf').exists())

                #Id;#Let
                scenario;new File(row.Scenario).getName()

                #Id;#Let
                scenarioName;row.containsKey('Name') && !Str.IsNullOrEmpty(row.Name) ? row.Name : scenario

                #Id;#Action;#Connection;#Query;#RunId;#Scenario;#Counter;#Performer;#Priority;#Manual;#StartTime;#Host;#User;#TestSet
                selectScenarioId;SQLinsert;SQL;'INSERT INTO scenarios (run_id, scenario, counter, performer, priority, manual, start_time, host, username, test_set) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';runId;scenarioName;counter;row.Performer;row.Priority;manual ? 1 : 0;DateTime.current();Sys.hostName();Sys.userName();row.TestSet

                #Id;#Let
                scenarioId;selectScenarioId.Out[0]

                #If
                !manual
                    #Id;#Let
                    totalCount;totalCount + 1

                    #Action;#Str
                    Print;'Starting: ' + scenarioName

                    #Id;#Action;#Matrix;#Parameter
                    MXRN;MatrixRun;row.Scenario + '.jf';counter

                    #Action;#Matrix
                    MatrixWait;MXRN.Out

                    #Action;#Connection;#Query;#Passed;#Failed;#Report;#ScenarioId
                    SQLexecute;SQL;'UPDATE scenarios SET passed = ?, failed = ?, report = ?, done = 1 WHERE id = ?';MXRN.Out.passed();MXRN.Out.failed();MXRN.Out.reportAsBlob();scenarioId

                    #Id;#Action;#Decoraded;#Matrix
                    resultTab;ResultTable;false;MXRN.Out

                    #Action;#Passed;#Failed
                    Print;MXRN.Out.passed();MXRN.Out.failed()

                    #Id;#Let
                    successCount;successCount + (MXRN.Out.failed() == 0 ? 1 : 0)

                    #Id;#Let
                    failedCount;failedCount + (MXRN.Out.failed() > 0 ? 1 : 0)

                    #ForEach;#In
                    details;resultTab.Out
                        #Switch
                        _rf_dialect
                            #Case
                            'MYSQL'
                                #Id;#Action;#Connection;#Query;#ScenarioId;#Testcase;#Stepp;#Time;#Result;#Error;#Screenshot
                                selectDetails;SQLinsert;SQL;'INSERT INTO details (scenario_id, testcase, step, time, result, error, screenshot) VALUES (?, ?, ?, ?, ?, ?, ?)';scenarioId;'' + details.TestCase;'' + details.Step;details.Time;'' + details.Result;'' + details.Error;Converter.storableToBlob(details.Screenshot)


                            #Case
                            'MSSQL'
                                #Id;#Action;#Connection;#Query;#ScenarioId;#Testcase;#Stepp;#Time;#Result;#Error;#Screenshot
                                selectDetails;SQLinsert;SQL;'INSERT INTO details (scenario_id, testcase, step, time, result, error, screenshot) VALUES (?, ?, ?, ?, ?, ?, CONVERT(VARBINARY(MAX),?))';scenarioId;'' + details.TestCase;'' + details.Step;details.Time;'' + details.Result;'' + details.Error;Converter.storableToBlob(details.Screenshot)


                            #Default
                                #Fail
                                'Unknown SQL dialect: ' + _rf_dialect


                        #EndSwitch

                        #For;#From;#To;#Step
                        i;standartResult.Out.getHeaderSize();resultTab.Out.getHeaderSize() - 1;1
                            #Id;#RawText
                            TEXT6;Text
                            "INSERT INTO user_details (details_id, name, value) VALUES (?, ?, ?);"
                            #EndRawText

                            #Action;#Connection;#Query;#detailsId;#name;#value
                            SQLinsert;SQL;TEXT6.toString();selectDetails.Out[0];resultTab.Out.getHeader(i);details[resultTab.Out.getHeader(i)]

                        #EndFor

                    #EndForEach

                    #If
                    (MXRN.Out.failed() > 0) && (isdef _rf_default_handler) && (!(Str.IsNullOrEmpty(_rf_default_handler)))
                        #Id;#Action;#Matrix;#Parameter
                        ERRMX;MatrixRun;_rf_default_handler;scenario

                        #Id;#Action;#Matrix
                        MXWT1;MatrixWait;ERRMX.Out

                    #EndIf

                #EndIf

            #EndFor

            #OnError
                #Action;#Error
                Print;error


        #EndForEach

        #Action;#Total matrixes;#Passed
        Print;totalCount;successCount

        #Action;#Connection;#Query;#Duration;#RunId
        SQLexecute;SQL;'UPDATE runs SET duration = ? WHERE id = ?';(int)(System.currentTimeMillis() - begin);runId

        #Action;#Connection
        SQLdisconnect;SQL

        #Assert;#Message
        failedCount == 0;'Regression failed'

    #EndSubCase

    // //==============================================
    // // Shows the overall report
    // //==============================================
    #Id;#SubCase;#date
    repOverall;Overall progress;
        #Id;#Call
        SQL;RF.Connect

        #Id;#Call;#sql;#date
        runId;runIdFromDate;SQL;date

        #Id;#Let
        title;'Overall' + (date == null ? '' : (' on ' +DateTime.strDate(date)))

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#RawText
                TEXT4;Text
                "SELECT  "
                "	sp.count AS `Passed`, "
                "	sf.count AS `Failed`"
                "FROM (SELECT COUNT(id) AS count FROM scenarios WHERE failed = 0 AND run_id = ? ) AS sp "
                "LEFT JOIN (SELECT COUNT(id) AS count FROM scenarios WHERE failed <> 0 AND run_id = ? ) AS sf ON true "
                #EndRawText


            #Case
            'MSSQL'
                #Id;#RawText
                TEXT4;Text
                "SELECT  "
                "	sp.count AS ""Passed"", "
                "	sf.count AS ""Failed"""
                "FROM (SELECT COUNT(id) AS count FROM scenarios WHERE failed = 0 AND run_id = ? ) AS sp "
                "LEFT JOIN (SELECT COUNT(id) AS count FROM scenarios WHERE failed <> 0 AND run_id = ? ) AS sf ON 1=1"
                #EndRawText


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #Id;#Action;#Connection;#Query;#runId;#runId
        select;SQLselect;SQL;TEXT4.toString();runId.id;runId.id

        #Id;#Action;#ReportName;#Version
        REP1;ReportStart;title;'JF: ' + runId.tool_version + '  APP: ' + runId.app_version

        #Action;#Type;#Table;#ToReport;#Title;#Colors
        ChartReport;ChartKind.Pie;select.Out;REP1.Out;'{{4 ' + title + ' 4}}';{ 'Passed' : Color.GREEN, 'Failed' : Color.RED }

        #Action;#Table;#Title;#Numbers;#ToReport
        TableReport;select.Out;'Table';false;REP1.Out

        #Action;#Report;#Passed;#Failed
        ReportFinish;REP1.Out;(int)select.Out[0].Passed;(int)select.Out[0].Failed

        #Action;#Report
        ReportShow;REP1.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Shows the summary report
    // //==============================================
    #Id;#SubCase;#date
    repSummary;Summary report;
        #Id;#Call
        SQL;RF.Connect

        #Id;#Let
        title;'Consolidated Umbrella Report' + (date == null ? '' : (' on ' +DateTime.strDate(date)))

        #Id;#Call;#sql;#date
        runId;runIdFromDate;SQL;date

        #Id;#Call;#sql;#date
        times;timesFromDate;SQL;date

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#RawText
                TEXT2;Text
                "SELECT "
                "  r.tool_version,"
                "  r.app_version,"
                "  s.scenario, "
                "  s.manual, "
                "  DATE(s.start_time) AS date, "
                "  TIME(s.start_time) AS time, "
                "  IF(s.failed = 0, ""Passed"", ""Failed"") AS result, "
                "  s.performer AS performer, "
                "  s.test_set AS testSet, "
                "  s.host AS host, "
                "  s.username AS username,"
                "  s.report AS report"
                "FROM scenarios AS s "
                "LEFT JOIN runs AS r ON r.id = ?"
                "WHERE s.test_set <> '' AND s.manual = 0 AND s.run_id = ?"
                #EndRawText


            #Case
            'MSSQL'
                #Id;#RawText
                TEXT2;Text
                "SELECT "
                "  r.tool_version,"
                "  r.app_version,"
                "  s.scenario, "
                "  s.manual, "
                "  CONVERT(DATE, s.start_time) AS date,"
                "  CONVERT(TIME, s.start_time) AS time, "
                "  case s.failed when 0 then 'Passed' else 'Failed' end as result,"
                "  s.performer AS performer, "
                "  s.test_set AS testSet, "
                "  s.host AS host, "
                "  s.username AS username,"
                "  s.report AS report"
                "FROM scenarios AS s "
                "LEFT JOIN runs AS r ON r.id = ?"
                "WHERE s.test_set <> '' AND s.manual = 0 AND s.run_id = ?"
                #EndRawText


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #Id;#Action;#Connection;#Query;#runId;#runId
        select;SQLselect;SQL;TEXT2.toString();runId.id;runId.id

        #Id;#Let
        table;select.Out

        #Id;#Action;#Table;#result
        passed;TableSelect;table;'Passed'

        #Id;#Action;#Table;#result
        failed;TableSelect;table;'Failed'

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Passed\">Passed</div>';table;{ 'result' };'Passed';true

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Failed\">Failed</div>';table;{ 'result' };'Failed';true

        #Id;#Action;#ReportName;#Version
        REP1;ReportStart;title;'JF: ' + runId.tool_version + '  APP: ' + runId.app_version

        #Action;#Table;#Title;#ToReport;#Numbers;#testSet;#scenario;#result;#date;#time;#username;#host;#report
        TableReport;table;'{{4' + title + '4}}';REP1.Out;false;'Test set';'Matrix Name';'Execution Status';'Execution Date';'Execution Time';'Exectuted By';'Execution Machine';'Report link'

        #Action;#Passed;#Failed;#Report;#StartTime;#FinishTime
        ReportFinish;passed.Out.size();failed.Out.size();REP1.Out;times.startTime;times.finishTime

        #Action;#Report
        ReportShow;REP1.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Export the last regression set to csv file for import into QC
    // //==============================================
    #Id;#SubCase;#date;#pathToSave
    repCsvExport;Export to CSV file;;
        #Id;#Call
        SQL;Connect

        #Id;#Call;#sql;#date
        runId;runIdFromDate;SQL;date

        #Id;#RawText
        testSetText;Text
        "SELECT "
        "  s.test_set "
        "FROM scenarios AS s "
        "WHERE s.test_set <> '' AND s.manual = 0 AND s.run_id = ?"
        "GROUP BY s.test_set; "
        #EndRawText

        #Id;#Action;#Query;#Connection;#runId
        testSetQuery;SQLselect;testSetText.toString();SQL;runId.id

        #ForEach;#In
        testSet;testSetQuery.Out
            #Id;#Let
            countSteps;0

            #Id;#Action;#Test Name;#Execution Status;#Execution Date;#Execution Time;#Executed By;#Execution Machine
            createTable;TableCreate;;;;;;

            #Id;#Let
            resultTable;createTable.Out

            #Switch
            _rf_dialect
                #Case
                'MYSQL'
                    #Id;#RawText
                    TEXT5;Text
                    "SELECT "
                    "  s.id, s.scenario, "
                    "  IF(s.failed > 0, ""Failed"", ""Passed"") AS status, "
                    "  s.host, "
                    "  s.username, "
                    "  DATE(s.start_time) AS date, "
                    "  TIME(s.start_time) AS time "
                    "FROM scenarios AS s"
                    "WHERE s.manual = 0 AND s.run_id = ? AND s.test_set = ? ; "
                    #EndRawText


                #Case
                'MSSQL'
                    #Id;#RawText
                    TEXT5;Text
                    "SELECT "
                    "  s.id, s.scenario, "
                    "  CASE WHEN s.failed <> 0 THEN  0 ELSE 1 END AS status, "
                    "  s.host, "
                    "  s.username, "
                    "  CONVERT(DATE, s.start_time) AS date, "
                    "  CONVERT(TIME, s.start_time) AS time "
                    "FROM scenarios AS s"
                    "WHERE s.manual = 0 AND s.run_id = ? AND s.test_set = ? ; "
                    #EndRawText


                #Default
                    #Fail
                    'Unknown SQL dialect: ' + _rf_dialect


            #EndSwitch

            #Id;#Action;#Connection;#Query;#runId;#testSet
            query;SQLselect;SQL;TEXT5.toString();runId.id;testSet.test_set

            #Id;#Let
            scenarios;query.Out

            #For;#From;#To;#Step
            rowScenarios;0;(int)scenarios.size - 1;1
                #Id;#RawText
                selectFromTableText;Text
                "SELECT d.scenario_id, d.error  FROM details AS d "
                "WHERE scenario_id = ? "
                "AND "
                "	(NOT EXISTS (SELECT 1 FROM details WHERE scenario_id = ? AND step <> 'null') OR step <> 'null')"
                "  ;"
                #EndRawText

                #Id;#Action;#Connection;#Query;#scenario_id;#scenario_id
                selectFromTable;SQLselect;SQL;selectFromTableText.toString();scenarios[rowScenarios].id;scenarios[rowScenarios].id

                #Id;#Let
                selectSteps;selectFromTable.Out

                #Action;#Table;#Test Name;#Execution Status;#Execution Date;#Execution Time;#Executed By;#Execution Machine
                TableAddValue;resultTable;scenarios[rowScenarios].scenario;scenarios[rowScenarios].status;scenarios[rowScenarios].date;scenarios[rowScenarios].time;scenarios[rowScenarios].username;scenarios[rowScenarios].host

                #For;#From;#To;#Step
                rowSteps;0;(int)selectSteps.size - 1;1
                    #If
                    rowSteps >= countSteps
                        #Id;#Let
                        countSteps;countSteps + 1

                        #Action;#Table;#Columns
                        TableAddColumns;resultTable;'Step' + countSteps

                    #EndIf

                    #Id;#Let
                    step;'Step' + (rowSteps + 1)

                    #If
                    selectSteps[rowSteps].error.equals('null')
                        #Id;#Let
                        stepResult;''

                    #Else
                        #Id;#Let
                        stepResult;selectSteps[rowSteps].error


                    #EndIf

                    #Let
                    resultTable[rowScenarios].put(step, stepResult)

                #EndFor

            #EndFor

            #Id;#Let
            stepHeaders;new ArrayList()

            #For;#From;#To;#Step
            i;1;countSteps;1
                #Let
                stepHeaders.add('Step' + i)

            #EndFor

            #Action;#Replace;#Table;#Search;#Columns
            TableReplace;'';resultTable;null;stepHeaders.toArray()

            #Action;#Replace;#Table;#Columns;#MatchCell;#Search
            TableReplace;'Failed';resultTable;{'Execution Status'};true;0

            #Action;#Replace;#Table;#Columns;#MatchCell;#Search
            TableReplace;'Passed';resultTable;{'Execution Status'};true;1

            #Id;#Let
            fileName;testSet.test_set + DateTime.strDate(runId.create_time, '_yyyyMMdd_HHmmss') + '.csv'

            #Action;#Table;#File;#Delimiter
            TableSaveToFile;resultTable;pathToSave + '/' +fileName;','

        #EndForEach

    #EndSubCase

    // //==============================================
    // // Collects  all details of all scenarios of last regression in readable form
    // //==============================================
    #Id;#SubCase;#date
    repLastAllDetails;Shows a report of last details;
        #Id;#Call
        SQL;Connect

        #Id;#Call;#sql;#date
        runId;runIdFromDate;SQL;date

        #Id;#Let
        title;'Details' + (date == null ? '' : (' on ' +DateTime.strDate(date)))

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#RawText
                TEXT1;Text
                "SELECT "
                "  s.scenario, "
                "  DATE(s.start_time) AS date, "
                "  TIME(s.start_time) AS time, "
                "  s.performer, "
                "  s.host, "
                "  s.username, "
                "  d.testcase, "
                "  d.step, "
                "  d.time, "
                "  d.result, "
                "  d.error, "
                "  d.screenshot "
                "FROM scenarios AS s "
                "LEFT JOIN details AS d ON d.scenario_id = s.id "
                "WHERE s.manual = 0 AND s.run_id = ?"
                #EndRawText


            #Case
            'MSSQL'
                #Id;#RawText
                TEXT1;Text
                "SELECT "
                "  s.scenario, "
                "  CONVERT(date,s.start_time) AS date, "
                "  CONVERT(time, s.start_time) AS time, "
                "  s.performer, "
                "  s.host, "
                "  s.username, "
                "  d.testcase, "
                "  d.step, "
                "  d.time, "
                "  d.result, "
                "  d.error, "
                "  d.screenshot "
                "FROM scenarios AS s "
                "LEFT JOIN details AS d ON d.scenario_id = s.id "
                "WHERE s.manual = 0 AND s.run_id = ?"
                #EndRawText


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #Id;#Action;#Connection;#Query;#runId
        select;SQLselect;SQL;TEXT1.toString();runId.id

        #Id;#Let
        table;select.Out

        #Id;#Action;#Table;#result
        passed;TableSelect;table;'Passed'

        #Id;#Action;#Table;#result
        failed;TableSelect;table;'Failed'

        #Action;#Table;#Columns;#MatchCell;#Search;#Replace
        TableReplace;table;{ 'step', 'error' };true;'null';''

        #Action;#Table;#Columns;#MatchCell;#Search;#Replace
        TableReplace;table;{ 'screenshot'};true;null;''

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Passed\">Passed</div>';table;{ 'result' };'Passed';true

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Failed\">Failed</div>';table;{ 'result' };'Failed';true

        #Id;#Action;#ReportName;#Version
        report;ReportStart;title;'JF: ' + runId.tool_version + '  APP: ' + runId.app_version

        #Action;#Table;#Title;#ToReport;#Numbers;#scenario;#testcase;#result;#error;#screenshot
        TableReport;table;'{{4' + title + '4}}';report.Out;false;'Matrix';'Step Name';'Status';'Result';'Screenshots'

        #Action;#Report;#Passed;#Failed
        ReportFinish;report.Out;passed.Out.size();failed.Out.size()

        #Action;#Report
        ReportShow;report.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Collects history of all runs and evaluate average factor of success.
    // //==============================================
    #Id;#SubCase
    repProgress;Shows progress during whole period
        #Id;#Call
        SQL;RF.Connect

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#Action;#Connection;#Query
                select;SQLselect;SQL;'SELECT DATE(r.create_time) AS `Period`, AVG(s.passed / (s.passed + s.failed)) AS `Average` FROM runs AS r LEFT JOIN scenarios AS s ON s.run_id = r.id GROUP BY r.id'


            #Case
            'MSSQL'
                #Id;#Action;#Connection;#Query
                select;SQLselect;SQL;'SELECT MAX(CONVERT(date,r.create_time)) AS "Period", AVG(s.passed / (s.passed + s.failed)) AS "Average" FROM runs AS r LEFT JOIN scenarios AS s ON s.run_id = r.id GROUP BY r.id'


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #Id;#Action;#ReportName
        REP2;ReportStart;'Progress'

        #Action;#Type;#Table;#Title;#Labels;#ToReport
        ChartReport;ChartKind.Line;select.Out;'{{4 Progress 4}}';'Period';REP2.Out

        #Action;#Report;#Passed;#Failed
        ReportFinish;REP2.Out;0;0

        #Action;#Report
        ReportShow;REP2.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Collects all run dates and returns them as a list
    // //==============================================
    #Id;#SubCase
    listOfDates;List of run dates
        #Id;#Call
        SQL;Connect

        #Id;#Action;#Connection;#Query
        query;SQLselect;SQL;'select create_time from runs'

        #Id;#Let
        reportDataList;new ArrayList()

        #ForEach;#In
        row;query.Out
            #Id;#Let
            dateTimeItem;new Date(row.create_time.getTime())

            #Let
            reportDataList.add(dateTimeItem)

        #EndForEach

        #Return
        reportDataList

    #EndSubCase

    // //==============================================
    // // For empty date returns the last runs.id, for non-empty - the last id, which
    // // create_date not less than desired
    // //==============================================
    #Id;#SubCase;#sql;#date
    runIdFromDate;Gets runs.id for desired date;;
        #Assert;#Message
        sql != null;'SQL connection is NULL'

        #If
        date == null
            #Id;#RawText
            query;Text
            "SELECT "
            "  r.tool_version,"
            "  r.app_version,"
            "  r.id,"
            "  r.create_time"
            "FROM runs AS r"
            "WHERE r.id = (SELECT MAX(id) AS id FROM runs)"
            #EndRawText

            #Id;#Action;#Connection;#Query
            select1;SQLselect;sql;query.toString()

            #Return
            select1.Out.size() > 0 ? { 'id' : select1.Out[0].id, 'tool_version' : select1.Out[0].tool_version, 'app_version' : select1.Out[0].app_version, 'create_time' : select1.Out[0].create_time }: { '' : null }

        #EndIf

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#RawText
                query;Text
                "SELECT id, tool_version, app_version, create_time  "
                "FROM runs "
                "WHERE create_time <= ? "
                "ORDER BY create_time DESC "
                "LIMIT 1 "
                #EndRawText


            #Case
            'MSSQL'
                #Id;#RawText
                query;Text
                "SELECT TOP 1 id, tool_version, app_version, create_time  "
                "FROM runs "
                "WHERE create_time <= ? "
                "ORDER BY create_time DESC  "
                #EndRawText


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #Id;#Action;#Connection;#Query;#CreateTime
        select2;SQLselect;sql;query.toString();date

        #Return
        select2.Out.size() > 0 ? { 'id' : select2.Out[0].id, 'tool_version' : select2.Out[0].tool_version, 'app_version' : select2.Out[0].app_version, 'create_time' :  select2.Out[0].create_time}: { '' : null }

    #EndSubCase

    // //==============================================
    // // For empty date returns the last runs.id, for non-empty - the last id, which
    // // create_date not less than desired
    // //==============================================
    #Id;#SubCase;#sql;#date
    timesFromDate;Gets runs.create_time & duration for desired date;;
        #Assert;#Message
        sql != null;'SQL connection is NULL'

        #If
        date == null
            #Id;#Action;#Connection;#Query
            select1;SQLselect;sql;'SELECT r.create_time, r.duration FROM runs AS r WHERE r.id = (SELECT MAX(id) AS id FROM runs)'

            #Return
            select1.Out.size() > 0 ? { 'startTime' : select1.Out[0].create_time, 'finishTime' :  DateTime.add(select1.Out[0].create_time, 0, 0, select1.Out[0].duration /1000)}  : {}

        #EndIf

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#RawText
                query;Text
                "SELECT r.create_time, r.duration "
                "FROM runs AS r "
                "WHERE r.id = (SELECT id  "
                "FROM runs "
                "WHERE create_time <= ?  "
                "ORDER BY create_time DESC "
                "LIMIT 1 )"
                #EndRawText


            #Case
            'MSSQL'
                #Id;#RawText
                query;Text
                "SELECT r.create_time, r.duration "
                "FROM runs AS r "
                "WHERE r.id = (SELECT TOP 1 id "
                "FROM runs "
                "WHERE create_time <= ?  "
                "ORDER BY create_time DESC)"
                #EndRawText


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #Id;#Action;#Connection;#Query;#CreateTime
        select2;SQLselect;sql;query.toString();date

        #Return
        select2.Out.size() > 0 ? { 'startTime' : select2.Out[0].create_time, 'finishTime' :  DateTime.add(select2.Out[0].create_time, 0, 0, select2.Out[0].duration /1000)}  : {}

    #EndSubCase

    // //==============================================
    // // Esteblishes connection to SQL server using variable set that is set
    // // by RF.SetVar
    // // This subcase checks that all needed tables exist. If not it creates them.
    // //==============================================
    #Id;#SubCase
    Connect;Connect to SQL
        #Assert;#Message
        isdef _rf_dialect && _rf_dialect != null;'The variable _rf_dialect is null or undefinded'

        #Assert;#Message
        isdef _rf_type && _rf_type != null;'The variable _rf_ype is null or undefinded'

        #Assert;#Message
        isdef _rf_host && _rf_host != null;'The variable _rf_host is null or undefinded'

        #Assert;#Message
        isdef _rf_base && _rf_base != null;'The variable _rf_base is null or undefinded'

        #Assert;#Message
        isdef _rf_user && _rf_user != null;'The variable _rf_user is null or undefinded'

        #Assert;#Message
        isdef _rf_password && _rf_password != null;'The variable _rf_password is null or undefinded'

        #Id;#Action;#User;#Server;#Base;#Sql;#Password
        SQLCNT;SQLconnect;_rf_user;_rf_host;_rf_base;_rf_type;_rf_password

        #Id;#Let
        tablesAreNotExists;true

        #Switch
        _rf_dialect
            #Case
            'MYSQL'
                #Id;#Action;#Query;#Connection
                chck1;SQLselect;'check table runs fast';SQLCNT.Out

                #Id;#Action;#Query;#Connection
                chck2;SQLselect;'check table scenarios fast';SQLCNT.Out

                #Id;#Action;#Query;#Connection
                chck3;SQLselect;'check table details fast';SQLCNT.Out

                #Id;#Action;#Query;#Connection
                chck4;SQLselect;'check table user_details fast';SQLCNT.Out

                #Id;#Let
                tablesAreNotExists;!(chck1.Out[0].Msg_text == 'OK' && chck2.Out[0].Msg_text == 'OK' && chck3.Out[0].Msg_text == 'OK' && chck4.Out[0].Msg_text == 'OK')


            #Case
            'MSSQL'
                #Id;#Action;#Query;#Connection
                chck1;SQLselect;'SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME =\'runs\' and TABLE_SCHEMA=SCHEMA_NAME()';SQLCNT.Out

                #Id;#Action;#Query;#Connection
                chck2;SQLselect;'SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME =\'scenarios\' and TABLE_SCHEMA=SCHEMA_NAME()';SQLCNT.Out

                #Id;#Action;#Query;#Connection
                chck3;SQLselect;'SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME =\'details\' and TABLE_SCHEMA=SCHEMA_NAME()';SQLCNT.Out

                #Id;#Action;#Query;#Connection
                chck4;SQLselect;'SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME =\'user_details\' and TABLE_SCHEMA=SCHEMA_NAME()';SQLCNT.Out

                #Id;#Let
                tablesAreNotExists;chck1.Out.isEmpty() || chck2.Out.isEmpty() || chck3.Out.isEmpty() || chck4.Out.isEmpty()


            #Default
                #Fail
                'Unknown SQL dialect: ' + _rf_dialect


        #EndSwitch

        #If
        tablesAreNotExists
            #Action;#Text;#Notifier
            Show;'Creating tables';Notifier.Info

            #Switch
            _rf_dialect
                #Case
                'MYSQL'
                    #Id;#RawText
                    query1;create
                    "CREATE TABLE IF NOT EXISTS `runs` ("
                    "  `id` int(11) NOT NULL AUTO_INCREMENT,"
                    "  `create_time` datetime DEFAULT NULL,"
                    "  `duration` int(11) DEFAULT NULL,"
                    "  `tool_version` VARCHAR(100) NULL,"
                    "  `app_version` VARCHAR(100) NULL,"
                    "  PRIMARY KEY (`id`)"
                    ") ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;"
                    #EndRawText

                    #Id;#RawText
                    query2;create
                    "CREATE TABLE IF NOT EXISTS `scenarios` ("
                    "  `id` int(11) NOT NULL AUTO_INCREMENT,"
                    "  `run_id` int(11) NOT NULL,"
                    "  `scenario` varchar(256) NOT NULL,"
                    "  `test_set` VARCHAR(256) NULL,"
                    "  `counter` int(3) DEFAULT NULL,"
                    "  `performer` varchar(256) DEFAULT NULL,"
                    "  `priority` int(1) DEFAULT NULL,"
                    "  `manual` int(1) DEFAULT NULL,"
                    "  `start_time` datetime DEFAULT NULL,"
                    "  `host` varchar(45) DEFAULT NULL,"
                    "  `username` varchar(45) DEFAULT NULL,"
                    "  `passed` int(11) DEFAULT '0',"
                    "  `failed` int(11) DEFAULT '0',"
                    "  `report` longblob,"
                    "  `done` int(1) DEFAULT NULL,"
                    "  `description` varchar(255) DEFAULT NULL,"
                    "  PRIMARY KEY (`id`)"
                    ") ENGINE=InnoDB AUTO_INCREMENT=278 DEFAULT CHARSET=utf8;"
                    #EndRawText

                    #Id;#RawText
                    query3;create
                    "CREATE TABLE IF NOT EXISTS `details` ("
                    "  `id` int(11) NOT NULL AUTO_INCREMENT,"
                    "  `scenario_id` int(11) NOT NULL,"
                    "  `testcase` varchar(256) DEFAULT NULL,"
                    "  `step` varchar(256) DEFAULT NULL,"
                    "  `time` int(11) DEFAULT NULL,"
                    "  `result` varchar(45) DEFAULT NULL,"
                    "  `error` varchar(256) DEFAULT NULL,"
                    "  `screenshot` longblob,"
                    "  PRIMARY KEY (`id`)"
                    ") ENGINE=InnoDB AUTO_INCREMENT=567 DEFAULT CHARSET=utf8;"
                    #EndRawText

                    #Id;#RawText
                    query4;create
                    "CREATE TABLE IF NOT EXISTS `user_details` ("
                    "  `id` int(11) NOT NULL AUTO_INCREMENT,"
                    "  `details_id` int(11) NOT NULL,"
                    "  `name` varchar(100) NOT NULL,"
                    "  `value` varchar(256) DEFAULT NULL,"
                    "  PRIMARY KEY (`id`)"
                    ") ENGINE=InnoDB DEFAULT CHARSET=utf8;"
                    #EndRawText


                #Case
                'MSSQL'
                    #Id;#RawText
                    query1;create
                    "IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_name = 'runs' and TABLE_SCHEMA=SCHEMA_NAME()) "
                    "CREATE TABLE runs "
                    "("
                    "  id int IDENTITY(1,1) PRIMARY KEY NOT NULL ,  "
                    "  create_time datetime DEFAULT NULL,  "
                    "  duration int DEFAULT NULL,"
                    "  tool_version VARCHAR(100) NULL,"
                    "  app_version VARCHAR(100) NULL"
                    ") ;"
                    #EndRawText

                    #Id;#RawText
                    query2;create
                    "IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_name = 'scenarios' and TABLE_SCHEMA=SCHEMA_NAME()) "
                    "CREATE TABLE  scenarios  "
                    "("
                    "  id int IDENTITY(1,1) PRIMARY KEY NOT NULL,"
                    "  run_id int NOT NULL,"
                    "  scenario varchar(256) NOT NULL,"
                    "  test_set varchar(256) DEFAULT NULL,"
                    "  counter int DEFAULT '0',"
                    "  performer varchar(100) DEFAULT NULL,"
                    "  priority int DEFAULT NULL,"
                    "  env varchar(100) DEFAULT NULL,"
                    "  manual int DEFAULT NULL,"
                    "  start_time datetime DEFAULT NULL,"
                    "  host varchar(45) DEFAULT NULL,"
                    "  username varchar(45) DEFAULT NULL,"
                    "  passed int DEFAULT '0',"
                    "  failed int DEFAULT '0',"
                    "  report VARBINARY(MAX),"
                    "  done int DEFAULT NULL,"
                    "  description varchar(255) DEFAULT NULL"
                    ");"
                    " "
                    #EndRawText

                    #Id;#RawText
                    query3;create
                    "IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_name = 'details' and TABLE_SCHEMA=SCHEMA_NAME()) "
                    "CREATE TABLE details "
                    "("
                    "  id int  IDENTITY(1,1) PRIMARY KEY NOT NULL,"
                    "  scenario_id int NOT NULL,"
                    "  testcase varchar(256) DEFAULT NULL,"
                    "  step varchar(256) DEFAULT NULL,"
                    "  time int DEFAULT NULL,"
                    "  result varchar(45) DEFAULT NULL,"
                    "  error varchar(256) DEFAULT NULL,"
                    "  screenshot VARBINARY(MAX)"
                    " );"
                    #EndRawText

                    #Id;#RawText
                    query4;create
                    "IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_name = 'user_details' and TABLE_SCHEMA=SCHEMA_NAME())"
                    "CREATE TABLE user_details "
                    "("
                    "  id int IDENTITY(1,1) PRIMARY KEY NOT NULL,"
                    "  details_id int NOT NULL,"
                    "  name varchar(100) NOT NULL,"
                    "  value varchar(256) DEFAULT NULL"
                    ");"
                    #EndRawText


                #Default
                    #Fail
                    'Unknown SQL dialect: ' + _rf_dialect


            #EndSwitch

            #Action;#Query;#Connection
            SQLexecute;query1.toString();SQLCNT.Out

            #Action;#Query;#Connection
            SQLexecute;query2.toString();SQLCNT.Out

            #Action;#Query;#Connection
            SQLexecute;query3.toString();SQLCNT.Out

            #Action;#Query;#Connection
            SQLexecute;query4.toString();SQLCNT.Out

        #EndIf

        #Return
        SQLCNT.Out

    #EndSubCase

#EndNameSpace

