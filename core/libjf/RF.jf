// //==============================================
// //  Copyright (c) 2009-2015, Exactpro Systems, LLC
// //  Quality Assurance & Related Development for Innovative Trading Systems.
// //  All rights reserved.
// //  This is unpublished, licensed software, confidential and proprietary
// //  information which is the property of Exactpro Systems, LLC or its licensors.
// //==============================================
// // Regression Framework v 1.0
// //==============================================
#Id;#NameSpace
RF;RegressionFramework
    // //==============================================
    // // Sets the variables that are needed for futher work with DataBase.
    // //==============================================
    #Id;#SubCase;#type;#host;#base;#user;#password;#scriptsDir
    SetVars;Set vars;;;;;;
        #Id;#Global;#Let
        sqlType;1;type

        #Id;#Global;#Let
        sqlHost;1;host

        #Id;#Global;#Let
        sqlBase;1;base

        #Id;#Global;#Let
        sqlUser;1;user

        #Id;#Global;#Let
        sqlPassword;1;password

        #Id;#Global;#Let
        scripts;1;scriptsDir

    #EndSubCase

    // //==============================================
    // // Runs all matrixes which names are enumerated in the column  Name
    // // of the table and puts results into database
    // //==============================================
    #Id;#SubCase;#table
    RunAll;Run all matrixes from table;
        #Assert;#Message
        table != null && table instanceof Table;'The parameter table should be Table'

        #Assert;#Message
        table.columnIsPresent('Off');'Table shoud contain the column Off'

        #Assert;#Message
        table.columnIsPresent('Scenario');'Table shoud contain the column Scenario'

        #Assert;#Message
        table.columnIsPresent('Performer');'Table shoud contain the column Performer'

        #Assert;#Message
        table.columnIsPresent('Env');'Table shoud contain the column Env'

        #Assert;#Message
        table.columnIsPresent('Priority');'Table shoud contain the column Priority'

        #Id;#Call
        SQL;Connect

        #Id;#Action;#Connection;#Query;#CreateTime
        selectRunId;SQLinsert;SQL;'INSERT INTO runs (create_time, duration) VALUES (?, -1)\u003b';DateTime.current()

        #Id;#Let
        runId;selectRunId.Out[0]

        #Id;#Let
        totalCount;0

        #Id;#Let
        successCount;0

        #Id;#Let
        failedCount;0

        #Id;#Let
        begin;System.currentTimeMillis()

        #Id;#Action;#Decoraded
        standartResult;ResultTable;false

        // // Main loop
        #ForEach;#In
        row;table
            #If
            !Str.IsNullOrEmpty(row.Off)
                #Continue

            #EndIf

            #Id;#Let
            manual;!(new File(scripts + row.Scenario + '.jf').exists())

            #Id;#Action;#Connection;#Query;#RunId;#Scenario;#Performer;#Priority;#Env;#Manual;#StartTime;#Host;#User
            selectScenarioId;SQLinsert;SQL;'INSERT INTO scenarios (run_id, scenario, performer, priority, env, manual, start_time, host, user) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';runId;row.Scenario;row.Performer;row.Priority;row.Env;manual ? 1 : 0;DateTime.current();Sys.hostName();Sys.userName()

            #Id;#Let
            scenarioId;selectScenarioId.Out[0]

            #If
            !manual
                #Id;#Let
                totalCount;totalCount + 1

                #Action;#Str
                Print;'Starting: ' + scripts + row.Scenario + '.jf'

                #Id;#Action;#Matrix;#Parameter
                MXRN;MatrixRun;scripts + row.Scenario + '.jf';row.Env

                #Action;#Matrix
                MatrixWait;MXRN.Out

                #Action;#Connection;#Query;#Passed;#Failed;#Report;#ScenarioId
                SQLexecute;SQL;'UPDATE scenarios SET passed = ?, failed = ?, report = ?, done = 1 WHERE id = ?';MXRN.Out.passed();MXRN.Out.failed();MXRN.Out.reportAsArchieve();scenarioId

                #Id;#Action;#Decoraded;#Matrix
                resultTab;ResultTable;false;MXRN.Out

                #Action;#Passed;#Failed
                Print;MXRN.Out.passed();MXRN.Out.failed()

                #Id;#Let
                successCount;successCount + (MXRN.Out.failed() == 0 ? 1 : 0)

                #Id;#Let
                failedCount;failedCount + (MXRN.Out.failed() > 0 ? 1 : 0)

                #ForEach;#In
                details;resultTab.Out
                    #Id;#Action;#Connection;#Query;#ScenarioId;#Testcase;#Stepp;#Time;#Result;#Error;#Screenshot
                    selectDetails;SQLinsert;SQL;'INSERT INTO details (scenario_id, testcase, step, time, result, error, screenshot) VALUES (?, ?, ?, ?, ?, ?, ?)';scenarioId;'' + details.TestCase;'' + details.Step;details.Time;'' + details.Result;'' + details.Error;Converter.imageToBlob(details.Screenshot)

                    #For;#From;#To;#Step
                    i;standartResult.Out.getHeaderSize();resultTab.Out.getHeaderSize() - 1;1
                        #Id;#RawText
                        TEXT6;Text
                        "INSERT INTO user_details (details_id, name, value) VALUES (?, ?, ?);"
                        #EndRawText

                        #Action;#Connection;#Query;#detailsId;#name;#value
                        SQLinsert;SQL;TEXT6.toString();selectDetails.Out[0];resultTab.Out.getHeader(i);details[resultTab.Out.getHeader(i)]

                    #EndFor

                #EndForEach

            #EndIf

            #OnError
                #Action;#Error
                Print;error


        #EndForEach

        #Action;#Total matrixes;#Passed
        Print;totalCount;successCount

        #Action;#Connection;#Query;#Duration;#RunId
        SQLexecute;SQL;'UPDATE runs SET duration = ? WHERE id = ?';(int)(System.currentTimeMillis() - begin);runId

        #Action;#Connection
        SQLdisconnect;SQL

        #Assert;#Message
        failedCount == 0;'Regression failed'

    #EndSubCase

    // //==============================================
    // // Shows the overall report
    // //==============================================
    #Id;#SubCase
    repOverall;Overall progress
        #Id;#Call
        SQL;RF.Connect

        #Id;#RawText
        TEXT4;Text
        "SELECT  "
        "	sp.count AS `Passed`, "
        "	sf.count AS `Failed`"
        "FROM (SELECT COUNT(id) AS count FROM scenarios WHERE failed = 0 AND run_id = (SELECT MAX(id) FROM runs) ) AS sp "
        "LEFT JOIN (SELECT COUNT(id) AS count FROM scenarios WHERE failed <> 0 AND run_id = (SELECT MAX(id) FROM runs) ) AS sf ON true "
        #EndRawText

        #Id;#Action;#Connection;#Query
        select;SQLselect;SQL;TEXT4.toString()

        #Id;#Action;#ReportName
        REP1;ReportStart;'Overall'

        #Action;#Type;#Table;#ToReport;#Title;#Colors
        ChartReport;ChartKind.Pie;select.Out;REP1.Out;'{{4 Overall 4}}';{ 'Passed' : Color.GREEN, 'Failed' : Color.RED }

        #Action;#Table;#Title;#Numbers;#ToReport
        TableReport;select.Out;'Table';false;REP1.Out

        #Action;#Report;#Passed;#Failed
        ReportFinish;REP1.Out;(int)select.Out[0].Passed;(int)select.Out[0].Failed

        #Action;#Report
        ReportShow;REP1.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Shows the summary report
    // //==============================================
    #Id;#SubCase
    repSummary;Summary report
        #Id;#Call
        SQL;RF.Connect

        #Id;#RawText
        TEXT2;Text
        "SELECT "
        "  s.scenario, "
        "  s.manual, "
        "  DATE(s.start_time) AS date, "
        "  TIME(s.start_time) AS time, "
        "  IF(s.failed = 0, ""Passed"", ""Failed"") AS result, "
        "  s.performer AS performer, "
        "  s.env AS env,  "
        "  s.host AS host, "
        "  s.user AS user,"
        "  s.report AS report"
        "FROM scenarios AS s "
        "WHERE s.manual = 0 AND s.run_id = (SELECT MAX(r.id) FROM runs AS r)"
        #EndRawText

        #Id;#Action;#Connection;#Query
        select;SQLselect;SQL;TEXT2.toString()

        #Id;#Let
        table;select.Out

        #Id;#Action;#Table;#result
        passed;TableSelect;table;'Passed'

        #Id;#Action;#Table;#result
        failed;TableSelect;table;'Failed'

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Passed\">Passed</div>';table;{ 'result' };'Passed';true

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Failed\">Failed</div>';table;{ 'result' };'Failed';true

        #Id;#Action;#ReportName
        REP1;ReportStart;'Summary'

        #Action;#Table;#Title;#ToReport;#Numbers;#scenario;#result;#date;#time;#user;#host;#report
        TableReport;table;'Consolidated Umbrella Report: ';REP1.Out;false;'Matrix Name';'Execution Status';'Execution Date';'Execution Time';'Exectuted By';'Execution Machine';'Report Link'

        #Action;#Passed;#Failed;#Report
        ReportFinish;passed.Out.size();failed.Out.size();REP1.Out

        #Action;#Report
        ReportShow;REP1.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Export the last regression set to csv file for import into QC
    // //==============================================
    #Id;#SubCase;#fileName
    repCsvExport;Export to CSV file;
        #Id;#Call
        SQL;Connect

        #Id;#Let
        countSteps;0

        #Id;#Action;#TestName;#ExecutionStatus;#ExecutionTime;#ExecutedBy;#ExecutionMashine
        createTable;TableCreate;;;;;

        #Id;#Let
        resultTable;createTable.Out

        #Id;#RawText
        TEXT5;Text
        "SELECT "
        "  s.id, s.scenario, "
        "  IF(s.failed > 0, ""Failed"", ""Passed"") AS status, "
        "  s.host, "
        "  s.user, "
        "  DATE(s.start_time) AS date, "
        "  TIME(s.start_time) AS time "
        "FROM scenarios AS s"
        "WHERE s.manual = 0 AND s.run_id = (SELECT MAX(r.id) FROM runs AS r); "
        #EndRawText

        #Id;#Action;#Connection;#Query
        query;SQLselect;SQL;TEXT5.toString()

        #Id;#Let
        scenarios;query.Out

        #For;#From;#To;#Step
        rowScenarios;0;(int)scenarios.size - 1;1
            #Id;#Action;#Connection;#Query;#scenario_id
            selectFromTable;SQLselect;SQL;'SELECT d.scenario_id, d.error FROM details AS d WHERE scenario_id = ?\u003b';scenarios[rowScenarios].id

            #Id;#Let
            selectSteps;selectFromTable.Out

            #Action;#Table;#TestName;#ExecutionStatus;#ExecutionTime;#ExecutedBy;#ExecutionMashine
            TableAddValue;resultTable;scenarios[rowScenarios].scenario;scenarios[rowScenarios].status;scenarios[rowScenarios].time;scenarios[rowScenarios].user;scenarios[rowScenarios].host

            #For;#From;#To;#Step
            rowSteps;0;(int)selectSteps.size - 1;1
                #If
                rowSteps >= countSteps
                    #Id;#Let
                    countSteps;countSteps + 1

                    #Action;#Table;#Columns
                    TableAddColumns;resultTable;'Step' + countSteps

                #EndIf

                #Id;#Let
                step;'Step' + (rowSteps + 1)

                #If
                selectSteps[rowSteps].error.equals('null')
                    #Id;#Let
                    stepResult;''

                #Else
                    #Id;#Let
                    stepResult;selectSteps[rowSteps].error


                #EndIf

                #Let
                resultTable[rowScenarios].put(step, stepResult)

            #EndFor

        #EndFor

        #Id;#Let
        stepHeaders;new ArrayList()

        #For;#From;#To;#Step
        i;1;countSteps;1
            #Let
            stepHeaders.add('Step' + i)

        #EndFor

        #Action;#Replace;#Table;#Search;#Columns
        TableReplace;'';resultTable;null;stepHeaders.toArray()

        #Action;#Table;#File
        TableSaveToFile;resultTable;fileName

    #EndSubCase

    // //==============================================
    // // Collects  all details of all scenarios of last regression in readable form
    // //==============================================
    #Id;#SubCase
    repLastAllDetails;Shows a report of last details
        #Id;#Call
        SQL;Connect

        #Id;#RawText
        TEXT1;Text
        "SELECT "
        "  s.scenario, "
        "  DATE(s.start_time) AS date, "
        "  TIME(s.start_time) AS time, "
        "  s.performer, "
        "  s.env, "
        "  s.host, "
        "  s.user, "
        "  d.testcase, "
        "  d.step, "
        "  d.time, "
        "  d.result, "
        "  d.error, "
        "  d.screenshot "
        "FROM scenarios AS s "
        "LEFT JOIN details AS d ON d.scenario_id = s.id "
        "WHERE s.manual = 0 AND s.run_id = (SELECT MAX(r.id) FROM runs AS r) "
        #EndRawText

        #Id;#Action;#Connection;#Query
        select;SQLselect;SQL;TEXT1.toString()

        #Id;#Let
        table;select.Out

        #Id;#Action;#Table;#result
        passed;TableSelect;table;'Passed'

        #Id;#Action;#Table;#result
        failed;TableSelect;table;'Failed'

        #Action;#Table;#Columns;#MatchCell;#Search;#Replace
        TableReplace;table;{ 'step', 'error' };true;'null';''

        #Action;#Table;#Columns;#MatchCell;#Search;#Replace
        TableReplace;table;{ 'screenshot'};true;null;''

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Passed\">Passed</div>';table;{ 'result' };'Passed';true

        #Action;#Replace;#Table;#Columns;#Search;#MatchCell
        TableReplace;'<div class=\"Failed\">Failed</div>';table;{ 'result' };'Failed';true

        #Id;#Action;#ReportName
        report;ReportStart;'Details'

        #Action;#Table;#Title;#ToReport;#Numbers;#scenario;#testcase;#result;#description;#expected;#error;#screenshot
        TableReport;table;'{{4 Detailed report 4}}';report.Out;false;'Matrix';'Step Name';'Status';'Description';'Expected Result';'Actual Result';'Screenshots'

        #Action;#Report;#Passed;#Failed
        ReportFinish;report.Out;passed.Out.size();failed.Out.size()

        #Action;#Report
        ReportShow;report.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Collects history of all runs and evaluate average factor of success.
    // //==============================================
    #Id;#SubCase
    repProgress;Shows progress during whole period
        #Id;#Call
        SQL;RF.Connect

        #Id;#Action;#Connection;#Query
        select;SQLselect;SQL;'SELECT DATE(r.create_time) AS `Period`, AVG(s.passed / (s.passed + s.failed)) AS `Average` FROM runs AS r LEFT JOIN scenarios AS s ON s.run_id = r.id GROUP BY r.id'

        #Id;#Action;#ReportName
        REP2;ReportStart;'Progress'

        #Action;#Type;#Table;#Title;#Labels;#ToReport
        ChartReport;ChartKind.Line;select.Out;'{{4 Progress 4}}';'Period';REP2.Out

        #Action;#Report;#Passed;#Failed
        ReportFinish;REP2.Out;0;0

        #Action;#Report
        ReportShow;REP2.Out.getReportName()

    #EndSubCase

    // //==============================================
    // // Collects all run dates and returns them as a list
    // //==============================================
    #Id;#SubCase
    listOfDates;List of run dates
        #Id;#Call
        SQL;RF.Connect

        #Id;#Action;#Query;#Connection
        query;SQLselect;'select create_time from runs';SQL

        #Id;#Let
        reportDataList;new ArrayList()

        #ForEach;#In
        row;query.Out
            #Id;#Let
            dateTimeItem;new Date(row.create_time.getTime())

            #Let
            reportDataList.add((dateTimeItem))

        #EndForEach

        #Return
        reportDataList

    #EndSubCase

    // //==============================================
    // // Esteblishes connection to SQL server using variable set that is set
    // // by RF.SetVar
    // // This subcase checks that all needed tables exist. If not it creates them.
    // //==============================================
    #Id;#SubCase
    Connect;Connect to SQL
        #Assert;#Message
        isdef sqlType && sqlType != null;'The variable sqlType is null or undefinded'

        #Assert;#Message
        isdef sqlHost && sqlHost != null;'The variable sqlHost is null or undefinded'

        #Assert;#Message
        isdef sqlBase && sqlBase != null;'The variable sqlBase is null or undefinded'

        #Assert;#Message
        isdef sqlUser && sqlUser != null;'The variable sqlUser is null or undefinded'

        #Assert;#Message
        isdef sqlPassword && sqlPassword != null;'The variable sqlPassword is null or undefinded'

        #Id;#Action;#User;#Server;#Base;#Sql;#Password
        SQLCNT;SQLconnect;sqlUser;sqlHost;sqlBase;sqlType;sqlPassword

        #Id;#Action;#Query;#Connection
        chck1;SQLselect;'check table runs fast';SQLCNT.Out

        #Id;#Action;#Query;#Connection
        chck2;SQLselect;'check table scenarios fast';SQLCNT.Out

        #Id;#Action;#Query;#Connection
        chck3;SQLselect;'check table details fast';SQLCNT.Out

        #Id;#Action;#Query;#Connection
        chck4;SQLselect;'check table user_details fast';SQLCNT.Out

        #If
        !(chck1.Out[0].Msg_text == 'OK' && chck2.Out[0].Msg_text == 'OK' && chck3.Out[0].Msg_text == 'OK' && chck4.Out[0].Msg_text == 'OK')
            #Action;#Text;#Notifier
            Show;'Creating tables';Notifier.Info

            #Id;#RawText
            query1;create
            "CREATE TABLE IF NOT EXISTS `runs` ("
            "  `id` int(11) NOT NULL AUTO_INCREMENT,"
            "  `create_time` datetime DEFAULT NULL,"
            "  `duration` int(11) DEFAULT NULL,"
            "  PRIMARY KEY (`id`)"
            ") ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;"
            #EndRawText

            #Action;#Query;#Connection
            SQLexecute;query1.toString();SQLCNT.Out

            #Id;#RawText
            query2;create
            "CREATE TABLE IF NOT EXISTS `scenarios` ("
            "  `id` int(11) NOT NULL AUTO_INCREMENT,"
            "  `run_id` int(11) NOT NULL,"
            "  `scenario` varchar(100) NOT NULL,"
            "  `performer` varchar(100) DEFAULT NULL,"
            "  `priority` int(1) DEFAULT NULL,"
            "  `env` varchar(100) DEFAULT NULL,"
            "  `manual` int(1) DEFAULT NULL,"
            "  `start_time` datetime DEFAULT NULL,"
            "  `host` varchar(45) DEFAULT NULL,"
            "  `user` varchar(45) DEFAULT NULL,"
            "  `passed` int(11) DEFAULT '0',"
            "  `failed` int(11) DEFAULT '0',"
            "  `report` longblob,"
            "  `done` int(1) DEFAULT NULL,"
            "  `description` varchar(255) DEFAULT NULL,"
            "  PRIMARY KEY (`id`)"
            ") ENGINE=InnoDB AUTO_INCREMENT=278 DEFAULT CHARSET=utf8;"
            #EndRawText

            #Action;#Query;#Connection
            SQLexecute;query2.toString();SQLCNT.Out

            #Id;#RawText
            query3;create
            "CREATE TABLE IF NOT EXISTS `details` ("
            "  `id` int(11) NOT NULL AUTO_INCREMENT,"
            "  `scenario_id` int(11) NOT NULL,"
            "  `testcase` varchar(256) DEFAULT NULL,"
            "  `step` varchar(256) DEFAULT NULL,"
            "  `time` int(11) DEFAULT NULL,"
            "  `result` varchar(45) DEFAULT NULL,"
            "  `error` varchar(256) DEFAULT NULL,"
            "  `screenshot` longblob,"
            "  PRIMARY KEY (`id`)"
            ") ENGINE=InnoDB AUTO_INCREMENT=567 DEFAULT CHARSET=utf8;"
            #EndRawText

            #Action;#Query;#Connection
            SQLexecute;query3.toString();SQLCNT.Out

            #Id;#RawText
            query4;create
            "CREATE TABLE IF NOT EXISTS `user_details` ("
            "  `id` int(11) NOT NULL AUTO_INCREMENT,"
            "  `details_id` int(11) NOT NULL,"
            "  `name` varchar(100) NOT NULL,"
            "  `value` varchar(256) DEFAULT NULL,"
            "  PRIMARY KEY (`id`)"
            ") ENGINE=InnoDB DEFAULT CHARSET=utf8;"
            #EndRawText

            #Action;#Query;#Connection
            SQLexecute;query4.toString();SQLCNT.Out

        #EndIf

        #Return
        SQLCNT.Out

    #EndSubCase

#EndNameSpace

