#region general
DragNDropListTooltip=""Use drag-n-drop to reorder elements"
Default=""
#endregion

#//region actions
DefaultOutputDescription="No output value."

#//region actions.app
AppConnectionDescription=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to.It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
AppCloseWindowGeneralDescription=Plug-in dependent action. The purpose of the action is to close the currently active window of the application. When the application is a browser, the action closes the currently active tab.
AppCloseWindowOutputDescription=Returns the title bar of the window which was closed.
AppCloseWindowExample={{#\n#Id;#Action;#AppConnection\nACW;ApplicationCloseWindow;app\n\n#Assert;#Message\n!Str.IsNullOrEmpty(ACW.Out);'String is null or empty'#}}
APP_CONNECT_TO_GENERAL_DESC=Plug-in dependent action. The purpose of the action is connect to the running application. The action requires some additional parameters which depend on the type of the plug-in used.
APP_CONNECT_TO_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in.For example, the available parameters for win.jar are the following:{{` {{$Main window$}} - a text string to search for the window of the application to connect to.`}}{{` {{$Height$}} - the height of the window.`}} {{` {{$Width$}} - the width of the window.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_CONNECT_TO_OUTPUT_DESC=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. Should be created with an active {{$'Global'$}} flag.
APP_CONNECT_TO_EXAMPLE={{#\n#Id;#Global;#Action;#Browser;#URL;#AppId\napp;1;ApplicationStart;'Chrome';'http://google.com';'WEB'\n\n#Assert;#Message\napp.Out.IsGood();'Connection is not established'#}}
APP_GET_PROPERTIES_GENERAL_DESK=Plug-in dependent action. The purpose of the action is to get certain properties from the available connection.
APP_GET_PROPERTIES_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, additional parameters {{$Title$}} and {{$URL$}} are available for web plug-in. They are necessary to get the information about the title bar and the address respectively.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_GET_PROPERTIES_OUTPUT_DESC=Associative array which displays the names of the elements processed by the action along with prpperties received from the app.
APP_GET_PROPERTIES_EXAMPLE={{#\n#Id;#Action;#URL;#AppConnection\nAGP1;ApplicationGetProperties;;app\n\n#Assert;#Message\n!Str.IsNullOrEmpty(AGP1.Out.URL);'String is null or empty'#}}
APP_MOVE_GENERAL_DESK=Plug-in depend action. This action is used for moving the main window
APP_NAVIGATE_GENERAL_DESC=Navigate inside application.
APP_NAVIGATE_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, an additional parameter {{$Navigate$}} is available for web plug-in. It has two values {{$BACK$}} and {{$FORWARD$}} which help to move within the browser back and forward respectively.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_NAVIGATE_EXAMPLE={{#\n#Action;#Navigate;#Navigate;#AppConnection\nApplicationNavigate;NavigateKind.BACK;NavigateKind.FORWARD;app#}}
APP_NEW_INSTANCE_GENERAL_DESC=Plug-in dependent action. The action is used to open new windows in the web browser.
APP_NEW_INSTANCE_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. For example, the available parameters for win.jar are the following: {{` {{$URL$}} - string. It defines the URL.`}} {{` {{$Browser$}} - string. It defines which browser should be launched.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_NEW_INSTANCE_EXAMPLE={{#\n#Id;#Action;#Browser;#URL;#AppConnection\nAPPNI1;ApplicationNewInstance;'Chrome';'http://google.com';app#}}
APP_REFRESH_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to refresh the application window. It should be used only with web plug-in.
APP_REFRESH_EXAMPLE={{#\n#Action;#AppConnection\nApplicationRefresh;app\n#}}
APP_RESIZE_GENERAL_DESC=The purpose of the action is to change the window size of the application under test.
APP_RESIZE_EXAMPLE=Example 1.{{#\n#Action;#AppConnection;#Width;#Height\nApplicationResize;app;1000;1000\n#}} \nExample 2.{{#\n#Action;#Maximize;#AppConnection\nApplicationResize;true;app\n#}}
APP_SET_PROPERTIES_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to set certain properties into the available connection.
APP_SET_PROPERTIES_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, additional parameters {{$CookieAdd$}} and {{$CookieRemove$}} are available for web plug-in. They are necessary to add and to remove a cookie respectively.`}} The parameters can be chosen in the dialoguewindow opened with the context menu of this action in {{$'All parameters'$}} option.
APP_SET_PROPERTIES_EXAMPLE={{#\n#Id;#Action;#CookieRemove\nAGP1;ApplicationGetProperties;'name'\n\n#Assert;#Message\nAGP1.Out.CookieRemove;'Cookie was not removed'#}}
APP_START_GENERAL_DESC=The purpose of the action is to launch the application under test. The type of the application is determined by the chosen plug-in (see also {{@GUI plug-ins@}}). The action requires some additional parameters, which depend on the type of the plug-in used. The parameters are not mandatory from the standpoint of the tool itself, but they are required for the plug-in to launch the application correctly.
APP_START_ADDITIONAL_DESC=The structure and meaning of parameters depend on the plug-in used. For example, web.jarrequires the following list{{` {{$Browser$}} - the browser in which the web application is started, `}{{` {{$URL$}} - the Internet link to the application server. `}In order to avoid errors in writing these additional parameters, the user can add them by usingthe matrices editor accessible via the 'All parameters...' context menu after the {{$AppId$}} parameterhas been filled (and is filled by the constant string).
APP_START_OUTPUT_DESC=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. For example, in order to shut down the application under test and to free its resources via the {{$ApplicationStop$}} action the user must pass a valid object to this action, which was received from {{$ApplicationStart$}} action.
APP_START_EXAMPLE=As a rule, {{$ApplicationStart$}} is placed in one of the initial TestCases where initialization is performed. Therefore it requires that the {{$Global$}} flag be set, as access to the output value is necessary within the whole matrix rather than just within the {{$TestCase$}} containing the action. {{#\n#Id;#Global;#Action;#AppId;#Browser;#URL\nAPPSTR1;1;ApplicationStart;'WEB';Browser;Env1 #}} It is a standart using this action with web.jar plugin.
APP_STOP_GENERAL_DESC=The purpose of the action is to close the application under test. As a rule, ApplicationStop is placed in one of the last TestCases to stop the application initialized in {{@ApplicationStart@}} or {{@ApplicationConnectTo@}}. The flag {{$'Global'$}} (indicated with letter 'G') should be set in actions {{@ApplicationStart@}} or {{@ApplicationConnectTo@}}.
APP_STOP_EXAMPLE={{#\n#Action;#AppConnection\nApplicationStop;app\n#}}
APP_SWITCH_TO_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to switch the focus among windows/tabs of the web application.
APP_SWITCH_TO_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, additional parameters {{$Title$}} and {{$URL$}} are available for web plug-in. They are necessary to get the information about the title bar and the address respectively.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_SWITCH_TO_OUTPUT_DESC=It returns the title bar of the window which gained the focus.
APP_SWITCH_TO_EXAMPLE={{#\n#Id;#Action;#Title;#AppConnection\nAST;ApplicationSwitchTo;'Title';app\n#Assert;#Message\nStr.IsNullOrEmpty(AST.Out);'Title is null'#}}

#//endregion

#//region actions.tables
TableCreateGeneralDescriptions=This action is determined to create a table (object type {{$Table$}}). Object Table is set as the two-dimensional structure consisting of rows and columns. Ordering of Rows starts with 0, columns are named. Object Table can be created with  {{@RawTable@}}, with actions {{@TableCreate@}} , {{@TableLoadFromFile@}} , {{@TableLoadFromDir@}} , {{@TableSelect@}} and method {{@Do.getTable()@}}. {{`|header1|header2|`}} {{`|value1 |value2 |`}} {{`|value1 |value2 |`}} 
TableCreateAdditionalDesc=Additional parameters are used to assign column titles. The value field of parameter is left empty.
TABLE_CREATE_EXAMPLE={{`1.Create a table with columns Name and Age.`}}{{`2. Verify that the created object has columns  set initially.`}}\n{{#\n#Id;#Action;#Name;#Age\nTC;TableCreate;;\n#Assert;#Message\nTC.Out.getHeader(0)=='Name' && TC.Out.getHeader(1)=='Age';'Table isn't correct'#}}\n
TableCreateOutputDesc=Table structure.
TableAddColumnsGeneralDesc=This action is determined to add columns to the table given. It can be used if a table is created from different sources or if new columns are added to the table given.
TABLE_ADD_COLUMNS_EXAMPLES={{`1. Create a table with column Name.`}}{{`2. Add to the table created column Age (to the line number 0).`}}{{`3. Verify that the table has columns Name and Age. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name\n0;\n#EndRawTable\n#Action;#Index;#Table;#Columns\nTableAddColumns;0;TC;{'Age'}\n#Assert;#Message\nTC.getHeader(0) == 'Name' && TC.getHeader(1) == 'Age';'Table is not correct'#}}
TABLE_ADD_VALUE_EXAMPLE={{`1. Create a table with columns Name and Age. Add a value into 0 line to a column Name. A cell in a column Age leave empty.`}}{{`2. Verify that a value in the first line of a column Name is equal 'Mike', Age is equal  null. Column Age is filled with a value null. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;;\n#EndRawTable\n#Action;#Index;#Table;#Name\nTableAddValue;0;TC;'Mike'\n#Assert;#Message\nTC.get(0).get('Name') == 'Mike' && TC.get(0).get('Age') == null;'Not equals'#}}
TABLE_ADD_VALUE_GENERAL_DESC=This action  is determined to add lines to a Table..
TABLE_ADD_VALUE_ADDITIONAL_DESC=Are used to insert values where a parameter name - a column name, a parameter value - a cell value.
TABLE_COLUMN_AS_LIST_GENERAL_DESC=This action extract one column of a table and returns it as a list of values.
TABLE_COLUMN_AS_LIST_OUTPUT_DESC=List of strings.
TABLE_COLUMN_RENAME_GENERAL_DESC=This action is determined to rename a column in the table given.
TABLE_COLUMN_RENAME_ADDITIONAL_DESC=The column name given is indicated in a parameter's name, a new column name is in a parameter's value.
TABLE_COLUMN_RENAME_EXAMPLE={{`1. Create a table with columns Name and Age.`}}{{`2. Rename column Name into FirstName.`}}{{`3. Verify that a new name is assigned to a column. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;;\n#EndRawTable\n#Action;#Table;#Name\nTableColumnRename;TC;'FirstName'\n#Assert;#Message\nTC.getHeader(0) == 'FirstName';'Values is not equals'#}}
TABLE_COMPARE_TWO_GENERAL_DESC=This action is determined to compare two tables.
TABLE_COMPARE_TWO_EXAMPLE={{`1. Create a table with columns Name and Age. The first table line is applied with values Mike and 42 accordingly.`}}{{`2. Create a table similar to the previous. The first table line is applied with values Mike and 42 accordingly.`}}{{`3. Compare two tables.`}}Information about distinctions ( line number and columns titles which values do not match) is reported as a result of this action in form of:{{`Differences`}}{{`# Expected Actual`}}{{`0 [ Name : Mike, Age : 42 ] [ Name : Mike, Age : 41 ]`}}{{`Age 42 41`}}{{`If tables have different columns numbers, distinctions in cells will be ignored and information about all columns titles is displayed.`}} {{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n#EndRawTable\n#Id;#RawTable\nTC1;Table\n@;Name;Age\n0;Mike;41\n#EndRawTable\n#Action;#Expected;#Actual\nTableCompareTwo;TC;TC1#}}
TABLE_COMPARE_TWO_OUTPUT_DESC=A table as a result of compare.
TABLE_CONSIDER_COLUMN_AS_GENERAL_DESC=This action is determined  to take string values stored in a table to a certain data type. \nObjects Table are filled with string values by default. It is used in case when it is needed to perform an action with data stored in a table not as a line but as a one type of data given: {{$Integer$}}, {{$String$}}, {{$Boolean$}}, {{$Double$}}, {{$BigDecimal$}}, {{$Date$}}, and also {{$Expression$}} which is used to name cells which include expressions in mvel language. These expressions s will be calculated  when actions TableReport (if parameter ReportValues is used), TableSaveToFile (if parameter SaveValues is used), TableCompareTwo are performed.
TABLE_CONSIDER_COLUMN_AS_EXAMPLE={{`1. Create a table with columns Name and Age, SalaryPerYear and populate it with values.`}}{{`2. Set data type  Integer for column  Age.`}}{{`3. Using action TableSelect select all rows with value more than 25(int) in column Age.`}}{{`4. Verify that TableConsiderColumnsAs is correct. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age;SalaryPerYear\n0;Mike;42;12000 * 12\n1;John;32;25000*12\n2;Fred;21;7000*12\n#EndRawTable\n#Action;#Table;#Integer\nTableConsiderColumnsAs;TC;'Age'\n#Id;#Action;#Table;#Age\nTS;TableSelect;TC;new NumberCondition('Age','>',25)\n#Action;#Expression;#Table\nTableConsiderColumnsAs;'SalaryPerYear';TS.Out\n#Assert;#Message\nTS.Out.size() == 2 && TS.Out.get(0).get('SalaryPerYear') == '144000'#}}
TABLE_EDIT_GENERAL_DESK=Edit a table via interaction with a user
TABLE_EDIT_ADDITIONAL_DESC=Values where a parameter name - a table column name, a parameter value - true, if it is allowed to edit.
TABLE_EDIT_EXAMPLE={{#\n#Id;#RawTable\nTC;Table\n@;Name;Age;City\n0;Mike;25;London\n1;Jane;21;Moscow\n2;Ann;19;France\n#EndRawTable\n\n#Action;$Table;$Title;Name;Age;City\nTableEdit;TC;'Title';true;false;true\n\n#Action;$Table;$Title\nTableReport;TC;'table after edit'\n\n #}}
TABLE_EDIT_OUTPUT_DESC=Returns true if the user pushed the button Ok.
TABLE_GET_ROW_INDEXES_GENERAL_DESC=This action is used for searching a suitable line numbers in the table given. Can be applied when it Is needed to get all indexes of the such lines.
TABLE_GET_ROW_INDEXES_ADDITIONAL_DESC=Columns containing the data which defines the search conditions. Column title is given in the parameter's value. In the value it is needed to specify the content which defines the search.
TABLE_GET_ROW_INDEXES_OUTPUT_DESC=Outputs the index list matching to conditions.
TABLE_GET_ROW_INDEXES_EXAMPLE={{#\n#Id;#RawTable\nTC;Table\n@;Name;Column\n0;Mike;2\n1;John;32\n2;Fred;2\n3;Mike;1\n4;Angel;10\n5;John;40\n#EndRawTable\n\n#Action;$Table;$Integer\nTableConsiderColumnsAs;TC;'Column'\n\n#Id;#Action;$Table;Column;Name\nTBLIDX1;TableGetRowIndexes;TC;new NumberCondition('Column','>',2);'John'\n\n#Assert;#Message\nTBLIDX1.Out == [1,5];\n\n#}}
TABLE_LEFT_JOIN_GENERAL_DESK=This action is determined to join tables as in SQL Left Join.
TABLE_LEFT_JOIN_ADDITIONAL_DESC=Additional parameters are used to assign column titles.
TABLE_LEFT_JOIN_OUTPUT_DESC=Table structure.
TABLE_LEFT_JOIN_EXAMPLE={{`1. Create a table with columns Name and Language. Populate it with few rows.`}}{{`2. Create a table with columns Name and CityId. Populate it with few rows.`}}{{`3. Use Left Join choosing rows from the first table on condition: matching column Name. `}}{{#\n#Id;#RawTable\nCity;Table\n@;id;Name;Language\n0;1;London;us\n1;2;Moscow;ru\n2;3;France;fr\n#EndRawTable\n\n#Id;#RawTable\nPerson;Table\n@;Name;CityId\n0;Andrey;1\n1;Victor;2\n2;Aleksander;1\n3;Valery;4\n4;Kate;3\n#EndRawTable\n\n#Id;#Action;$Condition;$LeftTable;$LeftAlias; \n $RightTable;$RightAlias;CityName;Language\nTBLJN1;TableLeftJoin;'person.CityId == city.id'; \n Person;'person';City;'city';'city.Name';'city.Language'\n\n#Action;$Table;$Title\nTableReport;TBLJN1.Out;'title'#}}
TABLE_LOAD_FROM_DIR_GENERAL_DESC=This action is determined to get directory structure as an object Table. Can be used to check required files in  this directory.
TABLE_LOAD_FROM_DIR_OUTPUT_DESC=Table which consists columns Name, Size, Date, Is directory, Hidden. Each table row contains data corresponding a file/folder in this directory. If it is directed to a null directory or file, an object Table is created without any columns or rows. If it is directed to an empty directory, a table is created with column titles and 0 rows.
TABLE_LOAD_FROM_DIR_EXAMPLE={{`1. Create a table with information about files/folders in directory Home.`}}\n{{#\n#Id;#Action;#Dir\nTBLD1;TableLoadFromDir;System.getProperty('user.home')#}}
TABLE_LOAD_FROM_FILE_GENERAL_DESK=This action is determined to create a table from file csv. {{`{{$CSV$}} (Comma-Separated Values) - a text format, which is determined to display table data.Specification: Each file row is a table row. The first row contains column titles.`}}
TABLE_LOAD_FROM_FILE_OUTPUT_DESK=If file is not found, object Table is not created.
TABLE_LOAD_FROM_FILE_EXAMPLE={{`1. Get table downloaded from file testTable.csv divided internally with '|'. Verify that table is downloaded correctly.`}}{{#\n#Id;#Action;#Assert;#File;#Delimiter\nTLFF;TableLoadFromFile;TLFF.Out.size() > 0;'PathToFile/testTable.csv';'|'#}}
TABLE_REMOVE_COLUMNS_GENERAL_DESK=This action is determined  to delete columns in a table given. (Object type Table). Can be used to correct the table.
TABLE_REMOVE_COLUMNS_EXAMPLE={{`1. Create a table with columns Name,Age,Gender,Salary`}}{{`2. Delete columns Name, Age, Gender  in a table  given.`}}{{`3.Verify that headings are deleted. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age;Gender;Salary\n0;;;;\n#EndRawTable\n#Action;#Table;#Columns\nTableRemoveColumns;TC;{'Name','Age','Gender'}\n#Assert;#Message\nTC.getHeader(0) == 'Salary';#}}
TABLE_REMOVE_ROW_GENERAL_DESC=This action is used to delete a selected line in a table given.
TABLE_REMOVE_ROW_OUTPUT_DESC=True if removing is successful
TABLE_REMOVE_ROW_EXAMPLE={{` 1. Create a table with columns Name and Age. Add two lines with data to the table. `}}{{` 2. Delete the first line in the table, the line with the index 0. `}}{{` 3. Verify that the first line was deleted and was replaced with the line containing data about Anna. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;25\n1;Anna;20\n#EndRawTable\n#Id;#Action;#Table;#Index\nTBLRR1;TableRemoveRow;TC;0\n#Assert;#Message\nTC.get(0).get('Name') == 'Anna';'Table is not correct'#}}
TABLE_REPLACE_GENERAL_DESC=This action is used to replace cell values if the value is equal to the given one or complies with a regular expression.
TABLE_REPLACE_EXAMPLE={{`1. Create a table with columns Name and Age. Add four lines with data about Mike, Anna, John, Bruce.`}}{{`2. Replace all that comply with Regexp with 'passed'.`}}{{`3. Verify if everything was correct.`}} {{#\n#Id;#RawTable\nTC;Table\n@;Name;Mail\n0;John;c0nst@money.simply.net\n1;Mike;somebody@dev.com.ua\n2;Bruce;Name.Sur_name@gmail.com\n3;Anna;user33@somewhere.in.the.net\n#EndRawTable\n#Id;#Let\nrgxp;'[a-zA-Z]{1}[a-zA-Z\\\\\\\\d\\\\\\\\.\\\\\\\\_]+@([a-zA-Z]+\\\\\\\\.){1,2}((net)|(com)|(org))'\n#Action;#Regexp;#Replace;#Table;#Columns\nTableReplace;rgxp;'passed';TC;'Mail'\n#Assert;#Message\nTC.get(0).get('Mail')=='passed' && TC.get(2).get('Mail')=='passed';'Assert!'#}}
TABLE_REPORT_GENERAL_DESC=This action is used to output the table to report.
TABLE_REPORT_ADDITIONAL_DESC=Columns containing the data which defines the outgoing columns. Column title is given in the parameter's value. In the value it is needed to specify the new name for table in the report.
TABLE_REPORT_EXAMPLE={{` 1. Create a test case with id Test.`}}{{` 2. Create a table with columns Name and Age. Add values to the first line of the table.`}}{{` 3. Output the table into the report only with the column Age, before the test case with id Test.`}} {{#\n#Id;#TestCase\nTest;\n    #Id;#RawTable\n    TC;Table\n    @;Name;Age\n    0;Mike;25\n    #EndRawTable\n    #Action;#BeforeTestCase;#Table;#Title;#Columns\n    TableReport;'Test';TC;'Table title';{'Age' : 'Age of person'}#}}
TABLE_SAVE_TO_FILE_GENERAL_DESC=This action is used to save a table to the file with csv structure. {{`CSV (Comma-Separated Values)`}} is a text format, used for displaying data from the table.Specification: Each line in the file is one line from the table. The first line contains column titles.
TABLE_SAVE_TO_FILE_OUTPUT_DESC=True if saved successfully.
TABLE_SAVE_TO_FILE_EXAMPLE={{` 1. Create a table with columns Name and Age. `}}{{` 2. Add values to the first line of the table. `}}{{` 3. Save the table into the file dest.csv. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;25\n#EndRawTable\n#Id;#Action;#Table;#File\nTSTF;TableSaveToFile;TC;'Path/dest.csv'\n#Assert;#Message\nTSTF.Out;'Table was not saved'#}}
TABLE_SELECT_GENERAL_DESC=This action is used for extracting lines from the table given and creating a new table with these lines. Can be applied when it Is needed to get only a part of data from the table.Line extracting is done according to the content which is specified in additional parameters.
TABLE_SELECT_ADDITIONAL_DESC=Columns containing the data which defines the selection. Column title is given in the parameter's value. In the value it is needed to specify the content which defines the selection.
TABLE_SELECT_OUTPUT_DESC=Outputs the table containing the selected lines.
TABLE_SELECT_EXAMPLE={{`Example #1:`}}\n{{`1. Create a table with columns Name and Age. Complete the table with 3 lines.`}}\n{{`2. Set the data type  Integer for the column Age.`}}\n{{`3. With the actionTableSelect select all lines with the value 'Mike' in the column Name.`}}\n{{`4. Verify that the size of the table is equal to 1. `}}\n{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n1;John;42\n2;Fred;21\n#EndRawTable\n#Action;#Table;#Integer\nTableConsiderColumnsAs;TC;'Age'\n#Id;#Action;#Table;#Age\nTS;TableSelect;TC;new StringCondition('Name','Mike')\n#Assert;#Message\nTS.Out.size() == 1;#}}\n{{`Example #2:`}}\n{{`1. Create a table with columns Name and Age. Complete the table with 3 lines.`}}\n{{`2. Set the data type  Integer for the column Age.`}}\n{{`3. With the action TableSelect select all lines where the column values Age are more than 20`}}\n{{`4. Verify that the size of the table is equal to 2. `}}\n{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n1;John;34\n2;Fred;21\n#EndRawTable\n#Action;#Table;#Integer\nTableConsiderColumnsAs;TC;'Age'\n#Id;#Let\ncondition; new AndCondition(new NumberCondition('Age','>',20))\n#Id;#Action;#Table;#Age\nTS;TableSelect;TC;condition\n#Assert;#Message\nTS.Out.size() == 2;#}}\n
TABLE_SET_VALUE_GENERAL_DESK=This action is used to set values in the cells of a table given.
TABLE_SET_VALUE_ADDITIONAL_DESK=Set values for all cells in the line given. Each parameter name sets the column title, where the value is set. The value if a corresponding parameter sets the value of the column.
TABLE_SET_VALUE_EXAMPLE={{`1. Create a table with columns Name and Age. Add values to the first line of the table.`}}{{`2. Set the value for the columns Name and Age 'John' and '42' in the first line.`}}{{`3. Verify that the new values were inserted correctly. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;25\n#EndRawTable\n#Action;#Table;#Index;#Name;#Age\nTableSetValue;TC;0;'John';'42'\n#Assert;#Message\nTC.get(0).get('Name') == 'John'&& TC.get(0).get('Age') == '42';#}}
TABLE_SORT_GENERAL_DESC=This action is used to sorting the table by the column given.
TABLE_SORT_OUTPUT_DESK=Restores the original but sorted table.
TABLE_SORT_EXAMPLE={{` 1. Create a table with columns Name and Age. Complete the table with 3 lines.`}}{{`2. Do top-down sorting in  Age.`}}{{`3. Output the sorted table to report. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n1;John;57\n2;Anna;21\n#EndRawTable\n#Action;#Ascending;#ColumnName;#Table\nTableSort;false;'Age';TC\n#Action;#Table;#Title\nTableReport;TC;'Table title'#}}
TABLE_UNION_GENERAL_DESK=This action is used to add all lines from one table  to the end of another one. With the table merge, Main Table columns have priority, that means that merging with the table with more columns extra ones will be ignored. In case of adding the table with not enough columns from the main one, the values in such columns will be null.
TABLE_UNION_EXAMPLE={{#\n#Id;#RawTable\nmain;Table\n@;Name;Age;Gender\n0;Mike;42;Male\n1;Anna;21;Female\n#EndRawTable\n\n#Id;#RawTable\nadditional;Table\n@;Name;Age\n0;Fred;28\n1;Carl;10\n#EndRawTable\n\n#Action;$UnitedTable;$MainTable\nTableUnion;additional;main\n\n#Action;$Table;$Title\nTableReport;main;'dfdf'\n\n#Id;#RawTable\nexpected;Table\n@;Name;Age;Gender\n0;Mike;42;Male\n1;Anna;21;Female\n2;Fred;28;\n3;Carl;10;\n#EndRawTable\n\n#Id;#Action;$Expected;$Actual\nTBLCMP1;TableCompareTwo;expected;main\n\n#}}
#//endregion

#//endregion

#region tool.wizard
WizardSuccess_1=Wizard '{'{0}'}' success
WIZARD_ERROR_ON_CONFIG_REFRESH=Error on refresh config
WIZARD_ERROR_ON_SHOW_ELEMENT=Error on show element
WIZARD_ERROR_ON_DISPLAY_WINDOW=Error on display window
WIZARD_ERROR_ON_CREATE_DOCUMENT_2=Error on create {0} of kind {1}
WIZARD_ERROR_ON_LOAD_DOC_1=Error on load {0}
WIZARD_ERROR_ON_CREATE_DOC_1=Error on save {0}
WIZARD_ERROR_ON_CREATE_COPY=
WIZARD_WIZARD=Wizard
WIZARDS=Wizards
WIZARD_NO_ONE_ACCESSIBLE=No one wizard is accessible here
WIZARD_CHOOSE_WIZARD=Choose wizard
WIZARD_HELP=Help
WIZARD_ACCEPT=Accept
WIZARD_REFUSE=Refuse

#region tool.wizard.all
Start=Start
Scan=Scan
CheckTable=Check table
SelectConnectionInfo=Please select stored connection and dialog
SelectDialog=Select dialog: 
SelectStoredConn=Select stored connection:
Connect=Connect
Failed=Failed
Stop=Stop
ErrorOnApplicationStop=Error on application stop
Success=Success
Loading=Loading...
ErrorOnCloseWizard=Error on close wizard
EnterNameOfVar=Enter name of var here
Status=Status: 
StoreAs=Store as: 
SelectConverterFromCombobox=Select converter from the above combobox
Scanning=Scanning...
AppResizeConverterDescription=It converting the action ApplicationResize from old to new format.\nOld action contains 3 fields : Maximize, Minimize and Normal.\nUser can set several parameters and it will throw exception.\nIn new format user can''t do it, because these parameters replaced to one new parameter : Resize\nExample.\nOld action :\n    #Action;$AppConnection;$Maximize\n    ApplicationResize;CALL_7;true\nwill converted to \n    #Action;$AppConnection;$Resize\n    ApplicationResize;Resize.Maximize\n
Dialog=Dialog : 
SelfID=Self id : 
ErrorOnSetSelfId=Error on set self id
OnOpen=On open
OnClose=On close
SelfIdNotFound=Self control not found
SelfControlIsEmpty=Self control is empty
ApplicationNotStarted=Application is not started.\nStart it before call the wizard.
DictionaryWizardException=DictionaryWizard exception
ErrorOnGenerateOnOpen=Error on generate onOpen
ErrorOnGenerateOnClose=Error on generate onClose
NothingToUpdate=Nothing to update
UpdatingElements=Updating elements
StartUpdatingItemOf=Start updating item {0} of {1}
ErrorOnArrangeOne=Error on arrange one
EndUpdating=End updating {0} of {1}
ErrorOnFindElements=Error on find elements
Connection=Connection : 
Number=Number
About=About
Less=Less
Great=Great
Between=Between
SelectDistance=Select distance : 
All=All
Significant=Significant
UseDistance=Use distances : 
SelectFunctions=Select functions : 
AllOk=All ok
Checking=Checking...
SelectMoreElements=Select more than zero elements from listView above
CreatingTable=Creating table...
Relation=Relation {0} -> {1}
Check=Check
Save=Save
CantSaveInvalidDoSpecFunc=Can''t save, because {0} is invalid doSpec function
CantCheckInvalidDoSpecFunc=Can''t check, because {0} is invalid doSpec function
VariableWithNameExist=Variable with name ''{0}'' already exist
Namespases=Namespases
WhereToMove=Where to move: 
WizardMustBeInvokedFromNamespace=The wizard must be invoked on SubCase from Namespace
MatrixContainsReferences={0} contains {1} reference(s)
NoChangesNeeded=No changes needed.
ERROR_ON_CREATE_COPY=Error on create copy
OLD_VALUE_1=old value : {0}
SELECT_NEW_VALUE=, select new value : 
WIZARD_DICTIONARY_NAME_1=Dictionary : {0}
DICTIONARY_OK=Dictionary is ok
ERROR_ON_TABLE_CREATE=Error while table creating. Please check file name or file extension.
WIZARD_NO_FILE_NAME=No file name specified.
WIZARD_ERROR_IN_FILENAME=Error in filename.
WIZARD_FILE_NOT_CSV=The file ''{0}'' is not a CSV.
WIZARD_FILE_READ_ONLY_1=The file ''{0}'' is read-only and can''t be changed.
WIZARD_DELIMETR_INCORRECT=Delimiter is incorrect or empty.
WIZARD_ENTER_XPATH=Enter xpath here
WIZARD_HELPER=Helper
WIZARD_RELATIVE=Relative
WIZARD_USE_TEXT=use text()
#endregion

#endregion

#region plugins
PLUGIN_COMMON_DESCRIPTION=empty
WEB_PLUGIN_DESCRIPTION=empty
WEB_PLUGIN_DIFFERENCE=empty
WIN_PLUGIN_DESCRIPTION=empty
WIN_PLUGIN_DIFFERENCE=empty
SWING_PLUGIN_DESCRIPTION=empty
SWING_PLUGIN_DIFFERENCE=empty

#region plugins.fields

#region plugins.fields.web
WEB_PLUGIN_LOG_LEVEL=Set a log level for running application. You can use 'ALL', 'ERROR', 'INFO', ETC. But we are recommend use 'ALL' (default)
WEB_PLUGIN_JRE_EXEC=empty
WEB_PLUGIN_JRE_ARGS=Set params for run application. For example, initial and maximum memory allocation pool
WEB_PLUGIN_CHROME_DRIVER=Set Google Chrome driver path
WEB_PLUGIN_GECKO_DRIVER=Set Firefox driver path
WEB_PLUGIN_IE_DRIVER=Set Internet Explorer driver path
WEB_PLUGIN_CHROME_DRIVER_BINARY=Set Google Chrome binary driver path
WEB_PLUGIN_FIREFOX_PROFILE=Set folder for Firefox user profile, which contains info about visited sites, etc
WEB_PLUGIN_PRIVATE_MODE=Private Browsing allows you to browse the Internet without saving any information about which sites and pages you’ve visited.
WEB_PLUGIN_BROWSER=Set browser via combobox which should be used to run application
WEB_PLUGIN_URL=Set URL which should opened when application starts. Set full path. Remember about difference between http/https
WEB_PLUGIN_WHERE_OPEN=Set where new application should opened: in new tab, in new window or in first opened tab
WEB_PLUGIN_PROPERTY_URL=empty
WEB_PLUGIN_PROPERTY_TITLE=empty
WEB_PLUGIN_PROPERTY_ALL_TITLES=empty
WEB_PLUGIN_PROPERTY_COOKIE=empty
WEB_PLUGIN_PROPERTY_ALL_COOKIES=empty
WEB_PLUGIN_PROPERTY_ADD_COOKIE=empty
WEB_PLUGIN_PROPERTY_REMOVE_COOKIE=empty
WEB_PLUGIN_PROPERTY_REMOVE_ALL_COOKIES=empty
WEB_PLUGIN_PROPERTY_TAB=empty

#endregion

#region plugins.fields.win
WIN_PLUGIN_LOG_LEVEL=empty
WIN_PLUGIN_JRE_EXEC=empty
WIN_PLUGIN_JRE_ARGS=empty
WIN_PLUGIN_MAX_TIMEOUT=empty
WIN_PLUGIN_ALWAYS_TO_FRONT=empty
WIN_PLUGIN_MAIN_WINDOW=empty
WIN_PLUGIN_HEIGHT=empty
WIN_PLUGIN_WIDTH=empty
WIN_PLUGIN_PID=empty
WIN_PLUGIN_CONTROL_KIND=empty
WIN_PLUGIN_TIMEOUT=empty
WIN_PLUGIN_EXEC=empty
WIN_PLUGIN_WORK_DIR=empty
WIN_PLUGIN_ARGS=empty
WIN_PLUGIN_RECTANGLE=empty
WIN_PLUGIN_TITLE=empty
#endregion

#region plugins.fields.swing
SWING_PLUGIN_LOG_LEVEL=empty
SWING_PLUGIN_JRE_EXEC=empty
SWING_PLUGIN_JRE_ARGS=empty
SWING_PLUGIN_MAIN_CLASS=empty
SWING_PLUGIN_JAR=empty
SWING_PLUGIN_ARGS=empty
SWING_PLUGIN_URL=empty
SWING_PLUGIN_TITLE=empty
#endregion

#endregion

#endregion
