#region general
DRAG_N_DROP_LIST_TOOLTIP=""Use drag-n-drop to reorder elements"
DEFAULT=""
#endregion

#//region actions
DEFAULT_OUTPUT_DESCRIPTION="No output value."

#//region actions.app
APP_CONNECTION_NAME_DESCRIPTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to.It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APP_CLOSE_WINDOW_GENERAL_DESCRIPTION=Plug-in dependent action. The purpose of the action is to close the currently active window of the application. When the application is a browser, the action closes the currently active tab.
APP_CLOSE_WINDOW_OUTPUT_DESCRIPTION=Returns the title bar of the window which was closed.
APP_CLOSE_WINDOW_EXAMPLES={{#\n#Id;#Action;#AppConnection\nACW;ApplicationCloseWindow;app\n\n#Assert;#Message\n!Str.IsNullOrEmpty(ACW.Out);'String is null or empty'#}}
APP_CONNECT_TO_GENERAL_DESC=Plug-in dependent action. The purpose of the action is connect to the running application. The action requires some additional parameters which depend on the type of the plug-in used.
APP_CONNECT_TO_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in.For example, the available parameters for win.jar are the following:{{` {{$Main window$}} - a text string to search for the window of the application to connect to.`}}{{` {{$Height$}} - the height of the window.`}} {{` {{$Width$}} - the width of the window.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_CONNECT_TO_OUTPUT_DESC=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. Should be created with an active {{$'Global'$}} flag.
APP_CONNECT_TO_EXAMPLE={{#\n#Id;#Global;#Action;#Browser;#URL;#AppId\napp;1;ApplicationStart;'Chrome';'http://google.com';'WEB'\n\n#Assert;#Message\napp.Out.IsGood();'Connection is not established'#}}
APPLICATION_CONNECT_TO_ID=Adapter key, one of those described in the {{$App entries$}} branch of the configuration, will be used to start the corresponding plug-in and to select the dictionary.
APPLICATION_CONNECT_TO_CONNECTION=A special object which identifies the started application session. In case this parameter is not empty the reconnect is performed.  It is the output value of such actions as {{@ApplicationStart@}}.
APP_GET_PROPERTIES_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to get certain properties from the available connection.
APP_GET_PROPERTIES_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, additional parameters {{$Title$}} and {{$URL$}} are available for web plug-in. They are necessary to get the information about the title bar and the address respectively.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_GET_PROPERTIES_OUTPUT_DESC=Associative array which displays the names of the elements processed by the action along with prpperties received from the app.
APP_GET_PROPERTIES_EXAMPLE={{#\n#Id;#Action;#URL;#AppConnection\nAGP1;ApplicationGetProperties;;app\n\n#Assert;#Message\n!Str.IsNullOrEmpty(AGP1.Out.URL);'String is null or empty'#}}
APPLICATION_GET_PROPERTIES_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to.It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APP_MOVE_GENERAL_DESC=Plug-in depend action. This action is used for moving the main window
APPLICATION_MOVE_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APPLICATION_MOVE_X=The X coordinate for move window.
APPLICATION_MOVE_Y=The Y coordinate for move window
APP_NAVIGATE_GENERAL_DESC=Navigate inside application.
APP_NAVIGATE_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, an additional parameter {{$Navigate$}} is available for web plug-in. It has two values {{$BACK$}} and {{$FORWARD$}} which help to move within the browser back and forward respectively.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_NAVIGATE_EXAMPLE={{#\n#Action;#Navigate;#Navigate;#AppConnection\nApplicationNavigate;NavigateKind.BACK;NavigateKind.FORWARD;app#}}
APPLICATION_NAVIGATE_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APPLICATION_NAVIGATE_KIND=Where navigate. See additional field description
APP_NEW_INSTANCE_GENERAL_DESC=Plug-in dependent action. The action is used to open new windows in the web browser.
APP_NEW_INSTANCE_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. For example, the available parameters for win.jar are the following: {{` {{$URL$}} - string. It defines the URL.`}} {{` {{$Browser$}} - string. It defines which browser should be launched.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_NEW_INSTANCE_EXAMPLE={{#\n#Id;#Action;#Browser;#URL;#AppConnection\nAPPNI1;ApplicationNewInstance;'Chrome';'http://google.com';app#}}
APPLICATION_NEW_INSTANCE_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APP_REFRESH_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to refresh the application window. It should be used only with web plug-in.
APP_REFRESH_EXAMPLE={{#\n#Action;#AppConnection\nApplicationRefresh;app\n#}}
APPLICATION_REFRESH_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APP_RESIZE_GENERAL_DESC=The purpose of the action is to change the window size of the application under test.
APP_RESIZE_EXAMPLE=Example 1.{{#\n#Action;#AppConnection;#Width;#Height\nApplicationResize;app;1000;1000\n#}} \nExample 2.{{#\n#Action;#Maximize;#AppConnection\nApplicationResize;true;app\n#}}
APPLICATION_RESIZE_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APPLICATION_RESIZE_HEIGHT=The window height is changed to the specified height.
APPLICATION_RESIZE_WIDTH=The window width is changed to the specified width.
APPLICATION_RESIZE_RESIZE=Type of resizing. Must be Resize.Maximize, Resize.Minimize or Resize.Normal
APP_SET_PROPERTIES_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to set certain properties into the available connection.
APP_SET_PROPERTIES_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, additional parameters {{$CookieAdd$}} and {{$CookieRemove$}} are available for web plug-in. They are necessary to add and to remove a cookie respectively.`}} The parameters can be chosen in the dialoguewindow opened with the context menu of this action in {{$'All parameters'$}} option.
APP_SET_PROPERTIES_EXAMPLE={{#\n#Id;#Action;#CookieRemove\nAGP1;ApplicationGetProperties;'name'\n\n#Assert;#Message\nAGP1.Out.CookieRemove;'Cookie was not removed'#}}
APPLICATION_SET_PROPERTIES_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to.It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APP_START_GENERAL_DESC=The purpose of the action is to launch the application under test. The type of the application is determined by the chosen plug-in (see also {{@GUI plug-ins@}}). The action requires some additional parameters, which depend on the type of the plug-in used. The parameters are not mandatory from the standpoint of the tool itself, but they are required for the plug-in to launch the application correctly.
APP_START_ADDITIONAL_DESC=The structure and meaning of parameters depend on the plug-in used. For example, web.jarrequires the following list{{` {{$Browser$}} - the browser in which the web application is started, `}{{` {{$URL$}} - the Internet link to the application server. `}In order to avoid errors in writing these additional parameters, the user can add them by usingthe matrices editor accessible via the 'All parameters...' context menu after the {{$AppId$}} parameterhas been filled (and is filled by the constant string).
APP_START_OUTPUT_DESC=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. For example, in order to shut down the application under test and to free its resources via the {{$ApplicationStop$}} action the user must pass a valid object to this action, which was received from {{$ApplicationStart$}} action.
APP_START_EXAMPLE=As a rule, {{$ApplicationStart$}} is placed in one of the initial TestCases where initialization is performed. Therefore it requires that the {{$Global$}} flag be set, as access to the output value is necessary within the whole matrix rather than just within the {{$TestCase$}} containing the action. {{#\n#Id;#Global;#Action;#AppId;#Browser;#URL\nAPPSTR1;1;ApplicationStart;'WEB';Browser;Env1 #}} It is a standart using this action with web.jar plugin.
APPLICATION_START_APP_ID=Adapter key, one of those described in the App entries branch of the configuration, which will be used for starting the corresponding plug-in and selecting the dictionary. The plug-in, in its turn, will start the application under test using the transferred parameters. If no record is found in a configuration for the corresponding {{$AppId$}}, the action will result in an error.
APP_STOP_GENERAL_DESC=The purpose of the action is to close the application under test. As a rule, ApplicationStop is placed in one of the last TestCases to stop the application initialized in {{@ApplicationStart@}} or {{@ApplicationConnectTo@}}. The flag {{$'Global'$}} (indicated with letter 'G') should be set in actions {{@ApplicationStart@}} or {{@ApplicationConnectTo@}}.
APP_STOP_EXAMPLE={{#\n#Action;#AppConnection\nApplicationStop;app\n#}}
APPLICATION_STOP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APPLICATION_STOP_NEED_KILL=If true, the process will killed
APP_SWITCH_TO_GENERAL_DESC=Plug-in dependent action. The purpose of the action is to switch the focus among windows/tabs of the web application.
APP_SWITCH_TO_ADDITIONAL_DESC=The parameters are determined by the chosen plug-in. {{`For example, additional parameters {{$Title$}} and {{$URL$}} are available for web plug-in. They are necessary to get the information about the title bar and the address respectively.`}} The parameters can be chosen in the dialogue window opened with the context menu of this action in {{$'All parameters'$}} option.
APP_SWITCH_TO_OUTPUT_DESC=It returns the title bar of the window which gained the focus.
APP_SWITCH_TO_EXAMPLE={{#\n#Id;#Action;#Title;#AppConnection\nAST;ApplicationSwitchTo;'Title';app\n#Assert;#Message\nStr.IsNullOrEmpty(AST.Out);'Title is null'#}}
APPLICATION_SWITCH_TO_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
APPLICATION_SWITCH_TO_SOFT_CONDITION=If the parameter value is true, the string in Title will be compared to the window title bar using the 'contains' principle. The window title bar is allowed to have the value of Title field and not to be the same.
#//endregion

#//region actions.tables
TABLE_CREATE_GENERAL_DESC=This action is determined to create a table (object type {{$Table$}}). Object Table is set as the two-dimensional structure consisting of rows and columns. Ordering of Rows starts with 0, columns are named. Object Table can be created with  {{@RawTable@}}, with actions {{@TableCreate@}} , {{@TableLoadFromFile@}} , {{@TableLoadFromDir@}} , {{@TableSelect@}} and method {{@Do.getTable()@}}. {{`|header1|header2|`}} {{`|value1 |value2 |`}} {{`|value1 |value2 |`}} 
TABLE_CREATE_ADDITIONAL_DESC=Additional parameters are used to assign column titles. The value field of parameter is left empty.
TABLE_CREATE_EXAMPLE={{`1.Create a table with columns Name and Age.`}}{{`2. Verify that the created object has columns  set initially.`}}\n{{#\n#Id;#Action;#Name;#Age\nTC;TableCreate;;\n#Assert;#Message\nTC.Out.getHeader(0)=='Name' && TC.Out.getHeader(1)=='Age';'Table isn't correct'#}}\n
TABLE_CREATE_OUTPUT_DESC=Table structure.
TABLE_ADD_COLUMNS_GENERAL_DESC=This action is determined to add columns to the table given. It can be used if a table is created from different sources or if new columns are added to the table given.
TABLE_ADD_COLUMNS_EXAMPLES={{`1. Create a table with column Name.`}}{{`2. Add to the table created column Age (to the line number 0).`}}{{`3. Verify that the table has columns Name and Age. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name\n0;\n#EndRawTable\n#Action;#Index;#Table;#Columns\nTableAddColumns;0;TC;{'Age'}\n#Assert;#Message\nTC.getHeader(0) == 'Name' && TC.getHeader(1) == 'Age';'Table is not correct'#}}
TABLE_ADD_COLUMNS_TABLE=A table which is needed to add columns.
TABLE_ADD_COLUMNS_COLUMNS=Array of column titles' names.
TABLE_ADD_COLUMNS_INDEX=Line number  where it is needed to insert. Numeration starts with 0. By default it will be inserted at end of the table.
TABLE_ADD_VALUE_EXAMPLE={{`1. Create a table with columns Name and Age. Add a value into 0 line to a column Name. A cell in a column Age leave empty.`}}{{`2. Verify that a value in the first line of a column Name is equal 'Mike', Age is equal  null. Column Age is filled with a value null. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;;\n#EndRawTable\n#Action;#Index;#Table;#Name\nTableAddValue;0;TC;'Mike'\n#Assert;#Message\nTC.get(0).get('Name') == 'Mike' && TC.get(0).get('Age') == null;'Not equals'#}}
TABLE_ADD_VALUE_GENERAL_DESC=This action  is determined to add lines to a Table..
TABLE_ADD_VALUE_ADDITIONAL_DESC=Are used to insert values where a parameter name - a column name, a parameter value - a cell value.
TABLE_ADD_VALUE_TABLE=A table where it is needed to add a line. 
TABLE_ADD_VALUE_INDEX=A line index, where a new line is added. If it is a negative value it will be inserted at the end of the table. Numeration starts with 0.
TABLE_COLUMN_AS_LIST_GENERAL_DESC=This action extract one column of a table and returns it as a list of values.
TABLE_COLUMN_AS_LIST_OUTPUT_DESC=List of strings.
TABLE_COLUMN_AS_LIST_TABLE=A table from which the column will be extracted.
TABLE_COLUMN_AS_LIST_COLUMN=Column name which will be extracted.
TABLE_COLUMN_AS_LIST_GET_VALUES=If true get values otherwise get expressions.
TABLE_COLUMN_RENAME_GENERAL_DESC=This action is determined to rename a column in the table given.
TABLE_COLUMN_RENAME_ADDITIONAL_DESC=The column name given is indicated in a parameter's name, a new column name is in a parameter's value.
TABLE_COLUMN_RENAME_EXAMPLE={{`1. Create a table with columns Name and Age.`}}{{`2. Rename column Name into FirstName.`}}{{`3. Verify that a new name is assigned to a column. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;;\n#EndRawTable\n#Action;#Table;#Name\nTableColumnRename;TC;'FirstName'\n#Assert;#Message\nTC.getHeader(0) == 'FirstName';'Values is not equals'#}}
TABLE_COLUMN_RENAME_TABLE=A table where a column / columns are needed to rename.
TABLE_COMPARE_TWO_GENERAL_DESC=This action is determined to compare two tables.
TABLE_COMPARE_TWO_EXAMPLE={{`1. Create a table with columns Name and Age. The first table line is applied with values Mike and 42 accordingly.`}}{{`2. Create a table similar to the previous. The first table line is applied with values Mike and 42 accordingly.`}}{{`3. Compare two tables.`}}Information about distinctions ( line number and columns titles which values do not match) is reported as a result of this action in form of:{{`Differences`}}{{`# Expected Actual`}}{{`0 [ Name : Mike, Age : 42 ] [ Name : Mike, Age : 41 ]`}}{{`Age 42 41`}}{{`If tables have different columns numbers, distinctions in cells will be ignored and information about all columns titles is displayed.`}} {{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n#EndRawTable\n#Id;#RawTable\nTC1;Table\n@;Name;Age\n0;Mike;41\n#EndRawTable\n#Action;#Expected;#Actual\nTableCompareTwo;TC;TC1#}}
TABLE_COMPARE_TWO_OUTPUT_DESC=A table as a result of compare.
TABLE_COMPARE_TWO_ACTUAL=A table which is to be compared.
TABLE_COMPARE_TWO_EXPECTED=A table which is to be compared with.
TABLE_COMPARE_TWO_EXCLUDE=An array of column names, which are excluded out of comparison.
TABLE_COMPARE_TWO_IGNORE_ROWS_ORDER=Ignore row order.
TABLE_COMPARE_TWO_COMPARE_VALUES=If true compare values otherwise compare string representation of values.
TABLE_CONSIDER_COLUMN_AS_GENERAL_DESC=This action is determined  to take string values stored in a table to a certain data type. \nObjects Table are filled with string values by default. It is used in case when it is needed to perform an action with data stored in a table not as a line but as a one type of data given: {{$Integer$}}, {{$String$}}, {{$Boolean$}}, {{$Double$}}, {{$BigDecimal$}}, {{$Date$}}, and also {{$Expression$}} which is used to name cells which include expressions in mvel language. These expressions s will be calculated  when actions TableReport (if parameter ReportValues is used), TableSaveToFile (if parameter SaveValues is used), TableCompareTwo are performed.
TABLE_CONSIDER_COLUMN_AS_EXAMPLE={{`1. Create a table with columns Name and Age, SalaryPerYear and populate it with values.`}}{{`2. Set data type  Integer for column  Age.`}}{{`3. Using action TableSelect select all rows with value more than 25(int) in column Age.`}}{{`4. Verify that TableConsiderColumnsAs is correct. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age;SalaryPerYear\n0;Mike;42;12000 * 12\n1;John;32;25000*12\n2;Fred;21;7000*12\n#EndRawTable\n#Action;#Table;#Integer\nTableConsiderColumnsAs;TC;'Age'\n#Id;#Action;#Table;#Age\nTS;TableSelect;TC;new NumberCondition('Age','>',25)\n#Action;#Expression;#Table\nTableConsiderColumnsAs;'SalaryPerYear';TS.Out\n#Assert;#Message\nTS.Out.size() == 2 && TS.Out.get(0).get('SalaryPerYear') == '144000'#}}
TABLE_CONSIDER_COLUMN_AS_TABLE=A table is needed to be performed.
TABLE_CONSIDER_COLUMN_AS_STRING=Is specified as an array of column names, where it is needed to set data type - String.
TABLE_CONSIDER_COLUMN_AS_BOOLEAN=Is specified as an array of column names, where it is needed to set data type - Boolean.
TABLE_CONSIDER_COLUMN_AS_INTEGER=Is specified as an array of column names, where it is needed to set data type - Integer.
TABLE_CONSIDER_COLUMN_AS_DOUBLE=Is specified as an array of column names, where it is needed to set data type - Double.
TABLE_CONSIDER_COLUMN_AS_BIG_DECIMAL=Is specified as an array of column names, where it is needed to set data type - BigDecimal.
TABLE_CONSIDER_COLUMN_AS_DATE=Is specified as an array of column names, where it is needed to set data type - Date.
TABLE_CONSIDER_COLUMN_AS_EXPRESSION=Is specified as an array of column names, where it is needed to set data type - Expression.
TABLE_CONSIDER_COLUMN_AS_GROUP=Is specified as an array of column names, where it is needed to set data type - Group.
TABLE_CONSIDER_COLUMN_AS_HYPERLINK=Is specified as an array of column names, where it is needed to set data type - Hyperlink.
TABLE_CONSIDER_COLUMN_AS_COLORED=Is specified as an array of column names, where it is needed to set data type - Colored.
TABLE_EDIT_GENERAL_DESC=Edit a table via interaction with a user
TABLE_EDIT_ADDITIONAL_DESC=Values where a parameter name - a table column name, a parameter value - true, if it is allowed to edit.
TABLE_EDIT_EXAMPLE={{#\n#Id;#RawTable\nTC;Table\n@;Name;Age;City\n0;Mike;25;London\n1;Jane;21;Moscow\n2;Ann;19;France\n#EndRawTable\n\n#Action;$Table;$Title;Name;Age;City\nTableEdit;TC;'Title';true;false;true\n\n#Action;$Table;$Title\nTableReport;TC;'table after edit'\n\n #}}
TABLE_EDIT_OUTPUT_DESC=Returns true if the user pushed the button Ok.
TABLE_EDIT_TITLE=Title of user input.
TABLE_EDIT_TABLE=A table which is needed to be edited.
TABLE_GET_ROW_INDEXES_GENERAL_DESC=This action is used for searching a suitable line numbers in the table given. Can be applied when it Is needed to get all indexes of the such lines.
TABLE_GET_ROW_INDEXES_ADDITIONAL_DESC=Columns containing the data which defines the search conditions. Column title is given in the parameter's value. In the value it is needed to specify the content which defines the search.
TABLE_GET_ROW_INDEXES_OUTPUT_DESC=Outputs the index list matching to conditions.
TABLE_GET_ROW_INDEXES_EXAMPLE={{#\n#Id;#RawTable\nTC;Table\n@;Name;Column\n0;Mike;2\n1;John;32\n2;Fred;2\n3;Mike;1\n4;Angel;10\n5;John;40\n#EndRawTable\n\n#Action;$Table;$Integer\nTableConsiderColumnsAs;TC;'Column'\n\n#Id;#Action;$Table;Column;Name\nTBLIDX1;TableGetRowIndexes;TC;new NumberCondition('Column','>',2);'John'\n\n#Assert;#Message\nTBLIDX1.Out == [1,5];\n\n#}}
TABLE_GET_ROW_INDEXES_TABLE=The table in which row is searched
TABLE_LEFT_JOIN_GENERAL_DESC=This action is determined to join tables as in SQL Left Join.
TABLE_LEFT_JOIN_ADDITIONAL_DESC=Additional parameters are used to assign column titles.
TABLE_LEFT_JOIN_OUTPUT_DESC=Table structure.
TABLE_LEFT_JOIN_EXAMPLE={{`1. Create a table with columns Name and Language. Populate it with few rows.`}}{{`2. Create a table with columns Name and CityId. Populate it with few rows.`}}{{`3. Use Left Join choosing rows from the first table on condition: matching column Name. `}}{{#\n#Id;#RawTable\nCity;Table\n@;id;Name;Language\n0;1;London;us\n1;2;Moscow;ru\n2;3;France;fr\n#EndRawTable\n\n#Id;#RawTable\nPerson;Table\n@;Name;CityId\n0;Andrey;1\n1;Victor;2\n2;Aleksander;1\n3;Valery;4\n4;Kate;3\n#EndRawTable\n\n#Id;#Action;$Condition;$LeftTable;$LeftAlias; \n $RightTable;$RightAlias;CityName;Language\nTBLJN1;TableLeftJoin;'person.CityId == city.id'; \n Person;'person';City;'city';'city.Name';'city.Language'\n\n#Action;$Table;$Title\nTableReport;TBLJN1.Out;'title'#}}
TABLE_LEFT_JOIN_RIGHT_TABLE=Table, which rows are matched according to condition.
TABLE_LEFT_JOIN_LEFT_TABLE=Table, which rows are selected according to condition.
TABLE_LEFT_JOIN_RIGHT_ALIAS=Alias for the right table rows.
TABLE_LEFT_JOIN_LEFT_ALIAS=Alias for the left table rows.
TABLE_LEFT_JOIN_CONDITION=Condition under which row sample is made.
TABLE_LOAD_FROM_DIR_GENERAL_DESC=This action is determined to get directory structure as an object Table. Can be used to check required files in  this directory.
TABLE_LOAD_FROM_DIR_OUTPUT_DESC=Table which consists columns Name, Size, Date, Is directory, Hidden. Each table row contains data corresponding a file/folder in this directory. If it is directed to a null directory or file, an object Table is created without any columns or rows. If it is directed to an empty directory, a table is created with column titles and 0 rows.
TABLE_LOAD_FROM_DIR_EXAMPLE={{`1. Create a table with information about files/folders in directory Home.`}}\n{{#\n#Id;#Action;#Dir\nTBLD1;TableLoadFromDir;System.getProperty('user.home')#}}
TABLE_LOAD_FROM_DIR_DIRECTORY=Path to directory. It's not permitted to use ways with metacharacters (wildcard).
TABLE_LOAD_FROM_FILE_GENERAL_DESC=This action is determined to create a table from file csv. {{`{{$CSV$}} (Comma-Separated Values) - a text format, which is determined to display table data.Specification: Each file row is a table row. The first row contains column titles.`}}
TABLE_LOAD_FROM_FILE_OUTPUT_DESC=If file is not found, object Table is not created.
TABLE_LOAD_FROM_FILE_EXAMPLE={{`1. Get table downloaded from file testTable.csv divided internally with '|'. Verify that table is downloaded correctly.`}}{{#\n#Id;#Action;#Assert;#File;#Delimiter\nTLFF;TableLoadFromFile;TLFF.Out.size() > 0;'PathToFile/testTable.csv';'|'#}}
TABLE_LOAD_FROM_FILE_FILE=Path to file
TABLE_LOAD_FROM_FILE_DELIMITER=Any symbol, which divides values in  file. By default ',' . is accepted.
TABLE_REMOVE_COLUMNS_GENERAL_DESC=This action is determined  to delete columns in a table given. (Object type Table). Can be used to correct the table.
TABLE_REMOVE_COLUMNS_EXAMPLE={{`1. Create a table with columns Name,Age,Gender,Salary`}}{{`2. Delete columns Name, Age, Gender  in a table  given.`}}{{`3.Verify that headings are deleted. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age;Gender;Salary\n0;;;;\n#EndRawTable\n#Action;#Table;#Columns\nTableRemoveColumns;TC;{'Name','Age','Gender'}\n#Assert;#Message\nTC.getHeader(0) == 'Salary';#}}
TABLE_REMOVE_COLUMNS_TABLE=Table, where columns are to be deleted.
TABLE_REMOVE_COLUMNS_COLUMNS=An array of column names to delete.
TABLE_REMOVE_ROW_GENERAL_DESC=This action is used to delete a selected line in a table given.
TABLE_REMOVE_ROW_OUTPUT_DESC=True if removing is successful
TABLE_REMOVE_ROW_EXAMPLE={{` 1. Create a table with columns Name and Age. Add two lines with data to the table. `}}{{` 2. Delete the first line in the table, the line with the index 0. `}}{{` 3. Verify that the first line was deleted and was replaced with the line containing data about Anna. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;25\n1;Anna;20\n#EndRawTable\n#Id;#Action;#Table;#Index\nTBLRR1;TableRemoveRow;TC;0\n#Assert;#Message\nTC.get(0).get('Name') == 'Anna';'Table is not correct'#}}
TABLE_REMOVE_ROW_TABLE=A table where a line needs to be deleted.
TABLE_REMOVE_ROW_ROW=A deletable line number. In case of a negative value the last line will be deleted. Numeration starts with 0.
TABLE_REPLACE_GENERAL_DESC=This action is used to replace cell values if the value is equal to the given one or complies with a regular expression.
TABLE_REPLACE_EXAMPLE={{`1. Create a table with columns Name and Age. Add four lines with data about Mike, Anna, John, Bruce.`}}{{`2. Replace all that comply with Regexp with 'passed'.`}}{{`3. Verify if everything was correct.`}} {{#\n#Id;#RawTable\nTC;Table\n@;Name;Mail\n0;John;c0nst@money.simply.net\n1;Mike;somebody@dev.com.ua\n2;Bruce;Name.Sur_name@gmail.com\n3;Anna;user33@somewhere.in.the.net\n#EndRawTable\n#Id;#Let\nrgxp;'[a-zA-Z]{1}[a-zA-Z\\\\\\\\d\\\\\\\\.\\\\\\\\_]+@([a-zA-Z]+\\\\\\\\.){1,2}((net)|(com)|(org))'\n#Action;#Regexp;#Replace;#Table;#Columns\nTableReplace;rgxp;'passed';TC;'Mail'\n#Assert;#Message\nTC.get(0).get('Mail')=='passed' && TC.get(2).get('Mail')=='passed';'Assert!'#}}
TABLE_REPLACE_TABLE=Table where it is needed to replace values.
TABLE_REPLACE_COLUMNS=Array of column titles where it is needed to change values.
TABLE_REPLACE_REPLACE=Value which replaces.
TABLE_REPLACE_SEARCH=If a cell value or a part of a cell is equal to this value, cell will be replaced. It is ignored if you set Regexp.
TABLE_REPLACE_REGEXP=If a cell value complies with this regular expression it will be replaced.
TABLE_REPLACE_MATCH_CELL=if the value is true, the cell will be replaced, otherwise only the one that complies. It is used only when setting Search parameter and is ignored when setting Regexp.
TABLE_REPORT_GENERAL_DESC=This action is used to output the table to report.
TABLE_REPORT_ADDITIONAL_DESC=Columns containing the data which defines the outgoing columns. Column title is given in the parameter's value. In the value it is needed to specify the new name for table in the report.
TABLE_REPORT_EXAMPLE={{` 1. Create a test case with id Test.`}}{{` 2. Create a table with columns Name and Age. Add values to the first line of the table.`}}{{` 3. Output the table into the report only with the column Age, before the test case with id Test.`}} {{#\n#Id;#TestCase\nTest;\n    #Id;#RawTable\n    TC;Table\n    @;Name;Age\n    0;Mike;25\n    #EndRawTable\n    #Action;#BeforeTestCase;#Table;#Title;#Columns\n    TableReport;'Test';TC;'Table title';{'Age' : 'Age of person'}#}}
TABLE_REPORT_TABLE=A table which is needed to be output into the report.
TABLE_REPORT_TITLE=The title of the output table.
TABLE_REPORT_TO_REPORT=This parameter is used for directing the output from the given object to the external report created by the {{@ReportStart@}} action.
TABLE_REPORT_COLUMNS=Array or map of column titles which is needed to be output into the report.
TABLE_REPORT_WIDTHS=Array of integers which define widht of each column.
TABLE_REPORT_BEFORE_TEST_CASE=Enables to output the table on the highest level of the report.
TABLE_REPORT_REPORT_VALUES=If the value is false, the value from the cell is output, if the value is true the expression result is output. Applicable for the cells of Expression type, see {{@TableConsiderColumnAs@}}.
TABLE_REPORT_WITH_NUMBERS=If the value is true the column with the lines numbers is output.
TABLE_SAVE_TO_FILE_GENERAL_DESC=This action is used to save a table to the file with csv structure. {{`CSV (Comma-Separated Values)`}} is a text format, used for displaying data from the table.Specification: Each line in the file is one line from the table. The first line contains column titles.
TABLE_SAVE_TO_FILE_OUTPUT_DESC=True if saved successfully.
TABLE_SAVE_TO_FILE_EXAMPLE={{` 1. Create a table with columns Name and Age. `}}{{` 2. Add values to the first line of the table. `}}{{` 3. Save the table into the file dest.csv. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;25\n#EndRawTable\n#Id;#Action;#Table;#File\nTSTF;TableSaveToFile;TC;'Path/dest.csv'\n#Assert;#Message\nTSTF.Out;'Table was not saved'#}}
TABLE_SAVE_TO_FILE_TABLE=A table which is needed to be saved to a file
TABLE_SAVE_TO_FILE_FILE_NAME=Path name to a target file where the table will be saved. The name of the file needs to be given with the name suffix
TABLE_SAVE_TO_FILE_DELIMITER=Any character that separates the columns in the file. The default is ','
TABLE_SAVE_TO_FILE_SAVE_VALUES=If the value is false , the value from the cell is saved, if the value is true the expression result is saved. Applicable for the cells of Expression type, see {{@TableConsiderColumnAs@}}.
TABLE_SELECT_GENERAL_DESC=This action is used for extracting lines from the table given and creating a new table with these lines. Can be applied when it Is needed to get only a part of data from the table.Line extracting is done according to the content which is specified in additional parameters.
TABLE_SELECT_ADDITIONAL_DESC=Columns containing the data which defines the selection. Column title is given in the parameter's value. In the value it is needed to specify the content which defines the selection.
TABLE_SELECT_OUTPUT_DESC=Outputs the table containing the selected lines.
TABLE_SELECT_EXAMPLE={{`Example #1:`}}\n{{`1. Create a table with columns Name and Age. Complete the table with 3 lines.`}}\n{{`2. Set the data type  Integer for the column Age.`}}\n{{`3. With the actionTableSelect select all lines with the value 'Mike' in the column Name.`}}\n{{`4. Verify that the size of the table is equal to 1. `}}\n{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n1;John;42\n2;Fred;21\n#EndRawTable\n#Action;#Table;#Integer\nTableConsiderColumnsAs;TC;'Age'\n#Id;#Action;#Table;#Age\nTS;TableSelect;TC;new StringCondition('Name','Mike')\n#Assert;#Message\nTS.Out.size() == 1;#}}\n{{`Example #2:`}}\n{{`1. Create a table with columns Name and Age. Complete the table with 3 lines.`}}\n{{`2. Set the data type  Integer for the column Age.`}}\n{{`3. With the action TableSelect select all lines where the column values Age are more than 20`}}\n{{`4. Verify that the size of the table is equal to 2. `}}\n{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n1;John;34\n2;Fred;21\n#EndRawTable\n#Action;#Table;#Integer\nTableConsiderColumnsAs;TC;'Age'\n#Id;#Let\ncondition; new AndCondition(new NumberCondition('Age','>',20))\n#Id;#Action;#Table;#Age\nTS;TableSelect;TC;condition\n#Assert;#Message\nTS.Out.size() == 2;#}}\n
TABLE_SELECT_TABLE=The table from which rows are selected
TABLE_SET_VALUE_GENERAL_DESC=This action is used to set values in the cells of a table given.
TABLE_SET_VALUE_ADDITIONAL_DESC=Set values for all cells in the line given. Each parameter name sets the column title, where the value is set. The value if a corresponding parameter sets the value of the column.
TABLE_SET_VALUE_EXAMPLE={{`1. Create a table with columns Name and Age. Add values to the first line of the table.`}}{{`2. Set the value for the columns Name and Age 'John' and '42' in the first line.`}}{{`3. Verify that the new values were inserted correctly. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;25\n#EndRawTable\n#Action;#Table;#Index;#Name;#Age\nTableSetValue;TC;0;'John';'42'\n#Assert;#Message\nTC.get(0).get('Name') == 'John'&& TC.get(0).get('Age') == '42';#}}
TABLE_SET_VALUE_TABLE=Table which is needed to be changed
TABLE_SET_VALUE_INDEX=Line number where it is needed to set the value. Numeration starts with 0.
TABLE_SORT_GENERAL_DESC=This action is used to sorting the table by the column given.
TABLE_SORT_OUTPUT_DESC=Restores the original but sorted table.
TABLE_SORT_EXAMPLE={{` 1. Create a table with columns Name and Age. Complete the table with 3 lines.`}}{{`2. Do top-down sorting in  Age.`}}{{`3. Output the sorted table to report. `}}{{#\n#Id;#RawTable\nTC;Table\n@;Name;Age\n0;Mike;42\n1;John;57\n2;Anna;21\n#EndRawTable\n#Action;#Ascending;#ColumnName;#Table\nTableSort;false;'Age';TC\n#Action;#Table;#Title\nTableReport;TC;'Table title'#}}
TABLE_SORT_TABLE=Sorted table.
TABLE_SORT_COLUMN_INDEX=Column title that defines the table sorting.
TABLE_SORT_ASCENDING="Sorting type: true - ascending sorting, false - descending sorting. By default is true.
TABLE_SORT_IGNORE_CASE=If this ignoreCase is true - sorting will ignore case. Available only for strings
TABLE_UNION_GENERAL_DESC=This action is used to add all lines from one table  to the end of another one. With the table merge, Main Table columns have priority, that means that merging with the table with more columns extra ones will be ignored. In case of adding the table with not enough columns from the main one, the values in such columns will be null.
TABLE_UNION_EXAMPLE={{#\n#Id;#RawTable\nmain;Table\n@;Name;Age;Gender\n0;Mike;42;Male\n1;Anna;21;Female\n#EndRawTable\n\n#Id;#RawTable\nadditional;Table\n@;Name;Age\n0;Fred;28\n1;Carl;10\n#EndRawTable\n\n#Action;$UnitedTable;$MainTable\nTableUnion;additional;main\n\n#Action;$Table;$Title\nTableReport;main;'dfdf'\n\n#Id;#RawTable\nexpected;Table\n@;Name;Age;Gender\n0;Mike;42;Male\n1;Anna;21;Female\n2;Fred;28;\n3;Carl;10;\n#EndRawTable\n\n#Id;#Action;$Expected;$Actual\nTBLCMP1;TableCompareTwo;expected;main\n\n#}}
TABLE_UNION_MAIN_TABLE=Table where lines will be added.
TABLE_UNION_UNITED_TABLE=Table with the lines that will be added to the main one
#//endregion

#//region actions.client
CLIENT_CHECK_FIELDS_GENERAL_DESC=The purpose of the action is to check message fields against the field set dictionary of the client. Start of the client is not mandatory.
CLIENT_CHECK_FIELDS_OUTPUT_DESC=True, if the message is correct.
CLIENT_CHECK_FIELDS_EXAMPLE={{`1.Load the client for FIX.`}}{{`2.Create a message type FIX with a set key-value.`}}{{`3.Check the message.`}} {{#\n #Id;#Action;$ClientId\nCLLD1;ClientLoad;'FIX'\n\n#Id;#Action;PartyID;PartyIDSource;PartyRole;$MessageType\nMSGCR1;MessageCreate;'test';'1';3;'35'\n\n#Id;#Action;#Assert;$MapMessage;$ClientConnection\nCLCHM1;ClientCheckFields;This.Out == true;MSGCR1.Out;CLLD1.Out#}}
CLIENT_CHECK_FIELDS_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_CHECK_FIELDS_MESSAGE=The message that is required to check.
CLIENT_CHECK_MESSAGE_GENERAL_DESC=The purpose of the action is to compare the message type MapMessage with the field set type key-value. MapMessage is the output value of actions: {{@ClientCreateMapMessage@}}, {{@ClientDecode@}}, {{@ClientGetMessage@}}, {{@ClientSendMessage@}}. In the report a chart will be formed with the headline the Mismatched fields: consisting of columns {{$Name$}} and {{$Expected$}} + {{$Actual$}}. In the case of inequality in the compared fields the MapMessage action fails. Start of the client is not mandatory.
CLIENT_CHECK_MESSAGE_ADDITIONAL_DESC=In additional parameters, the names and values which should be compared with MapMessage, which is passed in parameter {{$ActualMessage$}}, are pointed out.
CLIENT_CHECK_MESSAGE_EXAMPLE={{`1. Load the client for FIX`}}{{`2. Create a message type FIX with a set key-value.`}}{{`3. Check the message.`}} {{##Id;#Action;$ClientId\nCLLD1;ClientLoad;'TestClient'\n\n#Id;#Action;Address;Port;$ClientConnection\nCLSTRT1;ClientStart;'127.0.0.1';13000;CLLD3.Out\n\n#Id;#Action;PartyID;PartyIDSource;PartyRole;$MessageType\nMSGCR1;MessageCreate;'test';'1';3;'35'\n\n#Id;#Action;PartyID;$ActualMessage;$ExpectedMessageType;$ClientConnection\nCLMSGCHK1;ClientCheckMessage;'test';MSGCR1.Out;'35';CLLD1.Out#}}
CLIENT_CLEAR_MESSAGES_GENERAL_DESC=The purpose of the action is to clear the list of all accepted client messages. Start of the client is not mandatory.
CLIENT_CLEAR_MESSAGES_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Clear the list of the client messages.`}} {{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n\n#Id;#Action;#ClientConnection\nCLCLM1;ClientClearMessages;CLLD1.Out#}}
CLIENT_CHECK_MESSAGE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_CHECK_MESSAGE_ACTUAL=The message that is required to compare.
CLIENT_CHECK_MESSAGE_MESSAGE_TYPE=The message type that is expected.
CLIENT_CLEAR_MESSAGES_CONNECTION=The connection with the client, which is derived from the action {{@ClientLoad@}}.
CLIENT_CONNECT_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Connect the client to the port #10506.`}}{{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n\n#Id;#Action;#ClientConnection;#Socket\nCLCNCT1;ClientConnect;CLLD1.Out;10506#}}
CLIENT_CONNECT_ADDITIONAL_DESC=Parameters for  the client run are indicated.
CLIENT_CONNECT_OUTPUT_DESC=True, if the connection was successful.
CLIENT_CONNECT_GENERAL_DESC=The purpose of the action is to connect the client to the specific socket. Usually the number of the socket comes from the service.\nLater the client will bring in and send messages through this socket.
CLIENT_CONNECT_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_CONNECT_SOCKET=The port that will use the client.
CLIENT_COUNT_MESSAGES_GENERAL_DESC=The purpose of the action is to count the messages, which field set responds to the reported condition. Simple comparison conditions are passed in additional parameters. Complicated comparison conditions are indicated in the parameter Conditions.
CLIENT_COUNT_MESSAGES_OUTPUT_DESC=The number of messages which meet the requirements.
CLIENT_COUNT_MESSAGES_ADDITIONAL_DESC=In the name of the parameter the key is indicated, in the option setting the predicted value is indicated.
CLIENT_COUNT_MESSAGES_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Count the number of messages with the field name Name and  the field value Value.`}} {{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n\n#Id;#Action;#ClientConnection;#MessageType;#Name\nCLCNT1;ClientCountMessages;CLLD1.Out;'35';'Value'#}}
CLIENT_COUNT_MESSAGES_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_COUNT_MESSAGES_MESSAGE_TYPE=Message type. Use * for any type of messages.
CLIENT_COUNT_MESSAGES_CONDITIONS=The conditions in which the comparison will be carried out.
CLIENT_DECODE_GENERAL_DESC=The purpose of the action is for  the message decode. Converts the massive byte in the message. Start of the client is not mandatory.
CLIENT_DECODE_OUTPUT_DESC=Converted message.
CLIENT_DECODE_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Create the message.`}}{{`3. Encode the message.`}}{{`4. Decode the message.`}} {{##Id;#Action;$ClientId\nCLLD1;ClientLoad;'FIX'\n\n#Id;#Action;PartyID;$MessageType\nMSGCR1;MessageCreate;'test';'35'\n\n#Id;#Action;$MapMessage;$ClientConnection\nCLENC1;ClientEncode;MSGCR1.Out;CLLD1.Out\n\n#Id;#Action;$Array;$ClientConnection\nCLDEC1;ClientDecode;CLENC1.Out;CLLD4.Out#}}
CLIENT_DECODE_ARRAY=A massive byte which is required to convert in MapMessage.
CLIENT_DECODE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_ENCODE_GENERAL_DESC=The purpose of the action is to encode the message. It converts the message in a massive byte. Start of the client is not mandatory.
CLIENT_ENCODE_OUTPUT_DESC=Array of bytes.
CLIENT_ENCODE_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Create the message.`}}{{`3. Encode the message.`}} {{##Id;#Action;$ClientId\nCLLD;ClientLoad;'FIX'\n\n#Id;#Action;PartyID;$MessageType\nMSGCR1;MessageCreate;'test';'35'\n\n#Id;#Action;$MapMessage;$ClientConnection\nCLENC1;ClientEncode;MSGCR1.Out;CLLD.Out#}}
CLIENT_ENCODE_MESSAGE=The object type MapMessage, which is required to convert in a massive byte.
CLIENT_ENCODE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_GET_MESSAGE_GENERAL_DESC={{`The purpose of the action is to get the message, which conforms the required condition. The search of the message takes place in the message queue. If the message with the required conditions wasn't found, the search starts from the beginning of the queue because during the search new messages can appear in the queue.`}}{{`The search happens during the specified period of time, if the message is not found upon the expiry of time, the action fails.`}}
CLIENT_GET_MESSAGE_ADDITIONAL_DESC=Values, in accordance with which the search of the message will happen.
CLIENT_GET_MESSAGE_OUTPUT_DESC=The message or error, if the message was not found within the time limit.
CLIENT_GET_MESSAGE_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Find the message with the value Value and name Name.`}} {{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n\n#Id;#Action;#ClientConnection;#MessageType;#Name\nCLGM1;ClientGetMessage;CLLD1.Out;'35';'Value'#}}
CLIENT_GET_MESSAGE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_GET_MESSAGE_MESSAGE_TYPE=The type of the message. Use * for any type of messages.
CLIENT_GET_MESSAGE_CONDITIONS=The conditions upon which the message will be checked.
CLIENT_GET_MESSAGE_TIMEOUT=The time which is given to find the acceptable message.
CLIENT_GET_MESSAGE_REMOVE=Delete the found message.
CLIENT_LOAD_GENERAL_DESC=The purpose of the action is to load,initialize and get the connection with the Client.Later, the received connection is used in such actions as {{@ClientStart@}}, {{@ClientStop@}}, {{@ClientDecode@}} and etc. Clients represent the entity which performs functions in respect of client- server. The client can send and get messages through received TCP connection.
CLIENT_LOAD_OUTPUT_DESC=The connection with the Client.
CLIENT_LOAD_EXAMPLE={{`Load the client for FIX.`}} {{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'#}}
CLIENT_LOAD_ID=Id of the Client, with which the connection should be made.
CLIENT_SEND_MAP_MESSAGE_GENERAL_DESC=The purpose of the action is to send messages through a made connection. The start of the client is mandatory. It is targeted at converting messages for specified type and its sending.
CLIENT_SEND_MAP_MESSAGE_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Create the message with the help of MessageCreate method.`}}{{`3. Connect to the port #13000.`}}{{`4. Send the created message, test it preliminarily with the indication of CHECK - true in the  parameter.`}}{{##Id;#Action;$ClientIdCLLD1;ClientLoad;'FIX'#Id;#Action;PartyID;$MessageTypeMSGCR1;MessageCreate;'qpwoei';'35'#Id;#Action;Address;Port;$ClientConnectionCLSTRT1;ClientStart;'127.0.0.1';13000;CLLD3.Out#Id;#Action;$Check;$MapMessage;$ClientConnectionCLSMM1;ClientSendMapMessage;true;MSGCR1.Out;CLLD1.Out#}}
CLIENT_SEND_MAP_MESSAGE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_SEND_MAP_MESSAGE_MESSAGE=Message that is required to send.
CLIENT_SEND_MAP_MESSAGE_CHECK=Validation message check before sending. As a default true.
CLIENT_SEND_MESSAGE_GENERAL_DESC=The purpose of the action is to create and send the message. The start of the client is mandatory.
CLIENT_SEND_MESSAGE_OUTPUT_DESC=The message which was created and sent.
CLIENT_SEND_MESSAGE_ADDITIONAL_DESC=In additional parameters name and values set is indicated which will be converted into the message type which is typical for the client.
CLIENT_SEND_MESSAGE_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Connect to the port #10555.`}}{{`3. Create and send the message, check it beforehand with the indication of CHECK - true in the  parameter.`}}{{##Id;#Action;$ClientId\nCLLD1;ClientLoad;'TestClient'\n#Id;#Action;Address;Port;$ClientConnection\nCLSTRT1;ClientStart;'127.0.0.1';10555;CLLD1.Out\n#Id;#Action;$Check;PartyID;$ClientConnection;$MessageType\nCLSM1;ClientSendMessage;true;'test';CLLD1.Out;'35'#}}
CLIENT_SEND_MESSAGE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_SEND_MESSAGE_MESSAGE_TYPE=The type of the created message.
CLIENT_SEND_MESSAGE_CHECK=Checks the validation before the message sending. As a default true.
CLIENT_SEND_RAW_MESSAGE_GENERAL_DESC=The purpose of the action is to send an array of bytes through a made connection without any preprocessing. The start of the client is mandatory.
CLIENT_SEND_RAW_MESSAGE_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Connect to the port #10555.`}}{{`3. Create and send the raw message.`}} {{##Id;#Let\nstr;'8=FIXT.1.1|9=91|35=A|34=1|49=SenderCompID|52=20170426-08:25:00.002'\n#Id;#Let\nstr;str + '|56=TargetCompID|98=0|108=1|141=Y|1137=9|10=131|'\n#Id;#Let\nbytes;str.replace('|', '\\001').getBytes()\n#Id;#Action;$ClientId\nCLLD1;ClientLoad;'FIX'\n#Id;#Action;$ClientConnection;$Socket\nCLCNCT1;ClientConnect;CLLD1.Out;10555\n#Id;#Action;$ClientConnection;$Data\nCLSRM1;ClientSendRawMessage;CLLD1.Out;bytes#}}
CLIENT_SEND_RAW_MESSAGE_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_SEND_RAW_MESSAGE_DATA=Array of bytes that will be sent 'as is'.
CLIENT_SET_PROPERTIES_GENERAL_DESC=The purpose of the action is to set properties to the client. The following properties are available: {{$SenderCompID$}}, {{$TargetCompID$}}, {{$MsgSeqNum$}}.
CLIENT_SET_PROPERTIES_ADDITIONAL_DESC=In the value of the additional parameter the name of the property is indicated, in the parameter  value the property value is pointed out.
CLIENT_SET_PROPERTIES_EXAMPLE={{`1. Load the client for FIX`}}{{`2. Set the propertyName the value Value`}} {{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n#Id;#Action;#ClientConnection;#Name\nCLSP1;ClientSetProperties;CLLD1.Out;'Value'#}}
CLIENT_SET_PROPERTIES_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
CLIENT_START_GENERAL_DESC=The purpose of the action is to start the client. It establishes the connection with the remote service, by using the mentioned address and the port, receives messages and adds them in the queue. If in the customer setting the parameter UseHeartBeat is shown as true, then in the queueing the client will automatically send  the heart beat with the interval, which is also mentioned in the parameters of the client.
CLIENT_START_OUTPUT_DESC=True, if the client started successfully.
CLIENT_START_ADDITIONAL_DESC=As additional parameters, parameters with the names Address and Port are indicated, in the value of which, correspondingly the address and the service port are indicated, with which the connection is required.
CLIENT_START_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Start the client.`}}{{##Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n#Id;#Action;#ClientConnection\nCLSTRT1;ClientStart;CLLD1.Out#}}
CLIENT_START_CONNECTION=The connection with the client, which is derived from the action ClientLoad
CLIENT_STOP_GENERAL_DESC=The purpose of the action is to stop connectivity break with the service. The start of the client is mandatory.
CLIENT_STOP_EXAMPLE={{`1. Load the client for FIX.`}}{{`2. Start the client.`}}3. Stop the client.{{#\n#Id;#Action;#ClientId\nCLLD1;ClientLoad;'FIX'\n#Id;#Action;#ClientConnection\nCLSTRT1;ClientStart;CLLD1.Out\n#Id;#Action;#ClientConnection\nCLSTP1;ClientStop;CLLD1.Out#}}
CLIENT_STOP_CONNECTION=The connection with the client, which is derived from the action ClientLoad.
#//endregion

#//region actions.gui
DESKTOP_SCREENSHOT_GENERAL_DESC=The purpose of the action is to capture the full screenshot along with the desktop.\nThis gives the user the advantage to see system notifications of third-party applications.  The disadvantage is that the screenshot is captured on the 'upper layer', i.e the events/windows overlapped by other windows will not be seen.
DESKTOP_SCREENSHOT_OUTPUT_DESC=An image which is grabbed from the desktop.
DESKTOP_SCREENSHOT_EXAMPLE={{##Id;#Action;#Description\nDSK1;DesktopScreenshot;'My desktop'#}}\n
DESKTOP_SCREENSHOT_DESCRIPTION_PARAM=The description of the image which will be displayed in tooltip.
DIALOG_ALERT_GENERAL_DESC=The purpose of this action is to process pop-up notifications.\nIt is a plug-in dependent action currently being used only with web plug-in.
DIALOG_ALERT_OUTPUT_DESC=Output value is the notification heading.
DIALOG_ALERT_EXAMPLE={{`1. Type 'hello' in the pop-up notification field`}}{{`2. Ensure we have the notification heading as an output value.`}}{{##Id;#Action;#Text;#Perform;#AppConnection\nDLGALRT1;DialogAlert;'hello';PerformKind.Accept;APPSTR1.Out\n#Assert;#Message\nDLGALRT1.Out != null;#}}
DIALOG_ALERT_APP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
DIALOG_ALERT_PERFORM_KIND=The PerformKind type. The parameter responsible for actions with alert.  There are 3 states to the parameter:\nNothing - ignore the notification.\nAccept - click 'OK'.\nDismiss - click 'Cancel'.
DIALOG_ALERT_TEXT=Used to input text in the corresponding field of notification.
DIALOG_CHECK_LAYOUT_GENERAL_DESC=The following action is needed to check the structure of elements of the dialogue in the form. It helps to verify a reorganization of the forms of agile applications forms. For example, a change of resolution, screen layout (vertical/horizontal) etc. You can also verify adjusting of elements relative to one another, visibility of elements, and their sizes. The action uses it's dictionary in which forms, their elements and algorithms for finding them on the screen are described. The chosen application 'knows' about its' dictionary and allows to operate interactively with it - to choose a dialogue from the list and to choose those elements that will be used by the user via the context menu 'All parameters'. When you run this action, it gets the information related to the dictionary from the connection with the application (AppConnection). Running of the action starts with processing section 'OnOpen' of the chosen dialogue. If there are some elements in this section, the action will be applied to all of them one by one by default. Usually element Wait is found here, that waits for the main container of the form to appear on the screen. In some cases (when a user is sure that there is a form on the screen, processing of this section can be turned off by setting parameter DoNotOpen in true). This parameter has value false by default. The same happens when closing the form - section OnClose is processed. Usually element Wait is found here, that waits for the main container of the form to become invisible. It is possible to stop processing this section by setting parameter DoNotClose. The main work is done in section of the dictionary Run of the dialogue. All identified elements (that have attribute Id) from this section can be used when dealing with DialogCheckLayout. A name of the element is set as a name of the parameter. Elements of the form are processed according to this action. If an element is not virtual (for example, Wait), it should be found on the screen, then its' sequence that was set by the parameter is processed. Action DoSpec is specified in the parameter. For example, DoSpec top('Element1', 10) means that Element1 is10px higher than the known one.
DIALOG_CHECK_LAYOUT_APP_CONNECTION=The application connection.
DIALOG_CHECK_LAYOUT_DIALOG=A name of the dialog.
DIALOG_CHECK_LAYOUT_DO_NOT_OPEN=Do not open a new dialog.
DIALOG_CHECK_LAYOUT_DO_NOT_CLOSE=Do not close a dialog.
DIALOG_CHECK_LAYOUT_FIELDS=Map of control name : control operation.
DIALOG_CHECK_LAYOUT_TABLE=Table with DoSpec operations
DIALOG_CLOSE_GENERAL_DESC=The purpose of the action is to close the dialogs. The dialog to be closed needs to be described in the Close section of the dictionary. When working with swing and win plug-ins, Dialogs can be closed without being described in the Close section because there is a capability to programmatically close the window. In web the elements can't be closed programmatically and require direct handling.
DIALOG_CLOSE_OUTPUT_DESC=The number of dialogs closed.
DIALOG_CLOSE_EXAMPLE={{`1. Start the web application.`}}{{`2. Close all the elements described in the Close section of MyDialog.`}}{{`3. Check the number of closed elements.`}}{{##Id;#Action;#Browser;#URL;#AppId\nAPPSTR1;ApplicationStart;'Chrome';'https://google.com';'WEB'\n#Id;#Action;#Dialog;#AppConnection\nDLGCLS1;DialogClose;'MyDialog';APPSTR1.Out\n#Assert;#Message\nDLGCLS1.Out > 0;'0 elements was closed'#}}
DIALOG_CLOSE_APP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
DIALOG_CLOSE_DIALOG=The name of the Dialog whose Close section has the descriptions of elements to be closed.
DIALOG_FILL_GENERAL_DESC=The purpose of this action is to work with control elements on the screen of the application under test.  With its help the user can fill in the text boxes of the forms, manage the mouse and the keyboard and also get some parameters from the elements of the forms (names, attributes etc.) The action uses the dictionary containing the descriptions of forms, its elements and the rules for finding those elements on the screen.  In matrix editor this action can help to choose the elements which need to be dealt with from the dictionary.  For this, the user should choose 'Default app' on the Matrix editor control panel. The chosen application 'is aware' of its dictionary and allows to work with it interactively by choosing a dialog from the list or indicating the elements to work with through 'All parameters' context menu for the specified dialog.  The elements can be of different types - buttons, text boxes, menus, table etc.  Each type of element can process only the operations pertaining to it.  Buttons can be clicked, but not filled with text, for example.  Besides, for each element the action is set by default. While being launched, the action draws the information about the dictionary from the connection with the application (AppConnection). The action's work starts with processing the 'OnOpen' section of the chosen dialog.  If there are some elements in this section then the default action will be performed for all of them one after another.  Usually the Wait element is found here which waits for the main container of the form to appear on the screen.  This allows to make sure the elements of the form are available for work.  In some cases - when the user is sure that the form is on the screen - the processing of this section can be canceled by setting DoNotOpen parameter in true.  By default this parameter has false value.  The same mechanism works when closing the form - the OnClose section is processed.  Usually it contains the Wait element which waits for the form's container to become invisible.  Processing of this section can be forbidden with DoNotClose parameter. Most work is performed with the Run section of the dialog in the dictionary.  All named elements (with ID attribute set) from this section can be used when working with DialogFill. The name of the element is set as parameter name.  The form's elements are processed in the order used in this action.  If the element is not virtual (like Wait), then it is first searched for on the screen and then the sequence of operations is performed, defined by the value of the parameter. The same element can be met several times.  For instance, you can click the button, input some value in the text field and click the same button again. In general, the expression is a sequence of operations.  There is a class for describing these sequences - Do.  For example Do.click() However, more complex sequences can be built for each element.  For a certain text field one can come up with such sequence: Do.text('test').delay(100).check('test').Here the operations are described in more detail:  [Do] if the expression doesn't represent the sequence of operations then for the specified element its default action is performed.  Therefore text fields can be just given string values which will be modified into a chain Do.text('your text') automatically.  If the value is not necessary for the operation, for example the default action for a button is just clicking, then this value is ignored.
DIALOG_FILL_OUTPUT_DESC=Associative array which displays the names of the elements processed by the action along with values received from the form, for example, as a result of the operation Do.get().If some element in the action was used several times, only the last value will be returned.Expressions are operations with elements.
DIALOG_FILL_EXAMPLE=Parameter names assign names to the elements from Run section of the specified dialog.\nExpressions are operations with elements.
DIALOG_FILL_APP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
DIALOG_FILL_DIALOG=The name of the dialog being processed.
DIALOG_FILL_DO_NOT_OPEN=Do not process the 'OnOpen' section of the dialog from the dictionary.  False by default.
DIALOG_FILL_DO_NOT_CLOSE=Do not process the 'OnClose' section of the dialog from the dictionary.  False by default.
DIALOG_FILL_STOP_ON_FAIL=Stop in case of an error occurring in the processing of another element of this action. Otherwise the element's error code is logged into the output collection of matrix values, but the work of action is not interrupted. True by default.
DIALOG_FILL_FIELDS=Is an associative array which can be used instead of parameters.  Array keys define the elements in the dictionary; the values are operations.  This parameter is designated more for writing frameworks working with dictionaries other than daily work.\n
DIALOG_SWITCH_TO_WINDOW_GENERAL_DESC=The purpose of this action is to switch focus to another application.\nPlug-in dependent action currently being used only with web plug-in.
DIALOG_SWITCH_TO_WINDOW_EXAMPLE={{`1. Start the web application.`}}{{`2. Connect to the desktop application, the window headed WinApp.`}}{{`3. Switch focus back to the MainFrame of the web application, located in MyDialog.`}}{{#\n#Id;#Action;#Browser;#URL;#AppId\nAPPSTR1;ApplicationStart;'Chrome';'https://google.com';'WEB'\n#Id;#Action;#AppId;#Main window\nAPPSTR2;ApplicationConnectTo;'WIN';'WinApp'\n#Action;#Frame;#Dialog;#AppConnection\nDialogSwitchToWindow;'MainFrame';'MyDialog';APPSTR1.Out#}}
DIALOG_SWITCH_TO_WINDOW_APP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
DIALOG_SWITCH_TO_WINDOW_DIALOG=The name of the dialog containing the frame which needs to be connected to. If is absent tool will switch to the parent frame.
DIALOG_SWITCH_TO_WINDOW_FRAME=Frame name to which the focus will be set.
DIALOG_VALIDATE_GENERAL_DESC=The purpose of this action is to check the accessibility of all the elements of the indicated dialog.
DIALOG_VALIDATE_ADDITIONAL_DESC=The name of the additional parameter should contain the ID of the element. The value should contain the expected number of detected elements.
DIALOG_VALIDATE_EXAMPLE={{`1. Connect to the web application.`}}{{`2. Check the accessibility of all elements described in MyDialog.`}}{{#\n#Id;#Action;#Browser;#URL;#AppId\nAPPSTR1;ApplicationStart;'Chrome';'https://google.com';'WEB'\n#Action;#Dialog;#AppConnection\nDialogValidate;'MyDialog';APPSTR1.Out#}}
DIALOG_VALIDATE_APP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
DIALOG_VALIDATE_DIALOG=The dialog whose elements need to be checked for accessibility.
DIALOG_VALIDATE_DO_NOT_OPEN=When true is set, the operations indicated in 'On open' section of the current dialog are performed.  False by default.
DIALOG_VALIDATE_DO_NOT_CLOSE=When true is set, the operations indicated in 'On close' section of the current dialog are performed.  False by default.
IMAGE_GET_GENERAL_DESC=The purpose of this action is to get the screenshot of the started application. Without setting optional parameters the screenshot of the whole application is made. When setting the Dialog parameter, the screenshot of the first element of 'Self' section is made. When setting the Dialog and Name parameters, the screenshot of the element indicated in Name is made.
IMAGE_GET_OUTPUT_DESC=An image which is grabbed from the screen.
IMAGE_GET_EXAMPLE={{`1. Make the screenshot of the logo element located in MyDialog.`}}{{#\n#Id;#Action;#Description;#Dialog;#Name;#AppConnection\nIMGGET1;ImageGet;'Chrome screenshot';'MyDialog';'logo';App#}}
IMAGE_GET_APP_CONNECTION=A special object which identifies the started application session. This object is required in many other actions to specify the session of the application the indicated action belongs to. It is the output value of such actions as {{@ApplicationStart@}}, {{@ApplicationConnectTo@}}.
IMAGE_GET_DIALOG=The name of the dialog.
IMAGE_GET_NAME=The name of the element.
IMAGE_GET_DESCRIPTION=The description of the image which will be displayed in tooltip.
IMAGE_GET_X1=X coordinate is for left upper corner
IMAGE_GET_Y1=Y coordinate is for left upper corner
IMAGE_GET_X2=X coordinate is for right bottom corner
IMAGE_GET_Y2=Y coordinate is for right bottom corner
IMAGE_REPORT_GENERAL_DESC=The purpose of this action Is to place the generated image in the report.
IMAGE_REPORT_OUTPUT_DESC=Path to image.
IMAGE_REPORT_EXAMPLE={{`1. Start the application.`}}{{`2. Capture the whole application.`}}{{`3. Create new report.`}}{{`4. Send the generated image to the new report.`}}{{#\n#Id;#Action;#Browser;#URL;#AppId\nAPPSTR1;ApplicationStart;'Chrome';'https://google.com';'WEB'\n#Id;#Action;#AppConnection\nIMGGET1;ImageGet;APPSTR1.Out\n#Id;#Action;#ReportName\nREP1;ReportStart;'New Report'\n#Id;#Action;#Image\nIMGRPT1;ImageReport;IMGGET1.Out#}}
IMAGE_REPORT_IMAGE=The image to be placed in the report.
IMAGE_REPORT_TO_REPORT=The Report object which will include the indicated image is specified. Report is an  an output value of the ReportStart action.
IMAGE_REPORT_BEFORE_TESTCASE=Enables to output the table on the highest level of the report.
IMAGE_REPORT_TITLE=The title of the image.
IMAGE_REPORT_AS_LINK=Instead of the image the link to it is generated in the report.
IMAGE_SAVE_GENERAL_DESC=The purpose of this action is to save the image.
IMAGE_SAVE_OUTPUT_DESC=Full path to file
IMAGE_SAVE_EXAMPLE={{`1. Connect to web application`}}{{`2. Get the images of the whole application.`}}{{`3. Save the file to the user's home directory.`}}{{#\n#Id;#Action;#Browser;#URL;#AppId\nAPPSTR1;ApplicationStart;'Chrome';'https://google.com';'WEB'\n#Id;#Action;#AppConnection\nIMGGET1;ImageGet;APPSTR1.Out\n#Id;#Action;#Dir;#Image\nIMGSV1;ImageSave;currentUser/home;IMGGET1.Out#}}
IMAGE_SAVE_IMAGE=The object of the Image type which needs to be saved.
IMAGE_SAVE_DIR=Directory where the file should be saved.  In this case the filename will be generated.
IMAGE_SAVE_FILE=The path to the file where the image will be saved.
#//endregion

#//region actions.matrix
MATRIX_RUN_GENERAL_DESC=The purpose of the action is to run a Matrix from a file. An execution context is created for the run matrix, so as matrices do not cross under the run. The run matrix creates its own status report. The run matrix uses the same output console as the triggering one. Otherwise, messages sent by action {{@Print@}} would be invisible. To pass some value to the run matrix, {{$Parameter$}} should be used. To pass several values at once, they should be bulked, for example, in Map. In the started matrix to access this value use public variable with the predefined name {{$Parameter$}}.
MATRIX_RUN_OUTPUT_DESC=A special object which identifies the started matrix. This object is required for {{@MatrixWait@}} action to wait when the started matrix stops. With the help of this object property one can access information about the number of successfully run and failed test cases of the started matrix.
MATRIX_RUN_EXAMPLE={{#\n#Id;#Action;#Matrix\nMXRN1;MatrixRun;'matrices/Matrix.jf'\n#Assert;#Message\nMXRN1.Out.isRunning();'MatrixRun is failed'#}}
MATRIX_RUN_MATRIX=A file path to the run matrix. A path can be both absolute and relative. A current folder, with respect to which a file location is specified, is a folder where the configuration is.
MATRIX_RUN_AT=Is used to state the time when the matrix is started. If the specified time is not yet, the launched matrix goes the halted state before the start time, otherwise, the matrix starts straightaway.
MATRIX_RUN_PARAMETER=Is used to pass parameters to the started matrix. As a call - by - reference mechanism is used, be careful - the started matrix could modify the object passed. It should be considered and can be used for a feedback mechanism between matrices.
MATRIX_RUN_FROM_TEXT_GENERAL_DESC=The purpose of this action is to run the matrix from the text. An execution context is created for the run matrix, so as matrices do not cross under run. The run matrix creates its own status report.
MATRIX_RUN_FROM_TEXT_OUTPUT_DESC=A special object which identifies the started matrix. This object is required for {{@MatrixWait@}} action to wait when the started matrix stops.With the help of this object property one can access information about the number of successfully run and failed test cases of the started matrix. 
MATRIX_RUN_FROM_TEXT_EXAMPLE={{#\n#Id;#Action;#Text\nMXRN1;MatrixRunFromText;Text\n#Assert;#Message\nMXRN1.Out.isRunning();'MatrixRun is failed'#}}
MATRIX_RUN_FROM_TEXT_TEXT={{$Text$}} object related to the execution matrix.
MATRIX_RUN_FROM_TEXT_AT=Is used to state the time when the matrix is started. If the specified time is not yet, the launched matrix goes the halted state before the start time, otherwise, the matrix starts straightaway.
MATRIX_RUN_FROM_TEXT_PARAMETER=Is used to pass parameters to the started matrix. As a call - by - reference mechanism is used, be careful - the started matrix could modify the object passed.
MATRIX_WAIT_GENERAL_DESC=The purpose of this action is to wait until the executed matrix stops. If the matrix doesn't stop during the specified timeout, an action is failed.
MATRIX_WAIT_EXAMPLE={{#\n#Id;#Action;#Matrix\nMXRN1;MatrixRun;'matrices/Matrix.jf'\n#Id;#Action;#Time;#Matrix\nMXWT1;MatrixWait;5000;MXRN1.Out#}}
MATRIX_WAIT_MATRIX=A special object that connects to the matrix which is run.
MATRIX_WAIT_TIME=Matrix timeout per millisecond.If the matrix doesn't stop during the specified timeout, an action is failed.If the value is 0 - there will be pending before the matrix stops with no time limit.Be careful with such a value, if the started matrix is cycled, the current matrix will hang up in latency.
#//endregion

#//region actions.message
MESSAGE_CHECK_GENERAL_DESC=The purpose of the action is to compare MapMessage with the collection of key-value type.\nMapMessage is the output of such actions as MessageCreate, ClientCreateMapMessage, ClientDecode, ClientGetMessage, ClientSendMessage. \n The report will have a table with 'Mismatched fields' heading, containing columns 'Name' and 'Expected + Actual'.\nIf there is dissimilarity in the compared objects MapMessage action fails.
MESSAGE_CHECK_ADDITIONAL_DESC=The names and values which should be compared in MapMessage passed in ActualMessage are specified in additional parameters.
MESSAGE_CHECK_EXAMPLE=1. Create an object of MapMessage type.\n2. Compare the values in MapMessage with the value passed in Additional parameters. \n{{#\n#Id;#Action;#Fields\nMSGCR1;MessageCreate;{'First item':'First Value', 'Second Item':'Second Value'}\n#Id;#Action;#ActualMessage;#First item\nMSGCHK1;MessageCheck;MSGCR1.Out;'Second Value'#}}
MESSAGE_CHECK_ACTUAL=An object of MapMessage type.
MESSAGE_COMPARE_TWO_GENERAL_DESC=The purpose of the action is to compare two MapMessage.\nMapMessage is the output of such actions as MessageCreate, ClientCreateMapMessage, ClientDecode, ClientGetMessage, ClientSendMessage. \n If there is dissimilarity in the compared objects MapMessage action fails.
MESSAGE_COMPARE_TWO_EXAMPLE=1-2. Create two objects of MapMessage type with different values \n3. Check them with MessageCompareTwo action.\n{{#\n#Id;#Action;#Fields\nMSGCR1;MessageCreate;{'First item':'First Value', 'Second Item':'Second Value'}\n#Id;#Action;#Fields\nMSGCR2;MessageCreate;{'First item':'First Value', 'Fourth Item':'Fourth Value'}\n#Id;#Action;#Expected;#Actual\nMSGCMP1;MessageCompareTwo;MSGCR2.Out;MSGCR1.Out#}}
MESSAGE_COMPARE_TWO_ACTUAL=MapMessage which should be compared.
MESSAGE_COMPARE_TWO_EXPECTED=MapMessage which should be compared with.
MESSAGE_COMPARE_TWO_EXCLUDE=An array of column names which should be excluded from comparison.
MESSAGE_CREATE_GENERAL_DESC=The purpose of the action is to create an object of MapMessage type.\nThe object of MapMessage type is a collection which stores data in the form of key/value pairs.\nIt is used in such actions as ClientCheckFields, ClientCheckMessage, ClientEncode, ClientSendMapMessage, MessageCheck, MessageCompareTwo.
MESSAGE_CREATE_ADDITIONAL_DESC=Names and values are passed to fill MapMessage. This parameter is used only if the parameter Fiels is not set.
MESSAGE_CREATE_OUTPUT_DESC=Message object.
MESSAGE_CREATE_EXAMPLE={{#\n#Id;#Action;#Fields\nMSGCR1;MessageCreate;{'First item':'First Value', 'Second Item':'Second Value'}#}}
MESSAGE_CREATE_MESSAGE_TYPE=The type of created MapMessage should be specified.
MESSAGE_CREATE_SOURCE=The source of created MapMessage should be specified.
MESSAGE_CREATE_FIELDS=The collection of Map type values is specified.
MESSAGE_REPORT_GENERAL_DESC=The purpose of the action is to display the object content {{$MapMessage$}} in the report on the matrix run. The object type {{$MapMessaget$}} is the tree-based representation of message which consists of fields. It is applied when it is necessary to send or receive {{$MapMessage$}}.
MESSAGE_REPORT_MESSAGE=Object {{$MapMessage$}}, which is required to output.
MESSAGE_REPORT_TITLE=The title of the text.
MESSAGE_REPORT_TO_REPORT=This parameter is used for directing the output from the given object to the external report created by the {{$ReportStart$}} action.
MESSAGE_REPORT_BEFORE_TESTCASE=It accepts id test case before which the text will be displayed in the report.
#//endregion

#//region actions.report
CHART_REPORT_GENERAL_DESC=The following action is needed to display graphs and diagrams in reports based on data from the tables.
CHART_REPORT_ADDITIONAL_DESC=Depend on the type of the graph/diagram. {{` {{$Labels$}} - it is needed to name a column, which values will be used for creating a diagram.`}} {{` {{$YAxisDescription$}} - it is needed to specify the name that will be assigned to Z-axis.`}} {{` {{$Values$}} - the name of the column, which values will be used for creating Pie type diagram.`}}
CHART_REPORT_EXAMPLE=1. Make a table\n2. Create a report by ReportStart action\n3. Create a graph based on the table. Specify a newly created report in parameter Report.\n4-5. Display a report.\n{{#\n#Id;#TestCase;#Kind;#Depends;#For\nChart;;;;\n    #Id;#RawTable\n    DATA1;Table\n    @;Labels;Mike salary;John Salary\n    0;2001;1;2\n    1;2002;2;3\n    2;2003;3;4\n    3;2004;3;4\n    4;2005;3;5\n    5;2006;4;5\n    #EndRawTable\n    #Id;#Action;#ReportName\n    REP1;ReportStart;'My report'\n    #Action;#ToReport;#Type;#Table;#Title;#Labels\n    ChartReport;REP1.Out;ChartKind.Line;DATA1;'Chart title';'Labels'\n    #Action;#Passed;#Report;#Failed\n    ReportFinish;0;REP1.Out;0\n    #Action;#Report\n    ReportShow;REP1.Out.getReportName()#}}
CHART_REPORT_BEFORE_TEST_CASE=Allows to display a graph at the top of the report.
CHART_REPORT_COLORS=Color map.
CHART_REPORT_TO_REPORT=This parameter is used for directing the output from the given object to the external report created by the {{$ReportStart$}} action.
CHART_REPORT_CHART_TYPE=Type of graph.
CHART_REPORT_TABLE=Table that contains data for a graph.
CHART_REPORT_TITLE=Title.
REPORT_GENERAL_DESC=The following action is needed to output values to the report.
REPORT_ADDITIONAL_DESC=The name and the value that will be shown in the report.
REPORT_EXAMPLE=This example will add the following row 'String for printing: name = value' to the report that was created by action {{@ReportStart@}} \n{{#\n#Id;#Action;#ReportName\nREP1;ReportStart;'My Report'\n#Action;#ToReport;#Str;#name\nReport;REP1.Out;'String for printing:';'value'\nReportFinish;0;REP1.Out;0\n#Action;#Passed;#Report;#Failed\n#Action;#Report\nReportShow;REP1.Out.getReportName()#}}
REPORT_MESSAGE=Output row.
REPORT_BEFORE_TEST_CASE=Allows to output a table at the top of the report.
REPORT_TO_REPORT=This parameter is used for directing the output from the given object to the external report created by the {{@ReportStart@}} action.
REPORT_FINISH_GENERAL_DESC=This action is used as a final step in building a report taken from {{@ReportStart@}} action. It will be impossible to add new elements to Report after after using this action.
REPORT_FINISH_EXAMPLE={{`1. Create an object of Report type.`}}{{`2. Create an object of Table type.`}}{{`3. Move the object Table using {{@TableReport@}} action to the report created in the first step.`}}{{`4. Finish building Report object.`}} {{#\n#Id;#Action;#Version;#ReportName\nREP1;ReportStart;'3.141592';'MyReport'\n#Id;#RawTable\nDATA1;Table\n@;newH\n0;newR\n#EndRawTable\n#Action;#ToReport;#Table;#Title\nTableReport;REP1.Out;DATA1;'Report title'\n#Action;#Passed;#Report;#Failed\nReportFinish;0;REP1.Out;0#}}
REPORT_FINISH_REPORT=Report which should be finished.
REPORT_FINISH_PASSED=A number of passed actions is specified.
REPORT_FINISH_FAILED=A number of failed actions is specified.
REPORT_FINISH_START_TIME=Time when the report starts to be built. If the parameter is not set then the current time is used.
REPORT_FINISH_FINISH_TIME=The time when the report is finished. If the parameter is not set then the current time is used.
REPORT_NAME_GENERAL_DESC=The following action is needed to add text to the name of the created report.
REPORT_NAME_EXAMPLE=If to execute the following example the name of the report file will be given - 'Date and time of running matrix'_'Matrix name'_'PASSED' Chrome.html\n{{#\n#Action;#Name\nReportName;'Chrome'#}}
REPORT_NAME_NAME=Text that will be added to the name of the report.
REPORT_NAME_FAILED_STEPS=Failed steps count that will be added to the report.
REPORT_NAME_PASSED_STEPS=Passed steps count that will be added to the report.
REPORT_SHOW_GENERAL_DESC=This action is used for Report object display which was finished with ReportFinish action. Report will be displayed straight after finishing this action.
REPORT_SHOW_EXAMPLE={{`1. Create an object of Report type.`}}{{`2. Create an object of Table type.`}}{{`3. Move the object Table using TableReport action to the report created in the first step.`}}{{`4. Finish building Report object.`}}{{`5. Display the report.`}} {{#\n#Id;#Action;#Version;#ReportName\nREP1;ReportStart;'3.141592';'MyReport'\n#Id;#RawTable\nDATA1;Table\n@;newH\n0;newR\n#EndRawTable\n#Action;#ToReport;#Table;#Title\nTableReport;REP1.Out;DATA1;'Report title'\n#Action;#Passed;#Report;#Failed\nReportFinish;23;REP1.Out;34\n#Action;#Report\nReportShow;REP1.Out.getReportName()#}}
REPORT_SHOW_REPORT=Object of Report type which should be displayed.
REPORT_START_GENERAL_DESC=This action is used to create an object of Report type. It is possible to set it as ToReport parameter in the following actions: {{@TableReport@}}, {{@TextReport@}}, {{@XmlReport@}} and others to fill the created Report object
REPORT_START_OUTPUT_DESC=Created report.
REPORT_START_EXAMPLE={{#\n#Id;#Action;#Version;#ReportName\nREP1;ReportStart;'3.141592';'MyReport'#}}
REPORT_START_REPORT_NAME=Name of a created report.
REPORT_START_VERSION=Version of the report. It will be displayed in report
#//endregion

#//region actions.services
SERVICE_LOAD_GENERAL_DESC=The following action is needed to load a service, to initialize it and to connect to it.Services are things functioning as a server in a client-server relationship.A server listens to a definite port and allows installing TCP connection from the client side.
SERVICE_LOAD_OUTPUT_DESC=Is a connection with a loaded server. It is used for further interaction with the loaded server.
SERVICE_LOAD_EXAMPLE={{#\n#Id;#Action;#ServiceId\nSRVLD1;ServiceLoad;'TEST'#}}
SERVICE_LOAD_ID=A service ID that was described in Service entries configuration, which will be used for booting a relevant service.If no entry is found in the configuration at such ServiceId, an action finishes with an error.
SERVICE_START_GENERAL_DESC=The following action is needed to run a service that was loaded earlier by {{@ServiceLoad@}}.
SERVICE_START_ADDITIONAL_DESC=Additional parameters depend on the type of the running service.
SERVICE_START_OUTPUT_DESC=True, if service running successful.
SERVICE_START_EXAMPLE={{`1. Load MatrixService`}}{{`2. Load a service woth an additional parameter Port, that was loaded earlier.`}} {{#\n#Id;#Action;#ServiceId\nSRVLD1;ServiceLoad;'MatrixService'\n#Id;#Action;#Port;#ServiceConnection\nSRVSTRT1;ServiceStart;10565;SRVLD1.Out#}}
SERVICE_START_CONNECTION=A connection with a service is specified, that should be run. An output object of {{@ServiceLoad@}} action is indicated.
SERVICE_STOP_GENERAL_DESC=The following action is needed to stop a service that was run by {{@ServiceStart@}}.
SERVICE_STOP_EXAMPLE={{`1. Load MatrixService.`}}{{`2. Run a service with additional parameter Port, that was specified earlier.`}}{{`3. Close a connection.`}} {{#\n#Id;#Action;#ServiceId\nSRVLD1;ServiceLoad;'MatrixService'\n#Id;#Action;#Port;#ServiceConnection\nSRVSTRT1;ServiceStart;10565;SRVLD1.Out\n#Id;#Action;#ServiceConnection\nSRVSTP1;ServiceStop;SRVLD1.Out#}}
SERVICE_STOP_CONNECTION=A connection with a service is specified, that needed to be closed.
#//endregion

#//region actions.sql
SQL_CONNECT_GENERAL_DESC=The following action is needed to establish a database connection which is used in {{@ SQLexecute @}}, {{@ SQLinsert @}}, {{@ SQLselect @}}, {{@ SQLtableUpload @}}, {{@ SQLdisconnect @}} actions.
SQL_CONNECT_OUTPUT_DESC=Connection to the SQL server.
SQL_CONNECT_EXAMPLE={{` 1. Establish a database connection setting all mandatory parameters. `}}{{` 2. Check that the connection is created and open. `}}{{#\n#Id;#Action;#User;#Server;#Base;#Sql;#Password\nSQLCNT1;SQLconnect;'username';'127.0.0.1:3306';'database';'MySQL';'password'\n#Assert;#Message\n!(SQL.Out.isClosed());'connection is not established'#}}
SQL_DISCONNECT_GENERAL_DESC=The following action is needed to close a database connection.
SQL_DISCONNECT_EXAMPLE={{` 1. Establish a database connection setting all mandatory parameters. `}}{{` 2. Close the database connection. `}}{{` 3. Confirm that the database connection is closed. `}}{{#\n#Id;#Action;#User;#Server;#Base;#Sql;#Password\nSQLCNT1;SQLconnect;'username';'127.0.0.1:3306';'database';'MySQL';'password'\n#Id;#Action;#Connection\nSQLDCNT1;SQLdisconnect;SQLCNT1.Out\n#Assert;#Message\nSQLCNT1.Out.isClosed();'connection is not closed'. #}}
SQL_EXECUTE_GENERAL_DESC=The following action is needed to execute any SQL database query.
SQL_EXECUTE_ADDITIONAL_DESC=The additional parameter is defined by the data that will be used in completed SQL query instead of placeholders -'?'. The parameter name is not used during the execution and in this case can serve as a comment for the user. For example you can use it as an object description set as a parameter value. \{{*Attention!*}} You should mind the order of additional parameters.
SQL_EXECUTE_OUTPUT_DESC=Returns 'true' if the query was for data selection and 'false' if for data change.
SQL_EXECUTE_EXAMPLE={{` 1. Create a connection to a database. `}}{{` 2. Execute the query to create Users table. `}}{{` 3.-4. Define and initialize Name and Age variables. `}}{{` 5. Execute the query to fill in the Users table using placeholders in additional parameters. `}}{{` 6. Execute the Update query using placeholders. `}}\n{{#\n#Id;#Action;#User;#Server;#Base;#Sql;#Password\nSQLCNT1;SQLconnect;'username';'127.0.0.1:3306';'database';'MySQL';'password'\n#Id;#RawText;#Kind \ncreateTable;Text;None\n~;CREATE TABLE users (id INT(6) PRIMARY KEY, \nname VARCHAR(30) NOT NULL,age int NOT NULL)\n#EndRawText\n#Id;#Action;#Query;#Connection\nSQLEXEC1;SQLexecute;createTable;SQLCNT1.Out\n#Id;#Let\nname;'mike'\n#Id;#Let\nage;23\n#Id;#RawText;#Kind \ninsertQuery;Text;None\n~;insert into users (name, age) values (?, ?)\n#EndRawText\n#Id;#Action;#Query;#Connection;#User name;#User age\nSQLINS1;SQLinsert;insertQuery;SQLCNT1.Out;name;age\n#Id;#RawText;#Kind \nupdateQuery;Text;None\n~;update users set name=? where ? = 23\n#EndRawText\n#Id;#Action;#Query;#Connection;#User new name;#User new age\nSQLEXEC2;SQLexecute;updateQuery;SQLCNT1.Out;'john';age#}}
SQL_INSERT_GENERAL_DESC=The following action is needed to execute the Insert SQLquery.
SQL_INSERT_ADDITIONAL_DESC=The additional parameter is defined by the data that will be used in completed SQL query instead of placeholders -'?'. The parameter name is not used during the execution and in this case can serve as a comment for the user. For example you can use it as an object description set as a parameter value. \n{{*Attention!*}} You should mind the order of additional parameters.
SQL_INSERT_OUTPUT_DESC=Returns a list containing primary auto-increment line key generated as a result of executing an SQL query.
SQL_INSERT_EXAMPLE={{` 1. Create a connection to a database. `}}{{` 2. Execute the query to create Users table. `}}{{` 3.-4. Define and initialize Name and Age variables.`}}{{` 5. Execute SQLinsert action using placeholders in additional parameters.`}}{{` 6. Verify that the query returned the key list.`}}\n{{#\n#Id;#Action;#User;#Server;#Base;#Sql;#Password\nSQLCNT1;SQLconnect;'username';'127.0.0.1:3306';'database';'MySQL';'password'\n#Id;#RawText;#Kind \ncreateTable;Text;None\n~;CREATE TABLE users (id INT(6) PRIMARY KEY, \nname VARCHAR(30) NOT NULL,age int NOT NULL)\n#EndRawText\n#Id;#Off;#Action;#Query;#Connection\nSQLEXEC1;1;SQLexecute;createTable;SQLCNT1.Out\n#Id;#Let\nname;'mike'\n#Id;#Let\nage;23\n#Id;#RawText;#Kind\ninsert;Text;None\n~;\\"insert into users (name, age) values (?, ?)\\" \n#EndRawText \n#Id;#Action;#Query;#Connection;#User name;#User age\nSQLINS1;SQLinsert;insert;SQLCNT1.Out;name;age\n#Assert;#Message\nSQLINS1.Out.size() > 0;#}}
SQL_SELECT_GENERAL_DESC=The following action is needed to execute the Select SQLquery.
SQL_SELECT_ADDITIONAL_DESC=The additional parameter is defined by the data that will be used in completed SQL query instead of placeholders -'?'. The parameter name is not used during the execution and in this case can serve as a comment for the user. For example you can use it as an object description set as a parameter value. \n{{*Attention!*}} You should mind the order of additional parameters.
SQL_SELECT_OUTPUT_DESC=Select SQL query returns a Table object. The returned Table column names coincide with the Table column names we get as a result of a query.
SQL_SELECT_EXAMPLE={{` 1. Create a connection to a database. `}}{{` 2. Execute the query to create Users table `}}{{` 3.-4. Define and initialize Name and Age variables `}}{{` 5. Execute the query to fill in the Users table using placeholders in additional parameters `}}{{` 6. Execute SQLselect action using placeholders in additional parameters `}}{{` 7. Add the table to the report using the Table Report action `}}\n{{#\n#Id;#Action;#User;#Server;#Base;#Sql;#Password\nSQLCNT1;SQLconnect;'username';'127.0.0.1:3306';'database';'MySQL';'password'\n#Id;#RawText;#Kind \ncreateTable;Text;None\n~;CREATE TABLE users (id INT(6) PRIMARY KEY, \nname VARCHAR(30) NOT NULL,age int NOT NULL)\n#EndRawText\n#Id;#Action;#Query;#Connection\nSQLEXEC1;SQLexecute;createTable;SQLCNT1.Out\n#Id;#Let\nname;'mike'\n#Id;#Let\nage;23\n#Id;#RawText;#Kind \ninsertQuery;Text;None\n~;insert into users (name, age) values (?, ?)#EndRawText\n#Id;#RawText;#Kind \nselectQuery;Text;None\n~;select name, age from test.users where name = ? and age = ?\n#EndRawText\n#Id;#Action;#Query;#Connection;#User name;#User age\nSQLEXEC3;SQLexecute;insertQuery;SQLCNT1.Out;name;age\n#Id;#Action;#Query;#Connection;#User name;#User age\nSQLSLCT1;SQLselect;selectQuery;SQLCNT1.Out;name;age\n#Action;#Table;#Title\nTableReport;SQLSLCT1.Out;'Report title'#}}
SQL_TABLE_UPLOAD_GENERAL_DESC=The following action is needed to upload the data from the {{$Table$}} object to the database. The data is added using the Union principle (adding to the end of the database)
SQL_TABLE_UPLOAD_EXAMPLE={{` 1. Create a table. `}}{{` 2. Create a connection to a database. `}}{{` 3. Execute a query to create the Users table. `}}{{` 4. Upload data from the Table object to Users table of the current database. `}}\{{#\n#Id;#RawTable\nDATA1;Table\n@;Name;Age\n0;Mike;25\n1;Anna;24\n#EndRawTable\n#Id;#Action;#User;#Server;#Base;#Sql;#Password\nSQLCNT1;SQLconnect;'username';'127.0.0.1:3306';'database';'MySQL';'password'\n#Id;#RawText;#Kind \ncreateTable;Text;None\n~;CREATE TABLE users (id INT(6) PRIMARY KEY, \nname VARCHAR(30) NOT NULL,age int NOT NULL)\n#EndRawText\n#Id;#Action;#Query;#Connection\nSQLEXEC1;SQLexecute;createTable;SQLCNT1.Out\n#Action;#Table;#Connection;#Data\nSQLtableUpload;'users';SQLCNT1.Out;DATA1#}}
#//endregion

#//region actions.system
CHECK_GENERAL_DESC=The following action is needed to check structured objects that implement interface Map, for example: table rows, MapMessages.
CHECK_OUTPUT_DESC=A logical variable, true if matching values are equal, else - false. If there are differences between matching values table {{$Mismatched$}} fields that contains information about mismatched values, is added to the report.
CHECK_ADDITIONAL_DESC=Helps to pass values and their names that are needed to be compared.
CHECK_EXAMPLE={{`1. Make a table with 2 rows and columns, add values.`}}2. Compare values from the first row of the table with those ones that are specified in additional parameters of action Check. {{#\n#Id;#RawTable\nDATA1;Table\n@;Country;Capital\n0;Russia;Moscow\n1;Germany;Berlin\n#EndRawTable\n#Action;#DoNotFail;#Actual;#Country;#Capital\nCheck;true;DATA1.get(0);'Russia';'Berlin'#}}
CHECK_DONT_FAIL=If true, then when identifying differences as a result of the comparison, action will still be marked as Passed, otherwise, as Failed. By default, a parameter has a false value.
CHECK_ACTUAL=A set of names and values that should be compared.
COMPARE_GENERAL_DESC=The following action is needed to compare two structured objects that implement interface Map, for example: table rows, MapMessages.
COMPARE_OUTPUT_DESC=A table as a resulf of compare.
COMPARE_ADDITIONAL_DESC=Helps to pass values and their names that are needed to be compared.
COMPARE_EXAMPLE={{`1. Make a table with 2 rows and columns, add values.`}}2. Compare values from the first row of the table with those ones that are specified in Expected parameter of action Compare. {{#\n#Id;#RawTable\nDATA1;Table\n@;Country;Capital\n0;Russia;Moscow\n1;Germany;Berlin\n#EndRawTable\n#Action;#DoNotFail;#Actual;#Expected\nCompare;true;DATA1.get(0); { 'Country':'Russia', 'Capital':'Berlin' } #}}
COMPARE_ACTUAL=A set of names and values that should be compared as actual value.
COMPARE_EXPECTED=A set of names and values that should be compared as expected value.
COMPARE_DONT_FAIL=If true, then when identifying differences as a result of the comparison, action will still be marked as Passed, otherwise, as Failed. By default, a parameter has a false value.
EXECUTE_GENERAL_DESC=The following action is needed to run external processes via command line of the operating system.\nDepends on the operating system which is used, different commands can be used for the same actions in different systems.\nUsing this action one can unpack an archive or download a file from FTP server.
EXECUTE_OUTPUT_DESC=Result of the standard output of the running process to the console.\nAvailable if stated true in parameter wait.\nOne can get a text using Out.Text, to get ExitCode use Out.ExitCode, get PID use Out.PID.
EXECUTE_EXAMPLE={{`1. Run system command 'help'`}}2. Check if you get an answer in the form of text when executing the current command.\n{{#\n#Id;#Action;#Command\nEXEC1;Execute;'help'\n#Assert;#Message\nStr.IsNullOrEmpty(EXEC1.Out.Text);'Command wasn't executed'#}}
EXECUTE_COMMAND=A system command that will be executed.
EXECUTE_WAIT=Waiting for the command to terminate. If true - execution of the matrix is stopped until the command is executed. By default - true.
EXECUTE_WORK_DIR=A task of the working directory for the current command.
INPUT_GENERAL_DESC=Input a value via interaction with a user
INPUT_OUTPUT_DESC=Result of choosing a value by user, or default value if the timeout expired
INPUT_TITLE=Title of user input
INPUT_DEFAULT_VALUE=Default value if the timeout expired.
INPUT_HELP_KIND=How to help user enter or choose a value.
INPUT_DATA_SOURCE=Collection (a list or a map) to choice value.
INPUT_TIMEOUT=If this timeout expires default value will be used.
PRINT_GENERAL_DESC=The following action is needed to output values to the console of the current matrix.
PRINT_ADDITIONAL_DESC=The name of the output object is indicated in the name of the additional parameter, the output object is indicated in the value of the parameter.
PRINT_EXAMPLE=The following example will output the following row to the console: 'Comment for a string:  Name = Value'\n{{#\n#Action;#Str;#Name\nPrint;'Comment for a string: ';'Value'#}}
PRINT_MESSAGE=Comments to the output row.
RESTORE_GENERAL_DESC=The following action is needed to get the value that was previously saved in global Store (see action {{@Store@}}).\nOne can restore only those objects that are in global Store (View -> Store).\nAll objects from the global Store are saved only during current tool session.
RESTORE_OUTPUT_DESC=A value that will be required. Otherwise, null, if a non-existent value was required.
RESTORE_EXAMPLE=Restore value with name currentTime that was stored by action Store. Assign it to the local variable createDate.\n{{#\n#Action;#AsVar;#Name\nRestore;'createDate';'currentTime'#}}
RESTORE_NAME=The name of the object which value will be restored.
RESTORE_AS_VAR=The name of the variable that will be given the value of the restored object. A variable will be global if an action is tagged 'G', otherwise, variable will be local.
RESULT_TABLE_GENERAL_DESC=This action is needed to get a copy of the system table that contains information about running current matrix. \nThis table is made during running a matrix, each row of the table contains information about one {{@TestCase@}} or {{@Step@}}.\nAmendments made to the table do not influence the system table. To add columns and values there is action {{@ResultTableUserValue@}}.\nIt is needed to use an optional parameter if applying to another matrix.
RESULT_TABLE_OUTPUT_DESC=A copy if the system table that has columns Matrix, TestCaseId, TestCase, StepIdentity, Step, Time, Result, Error, Screenshot.
RESULT_TABLE_EXAMPLE={{#\n#Id;#TestCase;#Kind\nFirst;;\n    #Action;#name\n    Print;'value'\n    #Action;#Time\n    Wait;1000\n#Id;#TestCase;#Kind\nSecond;;\n    #Action;#Text;#Notifier\n    Show;'Some text for print';Notifier.Info\n    #Fail\n    'Fail'\n#Id;#TestCase;#Kind\nThird;;\n    #Id;#Action;#Decoraded\n    RESTBL1;ResultTable;true\n    #Action;#BeforeTestCase;#Table;#Title\n    TableReport;'First';RESTBL1.Out;'Result table'#}}
RESULT_TABLE_DECORATED=If you set true, a table has a human-readable kind. When indicating false, values that are in the table will be objects  which can be used later.
RESULT_TABLE_MATRIX=Object MatrixRunner is indicated (that is an output value of actions {{@MatrixRun@}} and {{@MatrixRunFromText@}}). This action will be used in the summary table.
RESULT_TABLE_USER_VALUE_GENERAL_DESC=The following action is needed to add extra columns and values to the system table that can be acquired by action {{@ResultTable@}}.\nChanges values for the current row (current test case or step).
RESULT_TABLE_USER_VALUE_ADDITIONAL_DESC=Names of additional columns are specified in the value of the additional parameter, in the value of the parameter - values are indicated, that will be added to the row that corresponds to that test case or step, where the following action is. {{`If names match, additional columns do not replace columns of the system table: Matrix, TestCaseId, TestCase, StepIdentity, Step, Time, Result, Error, Screenshot.`}}
RESULT_TABLE_USER_VALUE_EXAMPLE={{#\n#Id;#TestCase;#Kind;#Depends;#For\nRTUSERVAL;ResultTableUserValue;Never;;\n    #Action;UserValue\n    ResultTableUserValue;'value'\n    #Step;#Kind;#For;#Depends\n    ;;;\n    #EndStep\n    #Id;#Action;$Decoraded\n    RESTBL1;ResultTable;false\n    #Assert;#Message\n    RESTBL1.Out[RESTBL1.Out.size - 1].Result == Result.Passed;'Assert'\n    #Id;#Let\n    firstTableSize;RESTBL1.Out.size\n    #Assert;#Message\n    RESTBL1.Out[RESTBL1.Out.size - 2].UserValue == 'value';'Wrong value'\n    #Assert;#Message\n    RESTBL1.Out[RESTBL1.Out.size - 1].UserValue == null;'Wrong value'\n    #Action;OtherValue\n    ResultTableUserValue;100\n    #Step;#Kind;#For;#Depends\n    ;;;\n        #Action;UserValue;OtherValue\n        ResultTableUserValue;'value1';200\n    #EndStep#}}
RESULT_TABLE_USER_VALUE_MATRIX=Object MatrixRunner is indicated (that is an output value of actions {{@MatrixRun@}} and {{@MatrixRunFromText@}}). This action will be used in the summary table.
SHOW_GENERAL_DESC=The following action is needed to output values in the pop-up notification that appears above all windows.
SHOW_EXAMPLE=Output the following row \\"Current time is: currentTime\\" in the pop-up window, with notification type Info.\n{{#\n#Action;#Text;#Notifier\nShow;'Current time is: ' + DateTime.currentTime();Notifier.Info#}}
SHOW_NOTIFIER=Set a type of notification: Info - blue color, Success - green, Error - red.
SHOW_TEXT=Output row.
STORE_GENERAL_DESC=The following action is needed to store values of the object from any matrix in global {{$Store$}}.\nLater, this object is available by action {{@Restore@}}.\nAlso if the value is {{$null$}} the stored value will be removed from {{$Store$}}.All objects from global {{$Store$}} are stored only during the current tool session.
STORE_EXAMPLE=Save object DateTime that contains current date and time when doing this action.\n{{#\n#Action;#Value;#Name\nStore;DateTime.current();'currentTime#}}
STORE_NAME=The name of the saved object.
STORE_VALUE=The object that needs to be stored.
WAIT_GENERAL_DESC=The following action is needed to stop running a matrix for a while. To execute this action correctly, it is needed to specify at least one optional parameter.
WAIT_EXAMPLE=Stop running a matrix for 5 seconds.\n{{#\n#Action;#Time\nWait;5000#}}
WAIT_TIMEOUT=Time in milliseconds, during this time running of a matrix will be stopped.
WAIT_BY_TIME=Time before which running a matrix will be stopped. It is ignored when parameter 'Time' is specified.
#//endregion

#//region actions.text
TEXT_ADD_LINE_GENERAL_DESC=The purpose of the action is to add a line to the object type {{$Text$}}. Object type {{$Text$}} is a text-based pattern which consists of lines. The action can work for object creation {{$Text$}} line-by-line from different sources.
TEXT_ADD_LINE_EXAMPLE={{#\n#Id;#Action;#Content\nTXT1;TextCreate;'Text'\n#Action;#Line;#Text\nTextAddLine;'New line';TXT1.Out#}}\n
TEXT_ADD_LINE_TEXT=Object {{$Text$}}.
TEXT_ADD_LINE_LINE=The line that should be added.
TEXT_CREATE_GENERAL_DESC=The purpose of the action is to create the object type {{$Text$}}. The object type {{$Text$}} is the text-based pattern which consists of lines. Object type {{$Text$}} is used as the input object in many text actions. Also the object type {{$Text$}} can be converted into the line object which can contain many lines {{$Text.Out.toString()$}} divided by the line break symbol (\n) and transferred to any action which accepts the line as the parameter or parameters, for example in action {{@SQLExecute@}}.
TEXT_CREATE_OUTPUT_DESC=The object type {{$Text$}} is the text-based pattern which consists of lines.
TEXT_CREATE_EXMAPLE={{#\n#Id;#Action;#Content\nTXT1;TextCreate;'Text'\n#Assert;#Message\nTXT1.Out.toString() == 'Text';#}}\n
TEXT_CREATE_CONTENT=The text which is required to type.
TEXT_LOAD_FROM_FILE_GENERAL_DESC=The purpose of the action is to create the object type {{$Text$}} from the file. The object type {{$Text$}} is the text-based pattern which consists of lines. Any file which contains plain-text can be used as a source file.
TEXT_LOAD_FROM_FILE_OUTPUT_DESC=The object type {{$Text$}} is the text-based pattern which consists of lines.
TEXT_LOAD_FROM_FILE_EXAMPLE={{#\n#Id;#Action;#File\nTXT1;TextLoadFromFile;'path/text.txt'\n#Assert;#Message\nTXT1.Out != null;#}}\n
TEXT_LOAD_FROM_FILE_FILE=A text file, the text of which is required to type
TEXT_PERFORM_GENERAL_DESC=The purpose of the action is to implement macro substitution in object {{$Text$}}. The object type {{$Text$}} is the text-based pattern, which consists of lines, which can contain macro substitution. Macro substitution is found directly in the test and it represents the formula which is enclosed to special tag "@{}". The result of the action work is the object {{$Text$}}, in which the results of the macro execution are presented in the form of the literal text. For example: "Hi! My name is @{personName}" or "My taxes in 2016 is @{amount * 0.13}"  will be converted into the text "Hi! My name is John " and "My taxes in 2016 is 13" correspondingly, on condition that  the variable personName contains "John", and the variable amount contains 100. It is recommended to use the following action for a generation of the object {{$Text$}} during the matrix implementation and its upcoming transfer to action {{@MatrixRunFromText@}} for a dynamic matrix execution or a text assembly of the complex structure such as Expected value for the subsequent comparison with Actual value. It is possible to find detailed information about macro options and macro executable expressions on the website (access address).
TEXT_PERFORM_OUTPUT_DESC=The object type {{$Text$}} is the text-based pattern which consists of lines. 
TEXT_PERFORM_EXAMPLE={{#\n#Id;#Action;#Content\nTXT1;TextCreate;'My taxes in 2016 is @{amount * 0.13} rub'\n#Id;#Let\namount;100\n#Id;#Action;#Text\nTXT2;TextPerform;TXT1.Out\n#Assert;#Message\nTXT2.Out.toString() == 'My taxes in 2016 is 13 rub';'Assert failed'#}}\n
TEXT_PERFORM_TEXT=Object {{$Text$}}, with which the operation is required to perform.
TEXT_REPORT_GENERAL_DESC=The purpose of the action is to display the object content {{$Text$}} in the report on the matrix run. The object type {{$Text$}} is the text-based pattern which consists of lines. It is applied when it is necessary to examine the content of the object {{$Text$}}.
TEXT_REPORT_EXAMPLE={{#\n#Id;#Action;#Content\nTXT1;TextCreate;'Text'\n#Action;#Title;#Text\nTextReport;'My text';TXT1.Out#}}\n
TEXT_REPORT_TEXT=Object {{$Text$}}, which is required to output.
TEXT_REPORT_TITLE=The title of the text.
TEXT_REPORT_BEFORE_TESTCASE=It accepts id test case before which the text will be displayed in the report.
TEXT_REPORT_TO_REPORT=This parameter is used for directing the output from the given object to the external report created by the {{$ReportStart$}} action.
TEXT_SAVE_TO_FILE_GENERAL_DESC=The purpose of the action is to save object {{$Text$}} to a file. The object type {{$Text$}} is the text-based pattern which consists of lines.
TEXT_SAVE_TO_FILE_OUTPUT_DESC=True if saving is successful.
TEXT_SAVE_TO_FILE_EXAMPLE={{#\n#Id;#Action;#Content\nTXT1;TextCreate;'Text'\n#Id;#Action;#Text;#File\nTXT2;TextSaveToFile;TXT1.Out;'path/file.txt'\n#Assert;#Message\nTXT2.Out;#}}\n
TEXT_SAVE_TO_FILE_TEXT=Object {{$Text$}},which is required to output.
TEXT_SAVE_TO_FILE_FILE=A path where to save a file and the file name with an extension.
TEXT_SET_VALUE_GENERAL_DESC=The purpose of the action is to change the definite line in the object {{$Text$}}. The object type {{$Text$}} is the text-based pattern which consists of lines. It can be used when it is required to make changes in the object, which has a sufficiently large volume or when there is no access to the source from which it was obtained.
TEXT_SET_VALUE_EXAMPLE={{#\n#Id;#Action;#Content\nTXT1;TextCreate;'Text'\n#Action;#Line;#Text;#Index\nTextSetValue;'string successfully set';TXT1.Out;2#}}
TEXT_SET_VALUE_TEXT=Object {{$Text$}}, in which it is necessary to change the line.
TEXT_SET_VALUE_LINE=Input line.
TEXT_SET_VALUE_INDEX=Line index, which is required to change. 
#//endregion

#//region actions.xml
XML_ADD_NODE_GENERAL_DESC=The purpose of the action is to add a new element at the end of the parental element Xml structure. It can be applied when necessary changes have to be done to the current object.If a NewXml parameter is indicated then the parameters {{$NodeName$}} and {{$Content$}} are ignored.
XML_ADD_NODE_ADDITIONAL_DESC=With the help of additional parameters one can transfer attributes for the new node. The name of the parameter contains the name of an attribute, in the value of a parameter the value of an attribute is specified. It is used when the insertion of the node is accompanied by the usage of NodeName and Content parameters.
XML_ADD_NODE_EXAMPLE={{`Example #1:`}}{{`1. Create an Xml structure by loading a file.`}}{{`Contents of an xml file: `}}{{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Add node to it by giving it the name and attribute 'id' and the meaning 'gift'`}}{{`3. Make sure that node has been added and contains the transferred attribute.`}}{{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'Xml.xml'\n#Action;#NodeName;#Xml;#id\nXmlAddNode;'ps';XML1.Out;'gift'\n#Assert;#Message\nXML1.Out.getChild('ps').getAttribute('id') == 'gift';'No such attribute'#}}\n{{`Example #2:`}}\n{{`1. Create object Xml similar to the object from the first example.`}}{{`2. Create second Xml object of the following content:`}} {{#\n<ps id=\\"gift\\">\n<body>P.S. I have a gift for you...</body>\n</ps>#}} {{`3. Add to it Xml structure applying parameter NewXml.`}}{{`4. Make sure that the structure has been added and contains the transferred attribute.`}}\n{{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'Xml.xml'\n#Id;#Action;#File\nXML2;XmlLoadFromFile;'Xml2.xml'\n#Action;#NewXML;#NodeName;#Xml\nXmlAddNode;XML2.Out;;XML1.Out\n#Assert;#Message\nXML1.Out.getChild('ps').getAttribute('id') == 'gift';'No such attribute'#}}
XML_ADD_NODE_XML=An Xml structure to which an action has to be done.
XML_ADD_NODE_NODE_NAME=The name of an added element.
XML_ADD_NODE_CONTENT_NAME=The contents of a new element.
XML_ADD_NODE_NEW_XML=Node that has to be added to the original structure. If it is indicated then parameters NodeName and Content are ignored.
XML_CHILDREN_GENERAL_DESC=The purpose of the action is to get the list of all the elements inside the transferred Xml. Later this list can be used for iteration and search of elements using their index.
XML_CHILDREN_OUTPUT_DESC=Returns the list (type List object) of all the affiliated nodes of a transferred element. Later this list can be used for iteration and search of elements using their index.
XML_CHILDREN_EXAMPLE=1. Create an Xml object by downloading it from the file.\n {{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}} {{`2. Get a list of all affiliated elements.`}}{{`3. Make sure the list has been created and its size is more than 0.`}}\n{{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'Xml.xml'\n#Id;#Action;#Xml\nXML2;XmlChildren;XML1.Out#}}
XML_CHILDREN_XML=An Xml structure to which an action needs to be applied. From the root of this structure a list of elements will be drawn.
XML_COMPARE_GENERAL_DESC=The purpose of the action is to compare two Xml structures.
XML_COMPARE_OUTPUT_DESC=True, if Xml structures are equal.
XML_COMPARE_EXAMPLE={{`1. Create an Xml structure from a file.`}}{{`2. Create two new Xml structures by choosing them using XPath from the uploaded Xml structure.`}}{{`3. Compare two Xml structures.`}}{{`4. Check the results of the comparison.`}}\n{{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'pathToTheFile'\n#Id;#Action;#Xpath;#NodeName;#Xml\nXML2;XmlSelect;'//friend';'newParent';XML1.Out\n#Id;#Action;#Expected;#Actual\nXMLCMP1;XmlCompare;XML2.Out.getChildren().get(0);XML2.Out.getChildren().get(1)\n#Assert;#Message\nXMLCMP1.Out;'Xmls does not equals'#}}
XML_COMPARE_ACTUAL=An Xml structure is the one that has to undergo comparison.
XML_COMPARE_EXPECTED=An Xml structure is the one that comparison has to be done to.
XML_COMPARE_IGNORE_NODE_ORDER=Ignore node order.
XML_CREATE_GENERAL_DESC=Create new xml.
XML_CREATE_EXAMPLE={{#\n#Id;#Action\nxml;XmlCreate#}}
XML_FIND_FIRST_GENERAL_DESC=The purpose of the action is to return (restore) the Xml structure, allocated using Xpath parameter from Xml document.The first appropriate to the condition element and all its parts will be returned.It is used when it is necessary to get a link to the part of a structure from the existing Xml document. The change of an output value of the action will lead to the change in Xml structure from which it was obtained.
XML_FIND_FIRST_OUTPUT_DESC=Link to Xml structure that contains the search result.
XML_FIND_FIRST_EXAMPLE={{`1. Create an object by downloading it from the file.`}}{{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Find the first element name.`}}{{`3. Check the output.`}} {{#\n#Id;#Action;#File\nXML2;XmlLoadFromFile;'/path/Xml.xml'\n#Id;#Action;#Xpath;#Xml\nXML2;XmlFindFirst;'//name';XML1.Out\n#Assert;#Message\nXML2.Out.getChild().getAttribute() == 'first';'No such attribute'#}}
XML_FIND_FIRST_XML=An Xml structure in which the element needs to be detected.
XML_FIND_FIRST_X_PATH=The Xpath, the path to the element.
XML_FROM_TEXT_GENERAL_DESC=The purpose of this action is to parse the XML structure from a text.
XML_FROM_TEXT_OUTPUT_DESC=XML structure.
XML_FROM_TEXT_EXAMPLE={{`1. Create Xml object by parsing the text.`}} {{`Contents of an text object:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Make sure that the object has been created and contains nodes.`}} {{#\n#Id;#Action;#Text\nXML1;XmlFromText;TEXT1\n#Assert;#Message\nXML1.Result.toString() == 'Passed';'No such attribute'#}}
XML_FROM_TEXT_TEXT={{$Text$}} object related to the xml.
XML_LOAD_FROM_FILE_GENERAL_DESC=The purpose of this action is to download the XML structure from a file.
XML_LOAD_FROM_FILE_OUTPUT_DESC=XML structure.
XML_LOAD_FROM_FILE_EXAMPLE={{`1. Create Xml object by downloading it from the file.`}} {{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Make sure that the object has been created and contains nodes.`}} {{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'PathToTheFile'\n#Assert;#Message\nXML1.Result.toString() == 'Passed';'No such attribute'#}}
XML_LOAD_FROM_FILE_FILE=The path to the file.
XML_REMOVE_GENERAL_DESC=The purpose of this action is to delete all the elements appropriate for the given XPath.
XML_REMOVE_EXAMPLE={{`1. Create an Xml object by downloading it from the file.`}}{{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Delete the element in transferring XPath.`}}{{`3. Make sure that the element has been deleted and its content is not in the report.`}} {{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'/path/Xml.xml'\n#Action;#Xpath;#Xml\nXmlRemove;'//from';XML1.Out\n#Action;#Xml;#Title\nXmlReport;XML1.Out;'Report Title'#}}
XML_REMOVE_XML=An Xml structure that needs to be changed (altered)
XML_REMOVE_XPATH=Formula for the search of an element.
XML_REPORT_GENERAL_DESC=The purpose of this action is to map the content of the Xml object in the report of a matrix run. It is used when there is a need to go through the content of the Xml object.
XML_REPORT_EXAMPLE={{`1. Create an Xml object by downloading it from the file.`}}{{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Reflect the content of the Xml object in the report.`}} {{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'/path/Xml.xml'\n#Action;#Xml;#Title\nXmlReport;Xml1;'Xml report'#}}
XML_REPORT_XML=The Xml structure that needs to be kept (preserved).
XML_REPORT_TITLE=The heading of the output Xml structure.
XML_REPORT_TO_REPORT=This parameter is used for directing the output from the given object to the external report created by the {{$ReportStart$}} action.
XML_REPORT_BEFORE_TESTCASE=Enables to output the table on the highest level of the report.
XML_SAVE_TO_FILE_GENERAL_DESC=The purpose of this action is to keep (store) of the transferred Xml structure in the assigned file.
XML_SAVE_TO_FILE_OUTPUT_DESC=True, if saved successfully.
XML_SAVE_TO_FILE_EXAMPLE={{`1. Save the Xml object into the file filename.xml`}}{{`2. Make sure that the check went well.`}} {{#\n#Id;#Action;#Xml;#File\nXSTF;XmlSaveToFile;Xml1;'path/filename.xml'\n#Assert;#Message\nXSTF.Out;'File was not saved'#}}
XML_SAVE_TO_FILE_XML=The Xml structure that needs to be kept (preserved).
XML_SAVE_TO_FILE_FILE_NAME=The path to the file. If the given path already contains a file then it will be replaced.
XML_SELECT_GENERAL_DESC=The purpose of the action is to return (restore) the Xml structure allocated using Xpath parameter from Xml document. The action returns all appropriate to the condition elements (an element) and all their (its) parts. The output value is a separate Xml structure and is not connected to the structure transferred in Xml parameter.
XML_SELECT_OUTPUT_DESC=Xml structure that contains the result of the demand.
XML_SELECT_EXAMPLE={{`Create an Xml object by downloading it from the file.`}}{{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}} \n{{`2. Find the element from.`}}{{`3. Make sure that a new Xml structure has been created.`}} {{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'/path/Xml.xml'\n#Id;#Action;#Xml;#Xpath;#NodeName\nXS;XmlSelect;Xml1;'//from';'sub_item'\n#Assert;#Message\nXS.Out != null;'Object is null'#}}
XML_SELECT_FIRST_GENERAL_DESC=The purpose of the action is to return (restore) the Xml structure allocated using Xpath parameter from Xml document. The first appropriate to the condition element and all its parts will be returned. The output value is a separate Xml structure and is not connected to the structure transferred in Xml parameter.
XML_SELECT_FIRST_OUTPUT_DESC=Xml structure containing the result of a demand.
XML_SELECT_FIRST_EXAMPLE={{`1. Create Xml object by downloading it from the file.`}}{{`Contents of an xml file:`}} {{#\n<note> \n<to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{`2. Find the first element from.`}} {{`3. Check the outcome`}} {{#\n#Id;#Action;#File\nXML2;XmlLoadFromFile;'/path/Xml.xml'\n#Id;#Action;#Xpath;#Xml\nXML2;XmlFindFirst;'//name';XML1.Out\n#Assert;#Message\nXML2.Out.getChild().getAttribute() == 'first';'No such attribute'#}}
XML_SELECT_XML=An Xml structure in which the element needs to be detected.
XML_SELECT_NODE_NAME=The name of a core element to which the collection of the found elements will be allocated.
XML_SELECT_X_PATH=The Xpath, the path to the element.
XML_SELECT_FIRST_XML=An Xml structure in which an operation needs to be done.
XML_SELECT_FIRST_NODE_NAME=Insert the selection result into assigned tag.
XML_SELECT_FIRST_X_PATH=The Xpath, the path to the element.
XML_SET_NODE_GENERAL_DESC=The purpose of the action is to transfer the content of the core element of the Xml structure.
XML_SET_NODE_ADDITIONAL_DESC=With the help of additional parameters attributes for the the core node can be transferred. Parameter is given the name of an attribute, the value of the parameter has the value of the attribute.
XML_SET_NODE_EXAMPLE={{`1. Create an Xml object by downloading it from the file.`}}{{`2. Transfer to the core element content 'Text for insert'`}}{{`3. Contents of an xml file:`}} {{#\n<note><to>\n<friend>\n<name id=\\"first\\">Tove</name>\n</friend>\n</to>\n<from>\n<friend>\n<name id=\\"second\\">Jani</name>\n</friend>\n</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>#}}\n{{#\n#Id;#Action;#File\nXML1;XmlLoadFromFile;'/path/Xml.xml'\n#Id;#Action;#Text;#Xml\nXSN;XmlSetNode;'Text for insert';Xml#}}
XML_SET_NODE_XML=A type of Xml object to which an action needs to be applied.
XML_SET_NODE_TEXT=Content which has to be transferred to the element.
#//endregion

#//endregion

#//region tool

#region tool.wizard
WIZARD_SUCCESS=Wizard '{'{0}'}' success
WIZARD_ERROR_ON_CONFIG_REFRESH=Error on refresh config
WIZARD_ERROR_ON_SHOW_ELEMENT=Error on show element
WIZARD_ERROR_ON_DISPLAY_WINDOW=Error on display window
WIZARD_ERROR_ON_CREATE_DOCUMENT_2=Error on create {0} of kind {1}
WIZARD_ERROR_ON_LOAD_DOC_1=Error on load {0}
WIZARD_ERROR_ON_CREATE_DOC_1=Error on save {0}
WIZARD_ERROR_ON_CREATE_COPY=Error on create copy
WIZARD_WIZARD=Wizard
WIZARDS=Wizards
WIZARD_NO_ONE_ACCESSIBLE=No one wizard is accessible here
WIZARD_CHOOSE_WIZARD=Choose wizard
WIZARD_HELP=Help
WIZARD_ACCEPT=Accept
WIZARD_REFUSE=Refuse
#endregion

#region tool.wizard.all
WIZARD_START_CONNECTION=Start
WIZARD_SCAN=Scan
WIZARD_CHECK_TABLE=Check table
WIZARD_SELECT_CONNECTION_INFO=Please select stored connection and dialog
WIZARD_SELECT_DIALOG=Select dialog: 
WIZARD_SELECT_STORED_CONN=Select stored connection:
WIZARD_CONNECT=Connect
WIZARD_STATUS_FAILED=Failed
WIZARD_STOP_APPLICATION=Stop
WIZARD_ERROR_ON_APPLICATION_STOP=Error on application stop
WIZARD_STATUS_SUCCESS=Success
WIZARD_STATUS_LOADING=Loading...
WIZARD_ERROR_ON_CLOSE_WIZARD=Error on close wizard
WIZARD_TOOLTIP_NAME_OF_VAR=Enter name of var here
WIZARD_LABEL_STATUS=Status: 
WIZARD_LABEL_STORE_AS=Store as: 
WIZARD_SELECT_CONVERTER_FROM_COMBOBOX=Select converter from the above combobox
WIZARD_STATUS_SCANNING=Scanning...
WIZARD_APP_RESIZE_DESCRIPTION=It converting the action ApplicationResize from old to new format.\nOld action contains 3 fields : Maximize, Minimize and Normal.\nUser can set several parameters and it will throw exception.\nIn new format user can''t do it, because these parameters replaced to one new parameter : Resize\nExample.\nOld action :\n    #Action;$AppConnection;$Maximize\n    ApplicationResize;CALL_7;true\nwill converted to \n    #Action;$AppConnection;$Resize\n    ApplicationResize;Resize.Maximize\n
WIZARD_LABEL_DIALOG=Dialog : 
WIZARD_LABEL_SELFID=Self id : 
WIZARD_ERROR_ON_SET_SELF_ID=Error on set self id
WIZARD_LABEL_ON_OPEN=On open
WIZARD_LABEL_ON_CLOSE=On close
WIZARD_SELF_ID_NOT_FOUND=Self control not found
WIZARD_SELF_CONTROL_IS_EMPTY=Self control is empty
WIZARD_APPLICATION_NOT_STARTED=Application is not started.\nStart it before call the wizard.
WIZARD_DICTIONARY_EXCEPTION=DictionaryWizard exception
WIZARD_ERROR_ON_GENERATE_ON_OPEN=Error on generate onOpen
WIZARD_ERROR_ON_GENERATE_ON_CLOSE=Error on generate onClose
WIZARD_NOTHING_TO_UPDATE_INFO=Nothing to update
WIZARD_UPDATING_ELEMENTS=Updating elements
WIZARD_START_UPDATING_ITEMS=Start updating item {0} of {1}
WIZARD_ERROR_ON_ARRANGE_ONE=Error on arrange one
WIZARD_END_UPDATING=End updating {0} of {1}
WIZARD_ERROR_ON_FIND=Error on find elements
WIZARD_LABEL_CONNECTION=Connection : 
WIZARD_NUMBER=Number
WIZARD_ABOUT=About
WIZARD_LESS=Less
WIZARD_GREAT=Great
WIZARD_BETWEEN=Between
WIZARD_LABEL_SELECT_DISTANCE=Select distance : 
WIZARD_ALL=All
WIZARD_SIGNIFICANT=Significant
WIZARD_USE_DISTANCE=Use distances : 
WIZARD_SELECT_FUNCTIONS=Select functions : 
WIZARD_ALL_OK=All ok
WIZARD_CHECKING=Checking...
WIZARD_SELECT_MORE_ELEMENTS=Select more than zero elements from listView above
WIZARD_CREATING_TABLE=Creating table...
WIZARD_RELATION=Relation {0} -> {1}
WIZARD_CHECK=Check
WIZARD_SAVE=Save
WIZARD_CANT_SAVE_INVALID_DOSPEC=Can''t save, because {0} is invalid doSpec function
WIZARD_CANT_CHECK_INVALID_DOSPEC=Can''t check, because {0} is invalid doSpec function
WIZARD_VARIABLE_WITH_NAME=Variable with name ''{0}'' already exist
WIZARD_NAMESPACES=Namespases
WIZARD_WHERE_TO_MOVE=Where to move: 
WIZARD_INVOKE_FROM_NAMESPACE=The wizard must be invoked on SubCase from Namespace
WIZARD_MATRIX_CONTAINS_REFERENCES_2={0} contains {1} reference(s)
WIZARD_NO_CHANGES_NEEDED=No changes needed.
WIZARD_OLD_VALUE_1=old value : {0}
WIZARD_SELECT_NEW_VALUE=, select new value : 
WIZARD_DICTIONARY_NAME_1=Dictionary : {0}
WIZARD_DICTIONARY_OK=Dictionary is ok
WIZARD_ERROR_ON_TABLE_CREATE=Error while table creating. Please check file name or file extension.
WIZARD_NO_FILE_NAME=No file name specified.
WIZARD_ERROR_IN_FILENAME=Error in filename.
WIZARD_FILE_NOT_CSV_1=The file ''{0}'' is not a CSV.
WIZARD_FILE_READ_ONLY_1=The file ''{0}'' is read-only and can''t be changed.
WIZARD_DELIMITER_INCORRECT=Delimiter is incorrect or empty.
WIZARD_ENTER_XPATH=Enter xpath here
WIZARD_HELPER=Helper
WIZARD_RELATIVE=Relative
WIZARD_USE_TEXT=use text()
#endregion

#//region tool.custom.helper
FORMULA_INTERPRETER=Formula interpreter
PARAMETERS_NAME=Parameters name = {0}
#//endregion

#endregion

#region plugins
PLUGIN_COMMON_DESCRIPTION=empty

#region plugins.app.web
WEB_PLUGIN_DESCRIPTION=Web plugin used for testing web applications via browser. Based on Selenium framework and available for browsers, supports this framework. Supports crossbrowser testing.
WEB_PLUGIN_DIFFERENCE=You can't connect to already started application. {{`{{/Actions:/}}`}}{{`Action ApplicationCloseWindow has no differences.`}}{{`Action ApplicationConnectTo is not supported.`}}{{`Action ApplicationMove is not supported.`}}{{`Action ApplicationNavigate has no differences.`}}{{`Action ApplicationNewInstance has no differences.`}}{{`Action ApplicationRefresh has no differences.`}}{{`Action ApplicationResize can’t minimize window.`}}{{`Action ApplicationSetProperties has no differences.`}}{{`Action ApplicationSwitchTo has no differences.`}}{{`Action DialogAlert has no differences.`}}{{`Action DialogSwitchToWindow has no differences.`}}
WEB_PLUGIN_LOG_LEVEL=Set a log level for plugin. You can use 'ALL', 'ERROR', 'INFO', etc. But we are recommend use 'ALL' (default)
WEB_PLUGIN_JRE_EXEC=If You want use not default version of JRE, You can set path to it.
WEB_PLUGIN_JRE_ARGS=Set params for run plugin. For example, initial and maximum memory allocation pool
WEB_PLUGIN_CHROME_DRIVER=Set Google Chrome driver path
WEB_PLUGIN_GECKO_DRIVER=Set Firefox driver path
WEB_PLUGIN_IE_DRIVER=Set Internet Explorer driver path
WEB_PLUGIN_CHROME_DRIVER_BINARY=Sets the path to the Chrome executable. This path should exist on the machine which will launch Chrome. The path should either be absolute or relative to the location of running ChromeDriver server.
WEB_PLUGIN_FIREFOX_PROFILE=Set folder for Firefox user profile, which contains info about visited sites, etc
WEB_PLUGIN_PRIVATE_MODE=Private Browsing allows you to browse the Internet without saving any information about which sites and pages you’ve visited. Internet Explorer only.
WEB_PLUGIN_BROWSER=Set browser via combobox which should be used to run application
WEB_PLUGIN_URL=Set URL which should opened when application starts. Set full path. Remember about difference between http/https
WEB_PLUGIN_WHERE_OPEN=Set where new application should opened: in new tab, in new window or in first opened tab
WEB_PLUGIN_PROPERTY_URL=You can get or set URL property
WEB_PLUGIN_PROPERTY_TITLE=You can get or set title property
WEB_PLUGIN_PROPERTY_ALL_TITLES=You can get all titles of started apps
WEB_PLUGIN_PROPERTY_COOKIE=You can get cookie property
WEB_PLUGIN_PROPERTY_ALL_COOKIES=You can get all cookies from started browser
WEB_PLUGIN_PROPERTY_ADD_COOKIE=You can add cookie to browser
WEB_PLUGIN_PROPERTY_REMOVE_COOKIE=You can remove determined cookie. Just set cookie name
WEB_PLUGIN_PROPERTY_REMOVE_ALL_COOKIES=You can remove all cookies
WEB_PLUGIN_PROPERTY_TAB=empty
#endregion

#region plugins.app.win
WIN_PLUGIN_DESCRIPTION=Plugin for testing applications, written for OS Windows. Based on UIAutomation framework.
WIN_PLUGIN_DIFFERENCE=You can't work with each cell of table like as independent element. You can work only with whole table. {{`{{/Actions:/}}`}}{{`Action ApplicationCloseWindow is not supported.`}}{{`Action ApplicationConnectTo has no differences.`}}{{`Action ApplicationMove has no differences.`}}{{`Action ApplicationNavigate is not supported.`}}{{`Action ApplicationNewInstance is not supported.`}}{{`Action ApplicationRefresh has no differences.`}}{{`Action ApplicationResize - if You want to change window size, but he is already maximazed, when You should change his size to normal and the to required. Same with already minimized window.`}}{{`Action ApplicationSetProperties is not supported.`}}{{`Action ApplicationSwitchTo is not supported.`}}{{`Action DialogAlert has no differences.`}}{{`Action DialogSwitchToWindow is not supported.`}}
WIN_PLUGIN_LOG_LEVEL=Set a log level for plugin. You can use 'ALL' or 'ERROR', but we are recommend use 'ALL' (default)
WIN_PLUGIN_JRE_EXEC=If You want use not default version of JRE, You can set path to it.
WIN_PLUGIN_JRE_ARGS=Set params for run plugin. For example, initial and maximum memory allocation pool
WIN_PLUGIN_MAX_TIMEOUT=Set max wait time for finding elements in window. Warning! If You want to find a lot of elements in window please set high value.
WIN_PLUGIN_ALWAYS_TO_FRONT=Run application in the foreground. All actions with application (click, for example) make window in foreground.
WIN_PLUGIN_MAIN_WINDOW=You can connect to already started application by set his main window name
WIN_PLUGIN_HEIGHT=You can connect to already started application by set his height AND width
WIN_PLUGIN_WIDTH=You can connect to already started application by set his width AND height
WIN_PLUGIN_PID=You can connect to started application via PID (use task manager to knew this param for application)
WIN_PLUGIN_CONTROL_KIND=You can connect to application by set his ControlKind. You can connect not only to window (ControlKind.Window), also You can connect to pane (ControlKind.Pane). Both of them Ypu ccan find via UIVerify.
WIN_PLUGIN_TIMEOUT=Max time for connect to already started application (milliseconds). By default 5 seconds.
WIN_PLUGIN_EXEC=Set executed application
WIN_PLUGIN_WORK_DIR=Set folder for executed application
WIN_PLUGIN_ARGS=Set params for executed application
WIN_PLUGIN_RECTANGLE=You can get width and height of started application and coordinates (x, y) on screen
WIN_PLUGIN_TITLE=You can get title of started application
#endregion

#region plugins.app.swing
SWING_PLUGIN_DESCRIPTION=Plugin for testing application, created via Swing library. Based on FEST library.
SWING_PLUGIN_DIFFERENCE=You can't work with each cell of table like as independent element. You can work only with whole table. {{`{{/Actions:/}}`}}{{`Action ApplicationCloseWindow is not supported.`}}{{`Action ApplicationConnectTo has no differences.`}}{{`Action ApplicationMove has no differences.`}}{{`Action ApplicationNavigate is not supported.`}}{{`Action ApplicationNewInstance is not supported.`}}{{`Action ApplicationRefresh is not supported.`}}{{`Action ApplicationResize has no differences.`}}{{`Action ApplicationSetProperties is not supported.`}}{{`Action ApplicationSwitchTo is not supported.`}}{{`Action DialogAlert has no differences.`}}{{`Action DialogSwitchToWindow is not supported.`}}
SWING_PLUGIN_LOG_LEVEL=Set a log level for plugin. You can use 'ALL', 'ERROR', 'INFO', etc. But we are recommend use 'ALL' (default)
SWING_PLUGIN_JRE_EXEC=If You want use not default version of JRE, You can set path to it.
SWING_PLUGIN_JRE_ARGS=Set params for run plugin. For example, initial and maximum memory allocation pool
SWING_PLUGIN_MAIN_CLASS=Set main class of started application
SWING_PLUGIN_JAR=Set jar for start application
SWING_PLUGIN_ARGS=Set arguments for start application
SWING_PLUGIN_URL=Used for download application via jnpl and run it
SWING_PLUGIN_TITLE=You can get title of started application
#endregion

#endregion

#region common.documentation
SUPPORTED_CONTROLS=Supported controls
DIFFERENCES=Differences
PARAMETER=Parameter
DESCRIPTION=Description
EXAMPLE=Example
#endregion

#region api.common
PARAMETERS_KIND_LOAD=Parameters for working with plugin
PARAMETERS_KIND_START=Parameters for run application
PARAMETERS_KIND_CONNECT=Parameters for connecting to application
PARAMETERS_KIND_STOP=Parameters for stoping application
PARAMETERS_KIND_GET_PROPERTY=Parameters for getting application property
PARAMETERS_KIND_SET_PROPERTY=Parameters for setting application property
PARAMETERS_KIND_ENCODE=empty
PARAMETERS_KIND_PROPS=empty
PARAMETERS_KIND_NEW_INSTANCE=Parameters for creating new instance of application
#endregion
