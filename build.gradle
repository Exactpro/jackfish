import java.nio.file.Files
import java.nio.file.Paths

apply plugin : 'java'

configurations {
    sqlData
    unixDriver
    winDriver
    macDriver
}

repositories {
	maven {
		name "ExactproArtifactory"
		url "http://arti.exactpro.com/libs-release/"
	}
}

dependencies {
    sqlData(group: 'mysql', name: 'mysql-connector-java', version: '5.1.26')
    sqlData(group: 'com.oracle', name: 'ojdbc7', version: '12.1.0.1')
    sqlData(group: 'org.postgresql', name: 'postgresql', version: '9.0-801.jdbc4')

    unixDriver(group: 'com.googleapis.storage.chromedriver', name: 'chromedriver-linux', version: '2.25', classifier: 'x86', ext: 'elf')
    unixDriver(group: 'com.googleapis.storage.chromedriver', name: 'chromedriver-linux', version: '2.25', classifier: 'x64', ext: 'elf')
    unixDriver(group: 'org.mozilla.geckodriver', name: 'geckodriver-linux', version: '0.11.1', classifier: 'x86', ext: 'elf')
    unixDriver(group: 'org.mozilla.geckodriver', name: 'geckodriver-linux', version: '0.11.1', classifier: 'x64', ext: 'elf')
    /*
    winDriver(group: 'com.googleapis.storage.chromedriver', name: 'chromedriver-win', version: '2.24', classifier: 'x86', ext: 'exe')
    winDriver(group: 'org.mozilla.geckodriver', name: 'geckodriver-win', version: '0.11.1', classifier: 'x86', ext: 'exe')
    winDriver(group: 'org.mozilla.geckodriver', name: 'geckodriver-win', version: '0.11.1', classifier: 'x64', ext: 'exe')
    winDriver(group: 'org.seleniumhq.iedriverserver', name: 'iedriverserver', version: '2.53.1', classifier: 'x86', ext: 'exe')
    winDriver(group: 'org.seleniumhq.iedriverserver', name: 'iedriverserver', version: '2.53.1', classifier: 'x64', ext: 'exe')
    macDriver(group: 'com.googleapis.storage.chromedriver', name: 'chromedriver-mac', version: '2.24', classifier: 'x64', ext: 'elf')
    macDriver(group: 'org.mozilla.geckodriver', name: 'geckodriver-macos', version: '0.11.1', classifier: 'x64', ext: 'elf')
      */
}

rootProject.ext {
        version = '4.3.0.' + (System.getProperty('revision') ?: 'local_build')
        println version

	jfSourceDir	= 'BuildProject'
	appsDir		= jfSourceDir + '/apps';
	clientsDir	= jfSourceDir + '/clients';
	docsDir		= jfSourceDir + '/docs';
	libjfDir	= jfSourceDir + '/libjf';
	dicDir	        = jfSourceDir + '/dic';
	matricesDir	= jfSourceDir + '/matrices';
	servicesDir     = jfSourceDir + '/services';
	sqlDir		= jfSourceDir + '/sql';
	reportsDir	= jfSourceDir + '/reports';

	copyTo		= { Project proj, String dest ->
		def s = Paths.get(proj.buildDir.path + '/libs/' + proj.name + '.jar')
		def d = Paths.get(dest + '/' + proj.ext.jarName)
		Files.copy(s, d)
	}

	copyAllFiles = { File src, File dest ->
		copyFolder(src,dest);
	}

	copyFolder = {File src, File dest ->
		if(src.isDirectory()){
			//if directory not exists, create it
			if(!dest.exists()){
				dest.mkdir();
			}

			//list all the directory contents
			String[] files = src.list();

			for (String file : files) {
				//construct the src and dest file structure
				File srcFile = new File(src, file);
				File destFile = new File(dest, file);
				//recursive copy
				copyFolder(srcFile,destFile);
			}

		}else{
			//if file, then copy it
			//Use bytes stream to support all file types
			InputStream inS = new FileInputStream(src);
			OutputStream out = new FileOutputStream(dest);

			byte[] buffer = new byte[1024];

			int length;
			//copy the file content in bytes
			while ((length = inS.read(buffer)) > 0){
				out.write(buffer, 0, length);
			}

			inS.close();
			out.close();
		}
	}
}

subprojects {
	apply plugin : 'java'

	def rootProjectLocation = getRootProject().getRootDir().getAbsolutePath();
	def projectName = getProject().getName();

	def dir = {String s -> rootProjectLocation + '/' + projectName + s};

	def releaseDir = dir('/release');
	def buildDir = dir('/build');

	repositories {
		maven {
			name "ExactproArtifactory"
			url "http://arti.exactpro.com/libs-release/"
		}
//		mavenCentral()
	}

	clean {
		new File(releaseDir).deleteDir()
	}

	sourceSets {
		main {
			java {
				srcDir('src')
			}
			resources {
				srcDir('src') // TODO move resources to resources dir
			}
		}
	}

	compileJava {
		options.warnings = false;
		options.deprecation = false;
	}

	task distribute() { // TODO implement distribute.doLast for all plugins which need it
		dependsOn clean, jar
	}
}

task replaceVersion {
	dependsOn clean
	//TODO think about it. We need remove all none .java file from src dir
	def versionFile = new File(rootProject.rootDir.path+'/core/src/com/exactprosystems/jf/common/version/version.properties')
	versionFile.text = 'VERSION = ' + version
}

task makeTool() {
	subprojects.each {
		dependsOn("${it.path}:distribute")
	}

        delete fileTree('.') {
               include 'build_*.zip'
        }


	def jfProject = new File(jfSourceDir);
	if (jfProject.exists()) {
		jfProject.deleteDir();
	}
	jfProject.mkdir();

	def mkdir = {String s -> new File(s).mkdir()}

	mkdir(appsDir)
	mkdir(clientsDir)
	mkdir(reportsDir)
	mkdir(docsDir)
        mkdir(libjfDir)
        mkdir(dicDir)
	mkdir(matricesDir)
	mkdir(servicesDir)
	mkdir(sqlDir)

	copyAllFiles(new File(project(":core").projectDir.path + '/matrices/'), new File(matricesDir))
	copyAllFiles(new File(project(":core").projectDir.path + '/docs/'), new File(docsDir))
	copyAllFiles(new File(project(":core").projectDir.path + '/libjf/'), new File(libjfDir))
	copyAllFiles(new File(project(":core").projectDir.path + '/dic/'), new File(dicDir))

	Files.copy(Paths.get(project(":core").projectDir.path + '/config.xml'), Paths.get(jfSourceDir + '/config.xml'))
	Files.copy(Paths.get(project(":core").projectDir.path + '/run.bat'), Paths.get(jfSourceDir + '/run.bat'))
	Files.copy(Paths.get(project(":core").projectDir.path + '/run.sh'), Paths.get(jfSourceDir + '/run.sh'))
	Files.copy(Paths.get(project(":core").projectDir.path + '/vars.ini'), Paths.get(jfSourceDir + '/vars.ini'))
}


task createTool(type: Zip) {
	dependsOn makeTool

	destinationDir new File('.')
	archiveName = 'build_' + rootProject.ext.version + '.zip'

	into ('/') {
		from jfSourceDir
	}
	into ('sql') {
		from configurations.sqlData
	}

	into ('/apps/unix') {
		from configurations.unixDriver
	}
        rename '^(.*)\\.elf$', '$1.'
        fileMode 0755

	into ('/apps/win') {
		from configurations.winDriver
	}

	into ('/apps/mac') {
		from configurations.macDriver
	}
        rename '^(.*)\\.elf$', '$1.'
        fileMode 0755
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0' //we want gradle 3.0 to run this project
}

clean {
}