/*******************************************************************************
 * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

plugins {
	id 'java'
	id 'maven'
	id 'com.github.johnrengelman.shadow' version '2.0.4' apply false
	id 'com.jfrog.artifactory' version '2.2.5'
	id 'com.ullink.msbuild' version '2.19' apply false // more recent versions may require .NET 4.6
	id 'com.ullink.nuget' version '2.15' apply false
	id 'de.undercouch.download' version '3.4.3'
    id 'org.gretty' version '2.2.0' apply false
    id 'com.github.michaelruocco.embedded-mysql-plugin' version '2.1.7' apply false
}

apply plugin: 'org.gretty'
apply plugin: 'com.github.michaelruocco.embedded-mysql-plugin' 

artifactoryPublish.skip = true

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.util.regex.Pattern
import org.gradle.plugins.ide.eclipse.model.AccessRule

defaultTasks 'createTool'

configurations {
	sqlData
}

repositories {
	jcenter()
}

dependencies {
	sqlData(group: 'mysql', name: 'mysql-connector-java', version: '5.1.26')
	//sqlData(group: 'com.oracle', name: 'ojdbc7', version: '12.1.0.1')
	sqlData(group: 'org.postgresql', name: 'postgresql', version: '9.4.1212.jre7')
	sqlData(group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.1.0.jre8', transitive : false)
}

def ieDriverVersion = '3.14.0'
def chromeDriverVersion = '2.40'
def geckoDriverVersion = '0.23.0'

project.ext {
	jfVersion = '4.5.13'
	version = jfVersion + '.' + (System.getProperty('revision') ?: 'local_build')
	println version

	jfSourceDir	= project.rootDir.path + '/core'
	appsDir		= jfSourceDir + '/apps';
	clientsDir	= jfSourceDir + '/clients';
	docsDir		= jfSourceDir + '/docs';
	libjfDir	= jfSourceDir + '/libjf';
	dicDir		= jfSourceDir + '/dic';
	matricesDir	= jfSourceDir + '/matrices';
	servicesDir	= jfSourceDir + '/services';
	sqlDir		= jfSourceDir + '/sql';
	reportsDir	= jfSourceDir + '/reports';
	sharedDir   = file("${project.rootDir}/shared");
	coreProject	= 'core';
}


allprojects {
	ext {
		// Set defaults
		if (!project.hasProperty("revision")) {
			revision = '00000' // mark local builds
		}
		if (!project.hasProperty('build_number')) {
			build_number = '0000' // mark local builds
		}
		if (!project.hasProperty('git_hash')) {
			git_hash = 'local_build'
		}
	}
}

subprojects {
	apply plugin: 'maven'
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'artifactory'

	group = 'com.exactprosystems.jf'
	version = rootProject.ext.jfVersion + '-SNAPSHOT'

	defaultTasks 'distribute'

	def rootProjectLocation = getRootProject().getRootDir().getAbsolutePath();
	def projectName = getProject().getName();

	def dir = {String s -> rootProjectLocation + '/' + projectName + s};

	def releaseDir = dir('/release');
	def buildDir = dir('/build');

	repositories {
		
		maven {
			name "ArtifactoryLocal" //used for local builds
			url "${project.rootDir}/artifactory"
		}
		mavenCentral()
	}
	
	buildscript { // artifacrory plugin
		configurations.all {
		   resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		}
	}

	configurations.all {
	   resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}

	clean << {
		file(releaseDir).deleteDir()
	}

	eclipse {
		classpath {
			file {
				whenMerged {
					def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
					jre.accessRules.add(new AccessRule('3', '**'))
				}
			}
		}
	}

	idea {
		module {
			outputDir = file('bin');
		}
	}

	compileJava {
		options.warnings = false;
		options.deprecation = false;
	}

	task distribute() { // TODO implement distribute.doLast for all plugins which need it
		dependsOn clean, jar
	}
	
	jar {
		manifest {
			attributes('Implementation-Version': "${revision}")
			attributes('Git_Hash': "${git_hash}")
		}
	}

	uploadArchives {
		repositories.mavenDeployer {
			uniqueVersion = false // publish non unique snapshots to local repository
			repository(url: "file://${sharedDir}")
			doLast {
			// Remove any invalid maven-metadata.xml files that may have been created
			// for SNAPSHOT versions that are *not* uniquely versioned.
				pom*.each { pom ->
					if (pom.version.endsWith('-SNAPSHOT')) {
						final File artifactDir = new File(rootProject.ext.sharedDir,
								pom.groupId.replace('.', '/')
								+ '/' + pom.artifactId
								+ '/' + pom.version)
						delete fileTree(dir: artifactDir, include: 'maven-metadata.xml*')
					}
				}
			}
		}
		doFirst { sharedDir.mkdirs() }
	}
}

task makeTool() {
	subprojects.each {
		dependsOn("${it.path}:distribute")
	}

	delete fileTree('.') {
		include 'build_*.zip'
	}
}

def buildDir = file('build')
def seleniumDir = new File(buildDir, 'selenium')
def macDriversDir = new File(seleniumDir, 'mac')
def linuxDriversDir = new File (seleniumDir, 'unix')
def windowsDriversDir = new File(seleniumDir, 'win')

task getChromeDrivers << {
	def baseUrl = "https://chromedriver.storage.googleapis.com/${chromeDriverVersion}"
	
	[   [ os: 'linux64', dest: linuxDriversDir ],
		[ os: 'mac64', dest: macDriversDir ],
		[ os: 'win32', dest: windowsDriversDir ]
	].each { spec ->
		def archiveName = "chromedriver_${spec.os}.zip"

		download {
			src "${baseUrl}/${archiveName}"
			dest buildDir
			overwrite false
		}
	
		copy {
			from zipTree(new File(buildDir, archiveName))
			include 'chromedriver'
			include 'chromedriver.*'
			into spec.dest
			rename ~/^chromedriver(|\..+)$/, "chromedriver_${chromeDriverVersion}\$1"
		}
	}
}

task getGeckoDrivers << {
	def baseUrl = "https://github.com/mozilla/geckodriver/releases/download/v${geckoDriverVersion}"
	
	[   [ os: 'linux32', dest: linuxDriversDir, format: 'tgz' ],
		[ os: 'linux64', dest: linuxDriversDir, format: 'tgz'  ],
		[ os: 'macos', dest: macDriversDir, format: 'tgz'  ],
		[ os: 'win32', dest: windowsDriversDir ],
		[ os: 'win64', dest: windowsDriversDir ]
	].each { spec ->
		def format = spec.get('format', 'zip') 
		String ext
		switch (format) {
			case 'zip':
				ext = 'zip'
				break
			case 'tgz':
				ext = 'tar.gz'
				break
		}
		def archiveName = "geckodriver-v${geckoDriverVersion}-${spec.os}.${ext}"
	
		download {
			src "${baseUrl}/${archiveName}"
			dest buildDir
			overwrite false
		}
	
		def archiveFile = new File(buildDir, archiveName)
		copy {
			switch (format) {
				case 'zip':
					from zipTree(archiveFile)
					break
				case 'tgz':
					from tarTree(archiveFile)
					break
			}
			include 'geckodriver'
			include 'geckodriver.*'
			into spec.dest
			rename ~/^geckodriver(|\..+)$/, "geckodriver-v${geckoDriverVersion}-${spec.os}\$1"
		}
	}
}

task getIEDrivers << {
	def ieDriverFolder = ieDriverVersion.split('\\.')[0..1].join('.')
	def baseUrl = "https://selenium-release.storage.googleapis.com/${ieDriverFolder}"
	def ieDriverExeName = 'IEDriverServer.exe'
	
	[   [ os: 'Win32', dest: windowsDriversDir ],
		[ os: 'x64', dest: windowsDriversDir ]
	].each { spec ->
		def archiveName = "IEDriverServer_${spec.os}_${ieDriverVersion}.zip"
	
		download {
			src "${baseUrl}/${archiveName}"
			dest buildDir
			overwrite false
		}
	
		copy {
			from zipTree(new File(buildDir, archiveName))
			include 'IEDriverServer'
			include 'IEDriverServer.*'
			into spec.dest
			rename ~/^IEDriverServer(|\..+)$/, "IEDriverServer_${spec.os}_${ieDriverVersion}\$1"
		}
	}
}

task getSeleniumDrivers {
	dependsOn getChromeDrivers
	dependsOn getGeckoDrivers
	dependsOn getIEDrivers
}

task copyData(type: Copy) {

	dependsOn makeTool
	dependsOn getSeleniumDrivers
	
	destinationDir = project(':core').projectDir

	into ('sql') {
		from configurations.sqlData
	}
	
	into ('apps') {
		from seleniumDir
	}
	fileMode 0755
}

task copyPlugins(type: Copy) {

	destinationDir = project(':core').projectDir

	rename '(.+)-[^-]+-SNAPSHOT-all\\.jar', '$1.jar'
	fileMode 0755
}

task copyMocks(type: Copy) {
	
	destinationDir = project(':mocks').projectDir
	rename '(.+)-[^-]+-SNAPSHOT-all\\.jar', '$1.jar'

	fileMode 0755
}

task copyDistro(type: Copy) {
	destinationDir = project(':core').projectDir
}

configure(subprojects.findAll { it.path ==~ /\:core/ }) {
	afterEvaluate { Project pluginProject ->
		rootProject.copyPlugins {
			into ('.') {
				from pluginProject.tasks.shadowJar
			}
		}
	}
}

configure(subprojects.findAll { it.path ==~ /\:plugins\:app\:.+/ }) {
	afterEvaluate { Project pluginProject ->
		rootProject.copyPlugins {
			into ('apps') {
				from pluginProject.tasks.shadowJar
			}
		}
	}
}

configure(subprojects.findAll { it.path ==~ /\:plugins\:client\:.+/ }) {
	afterEvaluate { Project pluginProject ->
		rootProject.copyPlugins {
			into ('clients') {
				from pluginProject.tasks.shadowJar
			}
		}
	}
}

configure(subprojects.findAll { it.path ==~ /\:plugins\:service\:.+/ }) {
	afterEvaluate { Project pluginProject ->
		rootProject.copyPlugins {
			into ('services') {
				from pluginProject.tasks.shadowJar
			}
		}
	}
}

configure(subprojects.findAll { it.path ==~ /\:mocks\:.+/ }) {
	afterEvaluate { Project pluginProject ->
		if (pluginProject.tasks.hasProperty('shadowJar')) {
			rootProject.copyMocks {
				into (pluginProject.name) {
					from pluginProject.tasks.shadowJar
				}
			}
		}
	}
}

configure(subprojects.findAll { it.path ==~ /\:plugins\:.+/ }) {
	afterEvaluate { Project pluginProject ->
		def resourcesDir = pluginProject.projectDir.toPath().resolve(Paths.get('src', 'distro', 'resources')).toFile()
		if (resourcesDir.exists()) {
			rootProject.copyDistro {
				into ('.') {
					from resourcesDir
				}
			}
		}
	}
}

task createTool(type: Zip) {
	dependsOn copyData
	dependsOn copyPlugins
	dependsOn copyMocks
	dependsOn copyDistro

	destinationDir = file('.')
	archiveName = 'build_' + rootProject.ext.version + '.zip'

	from (jfSourceDir) {
		exclude("build*")
		exclude(".*")
		exclude("src")
		exclude("bin")
		exclude("reports/*")
		exclude("logs")
		exclude("remote_out.txt")
	}
}

clean {
}

farm {
    webapp ':mocks:web', contextPath: '/web', inplace: true
}

tasks.whenTaskAdded { aTask -> if (aTask.name == 'farmIntegrationTest') {
    farmIntegrationTest {
        dependsOn startEmbeddedMysql
        finalizedBy stopEmbeddedMysql
        doFirst {
            mkdir 'reports'
        }
        doLast {
			def JF_EXTRAS = System.getProperty("JF_EXTRAS")
			def searchDirs = ['.']
			if (JF_EXTRAS != null) {
				searchDirs.addAll(JF_EXTRAS.split(File.pathSeparator))
			}
			searchDirs.each { searchDir ->
				def integrationDir = new File(searchDir, 'integrationTests')

				if (!integrationDir.exists()) return

				file(integrationDir).eachDir() { testDir ->
					def configFile = testDir.toPath().resolve(testDir.getName()+'.xml').toFile()

					if (!configFile.exists()) return
					if (!testDir.toPath().resolve('matrices').resolve('Main.jf').toFile().exists()) return

					def reportsDir = new File('reports').getAbsolutePath()
					exec {
						executable 'java'
						args '-Dmvel2.disable.jit=true'
						args '-Xmx2g', '-Xms2g'
						args '-jar', 'jackfish.jar'
						args '-console', '-config='+configFile, '-input=matrices/Main.jf', '-output='+reportsDir, '-verbose=None'
						workingDir project(':core').projectDir
					}
				}
			}
		}
	}
} }

embeddedMysql {
    url = 'jdbc:mysql://localhost:3307/jfIntegrationTest'
    username = 'jf'
    password = ''
    version = 'v5_7_latest'
    timeoutSeconds = 120
}